### Script Generated by Control Surface Studio for Python 3 (resorted to default: no)
import Live
from _Framework.ControlSurface import ControlSurface
from _Framework.Layer import Layer
from _Framework.DeviceComponent import DeviceComponent
from _Framework.MixerComponent import MixerComponent
from _Framework.SliderElement import SliderElement
from _Framework.TransportComponent import TransportComponent
from _Framework.InputControlElement import *
from _Framework.ButtonElement import ButtonElement
from _Framework.ButtonMatrixElement import ButtonMatrixElement
from _Framework.SessionComponent import SessionComponent
from _Framework.EncoderElement import *
from Launchpad.ConfigurableButtonElement import ConfigurableButtonElement
import time
from itertools import chain
from _Framework.Util import find_if
import collections
try:
    from .user import *
except ImportError:
    pass
class css_ck_lc16___generated(ControlSurface):
    def __init__(self, c_instance):
        super(css_ck_lc16___generated, self).__init__(c_instance)
        with self.component_guard():
            global _map_modes
            _map_modes = Live.MidiMap.MapMode
            self.current_track_offset = 0
            self.current_scene_offset = 0
            global mixer
            num_tracks = 128
            num_returns = 24
            if hasattr(self, 'modifierList'):
                self.modifierList()
            if hasattr(self, 'customLists'):
                self.customLists()
            self._settings()
            self._inputs()
            self.device_parameter_banks()
            self.turn_inputs_off()
            self.mixer = MixerComponent(num_tracks, num_returns)
            global active_mode
            self.debug_on = False
            self.mode_list()
            self.set_active_mode(self.modes[0])
            self.listening_to_tracks()
            self.song().add_tracks_listener(self.listening_to_tracks)
            self.song().add_tracks_listener(self._on_tracks_changed)
            self.song().add_scenes_listener(self._on_scenes_changed)
            self.all_track_device_listeners()
            self.song().view.add_selected_parameter_listener(self._on_selected_parameter_changed)
            self.create_clip_slot_map()
            try:
                self.user = user(self)
            except:
                pass
            self.call_script_reaction(None, None, 'script_was_initialised')
    def modifierList(self):
        global modifiers
        self.modifiers = {}
        self.modifiers["m1"] = {"value": 0}
        self.modifiers["m2"] = {"value": 0}
        self.modifiers["m3"] = {"value": 0}
        self.modifiers["m4"] = {"value": 0}
        self.modifiers["m5"] = {"value": 0}
        self.modifiers["m6"] = {"value": 0}
        self.modifiers["m7"] = {"value": 0}
        self.modifiers["m8"] = {"value": 0}
        self.modifiers["m9"] = {"value": 0}
        self.modifiers["m10"] = {"value": 0}
        self.modifiers["m11"] = {"value": 0}
        self.modifiers["m12"] = {"value": 0}
        self.modifiers["m13"] = {"value": 0}
        self.modifiers["m14"] = {"value": 0}
        self.modifiers["m15"] = {"value": 0}
        self.modifiers["m16"] = {"value": 0}
        self.modifiers["m17"] = {"value": 0}
        self.modifiers["m18"] = {"value": 0}
        self.modifiers["m19"] = {"value": 0}
        self.modifiers["m20"] = {"value": 0}
    def customLists(self):
        global lists
        self.lists = {}
        self.lists["list1"] = {"value": []}
        self.lists["list2"] = {"value": []}
        self.lists["list3"] = {"value": []}
        self.lists["list4"] = {"value": []}
        self.lists["list5"] = {"value": []}
        self.lists["list6"] = {"value": []}
        self.lists["list7"] = {"value": []}
        self.lists["list8"] = {"value": []}
        self.lists["list9"] = {"value": []}
        self.lists["list10"] = {"value": []}
    def _settings(self):
        self.global_feedback = "default"
        self.global_feedback_active = True
        self.global_LED_on = 127
        self.global_LED_off = 0
        self.controller_LED_on = 127
        self.controller_LED_off = 0
        self.led_on = self.controller_LED_on
        self.led_off = self.controller_LED_off
    def mode_list(self):
        global modes
        self.mode_conf = 31351
        self.modes = {}
        self.modes[0] = "1"
        self.modes[1] = "87"
        self.modes[2] = "240"
        self.modes[3] = "268"
        self.modes[4] = "298"
    def _inputs(self):
        self.input_map = [
            "midi_cc_ch_2_val_21",
            "midi_cc_ch_2_val_22",
            "midi_cc_ch_2_val_23",
            "midi_cc_ch_2_val_24",
            "midi_cc_ch_2_val_25",
            "midi_cc_ch_2_val_26",
            "midi_cc_ch_2_val_27",
            "midi_cc_ch_2_val_28",
            "midi_note_ch_8_val_9",
            "midi_note_ch_8_val_12",
            "midi_note_ch_8_val_37",
            "midi_note_ch_8_val_38",
            "midi_note_ch_8_val_36",
            "midi_note_ch_8_val_60",
            "midi_note_ch_8_val_41",
            "midi_note_ch_8_val_43",
            "midi_cc_ch_2_val_29",
            "midi_cc_ch_2_val_42",
            "midi_cc_ch_2_val_43",
            "midi_cc_ch_2_val_44",
            "midi_cc_ch_2_val_45",
            "midi_cc_ch_2_val_46",
            "midi_cc_ch_2_val_47",
            "midi_cc_ch_2_val_48",
            "midi_cc_ch_2_val_114",
            "midi_cc_ch_2_val_115",
            "midi_cc_ch_2_val_116",
            "midi_cc_ch_2_val_117"]
        self.midi_cc_ch_2_val_21 = EncoderElement(MIDI_CC_TYPE, 2, 21, _map_modes.absolute)
        self.midi_cc_ch_2_val_21.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_21.pre_val = 0
        self.midi_cc_ch_2_val_21.cur_val = 0
        self.midi_cc_ch_2_val_22 = EncoderElement(MIDI_CC_TYPE, 2, 22, _map_modes.absolute)
        self.midi_cc_ch_2_val_22.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_22.pre_val = 0
        self.midi_cc_ch_2_val_22.cur_val = 0
        self.midi_cc_ch_2_val_23 = EncoderElement(MIDI_CC_TYPE, 2, 23, _map_modes.absolute)
        self.midi_cc_ch_2_val_23.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_23.pre_val = 0
        self.midi_cc_ch_2_val_23.cur_val = 0
        self.midi_cc_ch_2_val_24 = EncoderElement(MIDI_CC_TYPE, 2, 24, _map_modes.absolute)
        self.midi_cc_ch_2_val_24.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_24.pre_val = 0
        self.midi_cc_ch_2_val_24.cur_val = 0
        self.midi_cc_ch_2_val_25 = EncoderElement(MIDI_CC_TYPE, 2, 25, _map_modes.absolute)
        self.midi_cc_ch_2_val_25.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_25.pre_val = 0
        self.midi_cc_ch_2_val_25.cur_val = 0
        self.midi_cc_ch_2_val_26 = EncoderElement(MIDI_CC_TYPE, 2, 26, _map_modes.absolute)
        self.midi_cc_ch_2_val_26.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_26.pre_val = 0
        self.midi_cc_ch_2_val_26.cur_val = 0
        self.midi_cc_ch_2_val_27 = EncoderElement(MIDI_CC_TYPE, 2, 27, _map_modes.absolute)
        self.midi_cc_ch_2_val_27.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_27.pre_val = 0
        self.midi_cc_ch_2_val_27.cur_val = 0
        self.midi_cc_ch_2_val_28 = EncoderElement(MIDI_CC_TYPE, 2, 28, _map_modes.absolute)
        self.midi_cc_ch_2_val_28.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_28.pre_val = 0
        self.midi_cc_ch_2_val_28.cur_val = 0
        self.midi_note_ch_8_val_9 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 8, 9)
        self.midi_note_ch_8_val_9.set_on_off_values(self.led_on, self.led_off)
        self.midi_note_ch_8_val_9.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_note_ch_8_val_9.pre_val = 0
        self.midi_note_ch_8_val_9.cur_val = 0
        self.midi_note_ch_8_val_12 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 8, 12)
        self.midi_note_ch_8_val_12.set_on_off_values(self.led_on, self.led_off)
        self.midi_note_ch_8_val_12.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_note_ch_8_val_12.pre_val = 0
        self.midi_note_ch_8_val_12.cur_val = 0
        self.midi_note_ch_8_val_37 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 8, 37)
        self.midi_note_ch_8_val_37.set_on_off_values(self.led_on, self.led_off)
        self.midi_note_ch_8_val_37.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_note_ch_8_val_37.pre_val = 0
        self.midi_note_ch_8_val_37.cur_val = 0
        self.midi_note_ch_8_val_38 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 8, 38)
        self.midi_note_ch_8_val_38.set_on_off_values(self.led_on, self.led_off)
        self.midi_note_ch_8_val_38.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_note_ch_8_val_38.pre_val = 0
        self.midi_note_ch_8_val_38.cur_val = 0
        self.midi_note_ch_8_val_36 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 8, 36)
        self.midi_note_ch_8_val_36.set_on_off_values(self.led_on, self.led_off)
        self.midi_note_ch_8_val_36.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_note_ch_8_val_36.pre_val = 0
        self.midi_note_ch_8_val_36.cur_val = 0
        self.midi_note_ch_8_val_60 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 8, 60)
        self.midi_note_ch_8_val_60.set_on_off_values(self.led_on, self.led_off)
        self.midi_note_ch_8_val_60.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_note_ch_8_val_60.pre_val = 0
        self.midi_note_ch_8_val_60.cur_val = 0
        self.midi_note_ch_8_val_41 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 8, 41)
        self.midi_note_ch_8_val_41.set_on_off_values(self.led_on, self.led_off)
        self.midi_note_ch_8_val_41.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_note_ch_8_val_41.pre_val = 0
        self.midi_note_ch_8_val_41.cur_val = 0
        self.midi_note_ch_8_val_43 = ConfigurableButtonElement(True, MIDI_NOTE_TYPE, 8, 43)
        self.midi_note_ch_8_val_43.set_on_off_values(self.led_on, self.led_off)
        self.midi_note_ch_8_val_43.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_note_ch_8_val_43.pre_val = 0
        self.midi_note_ch_8_val_43.cur_val = 0
        self.midi_cc_ch_2_val_29 = EncoderElement(MIDI_CC_TYPE, 2, 29, _map_modes.absolute)
        self.midi_cc_ch_2_val_29.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_29.pre_val = 0
        self.midi_cc_ch_2_val_29.cur_val = 0
        self.midi_cc_ch_2_val_42 = EncoderElement(MIDI_CC_TYPE, 2, 42, _map_modes.absolute)
        self.midi_cc_ch_2_val_42.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_42.pre_val = 0
        self.midi_cc_ch_2_val_42.cur_val = 0
        self.midi_cc_ch_2_val_43 = EncoderElement(MIDI_CC_TYPE, 2, 43, _map_modes.absolute)
        self.midi_cc_ch_2_val_43.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_43.pre_val = 0
        self.midi_cc_ch_2_val_43.cur_val = 0
        self.midi_cc_ch_2_val_44 = EncoderElement(MIDI_CC_TYPE, 2, 44, _map_modes.absolute)
        self.midi_cc_ch_2_val_44.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_44.pre_val = 0
        self.midi_cc_ch_2_val_44.cur_val = 0
        self.midi_cc_ch_2_val_45 = EncoderElement(MIDI_CC_TYPE, 2, 45, _map_modes.absolute)
        self.midi_cc_ch_2_val_45.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_45.pre_val = 0
        self.midi_cc_ch_2_val_45.cur_val = 0
        self.midi_cc_ch_2_val_46 = EncoderElement(MIDI_CC_TYPE, 2, 46, _map_modes.absolute)
        self.midi_cc_ch_2_val_46.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_46.pre_val = 0
        self.midi_cc_ch_2_val_46.cur_val = 0
        self.midi_cc_ch_2_val_47 = EncoderElement(MIDI_CC_TYPE, 2, 47, _map_modes.absolute)
        self.midi_cc_ch_2_val_47.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_47.pre_val = 0
        self.midi_cc_ch_2_val_47.cur_val = 0
        self.midi_cc_ch_2_val_48 = EncoderElement(MIDI_CC_TYPE, 2, 48, _map_modes.absolute)
        self.midi_cc_ch_2_val_48.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_48.pre_val = 0
        self.midi_cc_ch_2_val_48.cur_val = 0
        self.midi_cc_ch_2_val_114 = ConfigurableButtonElement(True, MIDI_CC_TYPE, 2, 114)
        self.midi_cc_ch_2_val_114.set_on_off_values(self.led_on, self.led_off)
        self.midi_cc_ch_2_val_114.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_114.pre_val = 0
        self.midi_cc_ch_2_val_114.cur_val = 0
        self.midi_cc_ch_2_val_115 = ConfigurableButtonElement(True, MIDI_CC_TYPE, 2, 115)
        self.midi_cc_ch_2_val_115.set_on_off_values(self.led_on, self.led_off)
        self.midi_cc_ch_2_val_115.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_115.pre_val = 0
        self.midi_cc_ch_2_val_115.cur_val = 0
        self.midi_cc_ch_2_val_116 = ConfigurableButtonElement(True, MIDI_CC_TYPE, 2, 116)
        self.midi_cc_ch_2_val_116.set_on_off_values(self.led_on, self.led_off)
        self.midi_cc_ch_2_val_116.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_116.pre_val = 0
        self.midi_cc_ch_2_val_116.cur_val = 0
        self.midi_cc_ch_2_val_117 = ConfigurableButtonElement(True, MIDI_CC_TYPE, 2, 117)
        self.midi_cc_ch_2_val_117.set_on_off_values(self.led_on, self.led_off)
        self.midi_cc_ch_2_val_117.add_value_listener(self.placehold_listener,identify_sender= False)
        self.midi_cc_ch_2_val_117.pre_val = 0
        self.midi_cc_ch_2_val_117.cur_val = 0
    def _mode1_custom_lom_listeners(self, updated_by=False):
        exclude_list = []
        if updated_by not in exclude_list:
            try:
                self.mode1_listener_attach0 = self.song()
                self.mode1_listener_attach0.add_record_mode_listener(self._mode1_self_song_add_record_mode_listener_id_186)
            except:
                pass
        exclude_list = []
        if updated_by not in exclude_list:
            try:
                self.mode1_listener_attach1 = self.song()
                self.mode1_listener_attach1.add_is_playing_listener(self._mode1_self_song_add_is_playing_listener_id_186)
            except:
                pass
        exclude_list = []
        if updated_by not in exclude_list:
            try:
                self.mode1_listener_attach2 = self.song().view
                self.mode1_listener_attach2.add_selected_track_listener(self._mode1_self_song_view_add_selected_track_listener_id_203)
            except:
                pass
        exclude_list = []
        if updated_by not in exclude_list:
            try:
                self.mode1_listener_attach3 = self.song().view
                self.mode1_listener_attach3.add_selected_track_listener(self._mode1_self_song_view_add_selected_track_listener_id_206)
            except:
                pass
        exclude_list = []
        if updated_by not in exclude_list:
            try:
                self.mode1_listener_attach4 = self.song().view.selected_track.view
                self.mode1_listener_attach4.add_selected_device_listener(self._mode1_self_song_view_selected_track_view_add_selected_device_listener_id_206)
            except:
                pass
        return
    def _mode240_custom_lom_listeners(self, updated_by=False):
        exclude_list = []
        if updated_by not in exclude_list:
            try:
                self.mode240_listener_attach0 = self.song().view
                self.mode240_listener_attach0.add_selected_track_listener(self._mode240_self_song_view_add_selected_track_listener_id_248)
            except:
                pass
        return
    def _mode268_custom_lom_listeners(self, updated_by=False):
        exclude_list = []
        if updated_by not in exclude_list:
            try:
                self.mode268_listener_attach0 = self.song().view
                self.mode268_listener_attach0.add_selected_track_listener(self._mode268_self_song_view_add_selected_track_listener_id_295)
            except:
                pass
        return
    def _mode298_custom_lom_listeners(self, updated_by=False):
        exclude_list = []
        if updated_by not in exclude_list:
            try:
                self.mode298_listener_attach0 = self.song().view
                self.mode298_listener_attach0.add_selected_track_listener(self._mode298_self_song_view_add_selected_track_listener_id_325)
            except:
                pass
        return
    def _remove_mode1_custom_lom_listeners(self, updated_by=False):
        exclude_list = []
        if updated_by not in exclude_list:
            try:
                self.mode1_listener_attach0.remove_record_mode_listener(self._mode1_self_song_add_record_mode_listener_id_186)
                self.mode1_listener_attach0 = None
            except:
                pass
        exclude_list = []
        if updated_by not in exclude_list:
            try:
                self.mode1_listener_attach1.remove_is_playing_listener(self._mode1_self_song_add_is_playing_listener_id_186)
                self.mode1_listener_attach1 = None
            except:
                pass
        exclude_list = []
        if updated_by not in exclude_list:
            try:
                self.mode1_listener_attach2.remove_selected_track_listener(self._mode1_self_song_view_add_selected_track_listener_id_203)
                self.mode1_listener_attach2 = None
            except:
                pass
        exclude_list = []
        if updated_by not in exclude_list:
            try:
                self.mode1_listener_attach3.remove_selected_track_listener(self._mode1_self_song_view_add_selected_track_listener_id_206)
                self.mode1_listener_attach3 = None
            except:
                pass
        exclude_list = []
        if updated_by not in exclude_list:
            try:
                self.mode1_listener_attach4.remove_selected_device_listener(self._mode1_self_song_view_selected_track_view_add_selected_device_listener_id_206)
                self.mode1_listener_attach4 = None
            except:
                pass
        return
    def _remove_mode240_custom_lom_listeners(self, updated_by=False):
        exclude_list = []
        if updated_by not in exclude_list:
            try:
                self.mode240_listener_attach0.remove_selected_track_listener(self._mode240_self_song_view_add_selected_track_listener_id_248)
                self.mode240_listener_attach0 = None
            except:
                pass
        return
    def _remove_mode268_custom_lom_listeners(self, updated_by=False):
        exclude_list = []
        if updated_by not in exclude_list:
            try:
                self.mode268_listener_attach0.remove_selected_track_listener(self._mode268_self_song_view_add_selected_track_listener_id_295)
                self.mode268_listener_attach0 = None
            except:
                pass
        return
    def _remove_mode298_custom_lom_listeners(self, updated_by=False):
        exclude_list = []
        if updated_by not in exclude_list:
            try:
                self.mode298_listener_attach0.remove_selected_track_listener(self._mode298_self_song_view_add_selected_track_listener_id_325)
                self.mode298_listener_attach0 = None
            except:
                pass
        return
    def _mode1(self):
        self.show_message("Device is active")
        self.midi_note_ch_8_val_37.add_value_listener(self.midi_note_ch_8_val_37_mode1_listener,identify_sender= False)
        self.midi_note_ch_8_val_38.add_value_listener(self.midi_note_ch_8_val_38_mode1_listener,identify_sender= False)
        self.midi_note_ch_8_val_9.add_value_listener(self.midi_note_ch_8_val_9_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_21.add_value_listener(self.midi_cc_ch_2_val_21_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_22.add_value_listener(self.midi_cc_ch_2_val_22_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_23.add_value_listener(self.midi_cc_ch_2_val_23_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_24.add_value_listener(self.midi_cc_ch_2_val_24_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_25.add_value_listener(self.midi_cc_ch_2_val_25_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_26.add_value_listener(self.midi_cc_ch_2_val_26_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_27.add_value_listener(self.midi_cc_ch_2_val_27_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_28.add_value_listener(self.midi_cc_ch_2_val_28_mode1_listener,identify_sender= False)
        self.midi_note_ch_8_val_60.add_value_listener(self.midi_note_ch_8_val_60_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_114.add_value_listener(self.midi_cc_ch_2_val_114_mode1_listener,identify_sender= False)
        self.midi_note_ch_8_val_43.add_value_listener(self.midi_note_ch_8_val_43_mode1_listener,identify_sender= False)
        self.midi_note_ch_8_val_41.add_value_listener(self.midi_note_ch_8_val_41_mode1_listener,identify_sender= False)
        self.midi_note_ch_8_val_36.add_value_listener(self.midi_note_ch_8_val_36_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_29.add_value_listener(self.midi_cc_ch_2_val_29_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_42.add_value_listener(self.midi_cc_ch_2_val_42_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_43.add_value_listener(self.midi_cc_ch_2_val_43_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_44.add_value_listener(self.midi_cc_ch_2_val_44_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_45.add_value_listener(self.midi_cc_ch_2_val_45_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_46.add_value_listener(self.midi_cc_ch_2_val_46_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_47.add_value_listener(self.midi_cc_ch_2_val_47_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_48.add_value_listener(self.midi_cc_ch_2_val_48_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_117.add_value_listener(self.midi_cc_ch_2_val_117_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_116.add_value_listener(self.midi_cc_ch_2_val_116_mode1_listener,identify_sender= False)
        self.midi_cc_ch_2_val_115.add_value_listener(self.midi_cc_ch_2_val_115_mode1_listener,identify_sender= False)
        self.midi_note_ch_8_val_12.add_value_listener(self.midi_note_ch_8_val_12_mode1_listener,identify_sender= False)
        self._mode1_configs()
        self._mode1_led_listeners()
        self._add_custom_lom_listeners_handler(1)
    def _mode87(self):
        self.show_message("Shift Mode is active")
        self.midi_note_ch_8_val_43.add_value_listener(self.midi_note_ch_8_val_43_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_21.add_value_listener(self.midi_cc_ch_2_val_21_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_22.add_value_listener(self.midi_cc_ch_2_val_22_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_23.add_value_listener(self.midi_cc_ch_2_val_23_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_24.add_value_listener(self.midi_cc_ch_2_val_24_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_29.add_value_listener(self.midi_cc_ch_2_val_29_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_42.add_value_listener(self.midi_cc_ch_2_val_42_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_43.add_value_listener(self.midi_cc_ch_2_val_43_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_44.add_value_listener(self.midi_cc_ch_2_val_44_mode87_listener,identify_sender= False)
        self.midi_note_ch_8_val_60.add_value_listener(self.midi_note_ch_8_val_60_mode87_listener,identify_sender= False)
        self.midi_note_ch_8_val_9.add_value_listener(self.midi_note_ch_8_val_9_mode87_listener,identify_sender= False)
        self.midi_note_ch_8_val_12.add_value_listener(self.midi_note_ch_8_val_12_mode87_listener,identify_sender= False)
        self.midi_note_ch_8_val_37.add_value_listener(self.midi_note_ch_8_val_37_mode87_listener,identify_sender= False)
        self.midi_note_ch_8_val_38.add_value_listener(self.midi_note_ch_8_val_38_mode87_listener,identify_sender= False)
        self.midi_note_ch_8_val_36.add_value_listener(self.midi_note_ch_8_val_36_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_28.add_value_listener(self.midi_cc_ch_2_val_28_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_48.add_value_listener(self.midi_cc_ch_2_val_48_mode87_listener,identify_sender= False)
        self.midi_note_ch_8_val_41.add_value_listener(self.midi_note_ch_8_val_41_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_116.add_value_listener(self.midi_cc_ch_2_val_116_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_45.add_value_listener(self.midi_cc_ch_2_val_45_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_117.add_value_listener(self.midi_cc_ch_2_val_117_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_114.add_value_listener(self.midi_cc_ch_2_val_114_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_115.add_value_listener(self.midi_cc_ch_2_val_115_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_25.add_value_listener(self.midi_cc_ch_2_val_25_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_26.add_value_listener(self.midi_cc_ch_2_val_26_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_27.add_value_listener(self.midi_cc_ch_2_val_27_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_46.add_value_listener(self.midi_cc_ch_2_val_46_mode87_listener,identify_sender= False)
        self.midi_cc_ch_2_val_47.add_value_listener(self.midi_cc_ch_2_val_47_mode87_listener,identify_sender= False)
        self._mode87_configs()
        self._mode87_led_listeners()
    def _mode240(self):
        self.show_message("Archetype Mode [2] (self.modes[3]) is active")
        self.midi_cc_ch_2_val_21.add_value_listener(self.midi_cc_ch_2_val_21_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_22.add_value_listener(self.midi_cc_ch_2_val_22_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_23.add_value_listener(self.midi_cc_ch_2_val_23_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_24.add_value_listener(self.midi_cc_ch_2_val_24_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_25.add_value_listener(self.midi_cc_ch_2_val_25_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_26.add_value_listener(self.midi_cc_ch_2_val_26_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_27.add_value_listener(self.midi_cc_ch_2_val_27_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_28.add_value_listener(self.midi_cc_ch_2_val_28_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_29.add_value_listener(self.midi_cc_ch_2_val_29_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_42.add_value_listener(self.midi_cc_ch_2_val_42_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_43.add_value_listener(self.midi_cc_ch_2_val_43_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_44.add_value_listener(self.midi_cc_ch_2_val_44_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_45.add_value_listener(self.midi_cc_ch_2_val_45_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_46.add_value_listener(self.midi_cc_ch_2_val_46_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_47.add_value_listener(self.midi_cc_ch_2_val_47_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_48.add_value_listener(self.midi_cc_ch_2_val_48_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_114.add_value_listener(self.midi_cc_ch_2_val_114_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_115.add_value_listener(self.midi_cc_ch_2_val_115_mode240_listener,identify_sender= False)
        self.midi_note_ch_8_val_43.add_value_listener(self.midi_note_ch_8_val_43_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_116.add_value_listener(self.midi_cc_ch_2_val_116_mode240_listener,identify_sender= False)
        self.midi_cc_ch_2_val_117.add_value_listener(self.midi_cc_ch_2_val_117_mode240_listener,identify_sender= False)
        self.midi_note_ch_8_val_9.add_value_listener(self.midi_note_ch_8_val_9_mode240_listener,identify_sender= False)
        self.midi_note_ch_8_val_12.add_value_listener(self.midi_note_ch_8_val_12_mode240_listener,identify_sender= False)
        self.midi_note_ch_8_val_37.add_value_listener(self.midi_note_ch_8_val_37_mode240_listener,identify_sender= False)
        self._mode240_configs()
        self._mode240_led_listeners()
        self._add_custom_lom_listeners_handler(240)
    def _mode268(self):
        self.show_message("Device - Wavetable Mode[3] (self.modes[4]) is active")
        self.midi_cc_ch_2_val_21.add_value_listener(self.midi_cc_ch_2_val_21_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_22.add_value_listener(self.midi_cc_ch_2_val_22_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_23.add_value_listener(self.midi_cc_ch_2_val_23_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_24.add_value_listener(self.midi_cc_ch_2_val_24_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_25.add_value_listener(self.midi_cc_ch_2_val_25_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_26.add_value_listener(self.midi_cc_ch_2_val_26_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_27.add_value_listener(self.midi_cc_ch_2_val_27_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_28.add_value_listener(self.midi_cc_ch_2_val_28_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_29.add_value_listener(self.midi_cc_ch_2_val_29_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_42.add_value_listener(self.midi_cc_ch_2_val_42_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_43.add_value_listener(self.midi_cc_ch_2_val_43_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_44.add_value_listener(self.midi_cc_ch_2_val_44_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_45.add_value_listener(self.midi_cc_ch_2_val_45_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_46.add_value_listener(self.midi_cc_ch_2_val_46_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_47.add_value_listener(self.midi_cc_ch_2_val_47_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_48.add_value_listener(self.midi_cc_ch_2_val_48_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_114.add_value_listener(self.midi_cc_ch_2_val_114_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_115.add_value_listener(self.midi_cc_ch_2_val_115_mode268_listener,identify_sender= False)
        self.midi_note_ch_8_val_43.add_value_listener(self.midi_note_ch_8_val_43_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_116.add_value_listener(self.midi_cc_ch_2_val_116_mode268_listener,identify_sender= False)
        self.midi_cc_ch_2_val_117.add_value_listener(self.midi_cc_ch_2_val_117_mode268_listener,identify_sender= False)
        self.midi_note_ch_8_val_9.add_value_listener(self.midi_note_ch_8_val_9_mode268_listener,identify_sender= False)
        self.midi_note_ch_8_val_12.add_value_listener(self.midi_note_ch_8_val_12_mode268_listener,identify_sender= False)
        self.midi_note_ch_8_val_37.add_value_listener(self.midi_note_ch_8_val_37_mode268_listener,identify_sender= False)
        self._mode268_configs()
        self._mode268_led_listeners()
        self._add_custom_lom_listeners_handler(268)
    def _mode298(self):
        self.show_message("Device - Simpler Mode[4] (self.modes[5]) is active")
        self.midi_cc_ch_2_val_21.add_value_listener(self.midi_cc_ch_2_val_21_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_22.add_value_listener(self.midi_cc_ch_2_val_22_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_23.add_value_listener(self.midi_cc_ch_2_val_23_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_24.add_value_listener(self.midi_cc_ch_2_val_24_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_25.add_value_listener(self.midi_cc_ch_2_val_25_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_26.add_value_listener(self.midi_cc_ch_2_val_26_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_27.add_value_listener(self.midi_cc_ch_2_val_27_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_28.add_value_listener(self.midi_cc_ch_2_val_28_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_29.add_value_listener(self.midi_cc_ch_2_val_29_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_42.add_value_listener(self.midi_cc_ch_2_val_42_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_43.add_value_listener(self.midi_cc_ch_2_val_43_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_44.add_value_listener(self.midi_cc_ch_2_val_44_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_45.add_value_listener(self.midi_cc_ch_2_val_45_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_46.add_value_listener(self.midi_cc_ch_2_val_46_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_47.add_value_listener(self.midi_cc_ch_2_val_47_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_48.add_value_listener(self.midi_cc_ch_2_val_48_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_114.add_value_listener(self.midi_cc_ch_2_val_114_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_115.add_value_listener(self.midi_cc_ch_2_val_115_mode298_listener,identify_sender= False)
        self.midi_note_ch_8_val_43.add_value_listener(self.midi_note_ch_8_val_43_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_116.add_value_listener(self.midi_cc_ch_2_val_116_mode298_listener,identify_sender= False)
        self.midi_cc_ch_2_val_117.add_value_listener(self.midi_cc_ch_2_val_117_mode298_listener,identify_sender= False)
        self.midi_note_ch_8_val_9.add_value_listener(self.midi_note_ch_8_val_9_mode298_listener,identify_sender= False)
        self.midi_note_ch_8_val_12.add_value_listener(self.midi_note_ch_8_val_12_mode298_listener,identify_sender= False)
        self.midi_note_ch_8_val_37.add_value_listener(self.midi_note_ch_8_val_37_mode298_listener,identify_sender= False)
        self._mode298_configs()
        self._mode298_led_listeners()
        self._add_custom_lom_listeners_handler(298)
    def _remove_mode1(self):
        self.show_message("Mode 1 is removed")
        self.turn_inputs_off()
        self.midi_note_ch_8_val_37.remove_value_listener(self.midi_note_ch_8_val_37_mode1_listener)
        self.midi_note_ch_8_val_38.remove_value_listener(self.midi_note_ch_8_val_38_mode1_listener)
        self.midi_note_ch_8_val_9.remove_value_listener(self.midi_note_ch_8_val_9_mode1_listener)
        self.midi_cc_ch_2_val_21.remove_value_listener(self.midi_cc_ch_2_val_21_mode1_listener)
        self.midi_cc_ch_2_val_22.remove_value_listener(self.midi_cc_ch_2_val_22_mode1_listener)
        self.midi_cc_ch_2_val_23.remove_value_listener(self.midi_cc_ch_2_val_23_mode1_listener)
        self.midi_cc_ch_2_val_24.remove_value_listener(self.midi_cc_ch_2_val_24_mode1_listener)
        self.midi_cc_ch_2_val_25.remove_value_listener(self.midi_cc_ch_2_val_25_mode1_listener)
        self.midi_cc_ch_2_val_26.remove_value_listener(self.midi_cc_ch_2_val_26_mode1_listener)
        self.midi_cc_ch_2_val_27.remove_value_listener(self.midi_cc_ch_2_val_27_mode1_listener)
        self.midi_cc_ch_2_val_28.remove_value_listener(self.midi_cc_ch_2_val_28_mode1_listener)
        self.midi_note_ch_8_val_60.remove_value_listener(self.midi_note_ch_8_val_60_mode1_listener)
        self.midi_cc_ch_2_val_114.remove_value_listener(self.midi_cc_ch_2_val_114_mode1_listener)
        self.midi_note_ch_8_val_43.remove_value_listener(self.midi_note_ch_8_val_43_mode1_listener)
        self.midi_note_ch_8_val_41.remove_value_listener(self.midi_note_ch_8_val_41_mode1_listener)
        self.midi_note_ch_8_val_36.remove_value_listener(self.midi_note_ch_8_val_36_mode1_listener)
        self.midi_cc_ch_2_val_29.remove_value_listener(self.midi_cc_ch_2_val_29_mode1_listener)
        self.midi_cc_ch_2_val_42.remove_value_listener(self.midi_cc_ch_2_val_42_mode1_listener)
        self.midi_cc_ch_2_val_43.remove_value_listener(self.midi_cc_ch_2_val_43_mode1_listener)
        self.midi_cc_ch_2_val_44.remove_value_listener(self.midi_cc_ch_2_val_44_mode1_listener)
        self.midi_cc_ch_2_val_45.remove_value_listener(self.midi_cc_ch_2_val_45_mode1_listener)
        self.midi_cc_ch_2_val_46.remove_value_listener(self.midi_cc_ch_2_val_46_mode1_listener)
        self.midi_cc_ch_2_val_47.remove_value_listener(self.midi_cc_ch_2_val_47_mode1_listener)
        self.midi_cc_ch_2_val_48.remove_value_listener(self.midi_cc_ch_2_val_48_mode1_listener)
        self.midi_cc_ch_2_val_117.remove_value_listener(self.midi_cc_ch_2_val_117_mode1_listener)
        self.midi_cc_ch_2_val_116.remove_value_listener(self.midi_cc_ch_2_val_116_mode1_listener)
        self.midi_cc_ch_2_val_115.remove_value_listener(self.midi_cc_ch_2_val_115_mode1_listener)
        self.midi_note_ch_8_val_12.remove_value_listener(self.midi_note_ch_8_val_12_mode1_listener)
        self._remove_mode1_led_listeners()
        self._remove_custom_lom_listeners_handler(1)
    def _remove_mode87(self):
        self.show_message("Mode 87 is removed")
        self.turn_inputs_off()
        self.midi_note_ch_8_val_43.remove_value_listener(self.midi_note_ch_8_val_43_mode87_listener)
        self.midi_cc_ch_2_val_21.remove_value_listener(self.midi_cc_ch_2_val_21_mode87_listener)
        self.midi_cc_ch_2_val_22.remove_value_listener(self.midi_cc_ch_2_val_22_mode87_listener)
        self.midi_cc_ch_2_val_23.remove_value_listener(self.midi_cc_ch_2_val_23_mode87_listener)
        self.midi_cc_ch_2_val_24.remove_value_listener(self.midi_cc_ch_2_val_24_mode87_listener)
        self.midi_cc_ch_2_val_29.remove_value_listener(self.midi_cc_ch_2_val_29_mode87_listener)
        self.midi_cc_ch_2_val_42.remove_value_listener(self.midi_cc_ch_2_val_42_mode87_listener)
        self.midi_cc_ch_2_val_43.remove_value_listener(self.midi_cc_ch_2_val_43_mode87_listener)
        self.midi_cc_ch_2_val_44.remove_value_listener(self.midi_cc_ch_2_val_44_mode87_listener)
        self.midi_note_ch_8_val_60.remove_value_listener(self.midi_note_ch_8_val_60_mode87_listener)
        self.midi_note_ch_8_val_9.remove_value_listener(self.midi_note_ch_8_val_9_mode87_listener)
        self.midi_note_ch_8_val_12.remove_value_listener(self.midi_note_ch_8_val_12_mode87_listener)
        self.midi_note_ch_8_val_37.remove_value_listener(self.midi_note_ch_8_val_37_mode87_listener)
        self.midi_note_ch_8_val_38.remove_value_listener(self.midi_note_ch_8_val_38_mode87_listener)
        self.midi_note_ch_8_val_36.remove_value_listener(self.midi_note_ch_8_val_36_mode87_listener)
        self.midi_cc_ch_2_val_28.remove_value_listener(self.midi_cc_ch_2_val_28_mode87_listener)
        self.midi_cc_ch_2_val_48.remove_value_listener(self.midi_cc_ch_2_val_48_mode87_listener)
        self.midi_note_ch_8_val_41.remove_value_listener(self.midi_note_ch_8_val_41_mode87_listener)
        self.midi_cc_ch_2_val_116.remove_value_listener(self.midi_cc_ch_2_val_116_mode87_listener)
        self.midi_cc_ch_2_val_45.remove_value_listener(self.midi_cc_ch_2_val_45_mode87_listener)
        self.midi_cc_ch_2_val_117.remove_value_listener(self.midi_cc_ch_2_val_117_mode87_listener)
        self.midi_cc_ch_2_val_114.remove_value_listener(self.midi_cc_ch_2_val_114_mode87_listener)
        self.midi_cc_ch_2_val_115.remove_value_listener(self.midi_cc_ch_2_val_115_mode87_listener)
        self.midi_cc_ch_2_val_25.remove_value_listener(self.midi_cc_ch_2_val_25_mode87_listener)
        self.midi_cc_ch_2_val_26.remove_value_listener(self.midi_cc_ch_2_val_26_mode87_listener)
        self.midi_cc_ch_2_val_27.remove_value_listener(self.midi_cc_ch_2_val_27_mode87_listener)
        self.midi_cc_ch_2_val_46.remove_value_listener(self.midi_cc_ch_2_val_46_mode87_listener)
        self.midi_cc_ch_2_val_47.remove_value_listener(self.midi_cc_ch_2_val_47_mode87_listener)
        self._remove_mode87_led_listeners()
    def _remove_mode240(self):
        self.show_message("Mode 240 is removed")
        self.turn_inputs_off()
        self.midi_cc_ch_2_val_21.remove_value_listener(self.midi_cc_ch_2_val_21_mode240_listener)
        self.midi_cc_ch_2_val_22.remove_value_listener(self.midi_cc_ch_2_val_22_mode240_listener)
        self.midi_cc_ch_2_val_23.remove_value_listener(self.midi_cc_ch_2_val_23_mode240_listener)
        self.midi_cc_ch_2_val_24.remove_value_listener(self.midi_cc_ch_2_val_24_mode240_listener)
        self.midi_cc_ch_2_val_25.remove_value_listener(self.midi_cc_ch_2_val_25_mode240_listener)
        self.midi_cc_ch_2_val_26.remove_value_listener(self.midi_cc_ch_2_val_26_mode240_listener)
        self.midi_cc_ch_2_val_27.remove_value_listener(self.midi_cc_ch_2_val_27_mode240_listener)
        self.midi_cc_ch_2_val_28.remove_value_listener(self.midi_cc_ch_2_val_28_mode240_listener)
        self.midi_cc_ch_2_val_29.remove_value_listener(self.midi_cc_ch_2_val_29_mode240_listener)
        self.midi_cc_ch_2_val_42.remove_value_listener(self.midi_cc_ch_2_val_42_mode240_listener)
        self.midi_cc_ch_2_val_43.remove_value_listener(self.midi_cc_ch_2_val_43_mode240_listener)
        self.midi_cc_ch_2_val_44.remove_value_listener(self.midi_cc_ch_2_val_44_mode240_listener)
        self.midi_cc_ch_2_val_45.remove_value_listener(self.midi_cc_ch_2_val_45_mode240_listener)
        self.midi_cc_ch_2_val_46.remove_value_listener(self.midi_cc_ch_2_val_46_mode240_listener)
        self.midi_cc_ch_2_val_47.remove_value_listener(self.midi_cc_ch_2_val_47_mode240_listener)
        self.midi_cc_ch_2_val_48.remove_value_listener(self.midi_cc_ch_2_val_48_mode240_listener)
        self.midi_cc_ch_2_val_114.remove_value_listener(self.midi_cc_ch_2_val_114_mode240_listener)
        self.midi_cc_ch_2_val_115.remove_value_listener(self.midi_cc_ch_2_val_115_mode240_listener)
        self.midi_note_ch_8_val_43.remove_value_listener(self.midi_note_ch_8_val_43_mode240_listener)
        self.midi_cc_ch_2_val_116.remove_value_listener(self.midi_cc_ch_2_val_116_mode240_listener)
        self.midi_cc_ch_2_val_117.remove_value_listener(self.midi_cc_ch_2_val_117_mode240_listener)
        self.midi_note_ch_8_val_9.remove_value_listener(self.midi_note_ch_8_val_9_mode240_listener)
        self.midi_note_ch_8_val_12.remove_value_listener(self.midi_note_ch_8_val_12_mode240_listener)
        self.midi_note_ch_8_val_37.remove_value_listener(self.midi_note_ch_8_val_37_mode240_listener)
        self._remove_mode240_led_listeners()
        self._remove_custom_lom_listeners_handler(240)
    def _remove_mode268(self):
        self.show_message("Mode 268 is removed")
        self.turn_inputs_off()
        self.midi_cc_ch_2_val_21.remove_value_listener(self.midi_cc_ch_2_val_21_mode268_listener)
        self.midi_cc_ch_2_val_22.remove_value_listener(self.midi_cc_ch_2_val_22_mode268_listener)
        self.midi_cc_ch_2_val_23.remove_value_listener(self.midi_cc_ch_2_val_23_mode268_listener)
        self.midi_cc_ch_2_val_24.remove_value_listener(self.midi_cc_ch_2_val_24_mode268_listener)
        self.midi_cc_ch_2_val_25.remove_value_listener(self.midi_cc_ch_2_val_25_mode268_listener)
        self.midi_cc_ch_2_val_26.remove_value_listener(self.midi_cc_ch_2_val_26_mode268_listener)
        self.midi_cc_ch_2_val_27.remove_value_listener(self.midi_cc_ch_2_val_27_mode268_listener)
        self.midi_cc_ch_2_val_28.remove_value_listener(self.midi_cc_ch_2_val_28_mode268_listener)
        self.midi_cc_ch_2_val_29.remove_value_listener(self.midi_cc_ch_2_val_29_mode268_listener)
        self.midi_cc_ch_2_val_42.remove_value_listener(self.midi_cc_ch_2_val_42_mode268_listener)
        self.midi_cc_ch_2_val_43.remove_value_listener(self.midi_cc_ch_2_val_43_mode268_listener)
        self.midi_cc_ch_2_val_44.remove_value_listener(self.midi_cc_ch_2_val_44_mode268_listener)
        self.midi_cc_ch_2_val_45.remove_value_listener(self.midi_cc_ch_2_val_45_mode268_listener)
        self.midi_cc_ch_2_val_46.remove_value_listener(self.midi_cc_ch_2_val_46_mode268_listener)
        self.midi_cc_ch_2_val_47.remove_value_listener(self.midi_cc_ch_2_val_47_mode268_listener)
        self.midi_cc_ch_2_val_48.remove_value_listener(self.midi_cc_ch_2_val_48_mode268_listener)
        self.midi_cc_ch_2_val_114.remove_value_listener(self.midi_cc_ch_2_val_114_mode268_listener)
        self.midi_cc_ch_2_val_115.remove_value_listener(self.midi_cc_ch_2_val_115_mode268_listener)
        self.midi_note_ch_8_val_43.remove_value_listener(self.midi_note_ch_8_val_43_mode268_listener)
        self.midi_cc_ch_2_val_116.remove_value_listener(self.midi_cc_ch_2_val_116_mode268_listener)
        self.midi_cc_ch_2_val_117.remove_value_listener(self.midi_cc_ch_2_val_117_mode268_listener)
        self.midi_note_ch_8_val_9.remove_value_listener(self.midi_note_ch_8_val_9_mode268_listener)
        self.midi_note_ch_8_val_12.remove_value_listener(self.midi_note_ch_8_val_12_mode268_listener)
        self.midi_note_ch_8_val_37.remove_value_listener(self.midi_note_ch_8_val_37_mode268_listener)
        self._remove_mode268_led_listeners()
        self._remove_custom_lom_listeners_handler(268)
    def _remove_mode298(self):
        self.show_message("Mode 298 is removed")
        self.turn_inputs_off()
        self.midi_cc_ch_2_val_21.remove_value_listener(self.midi_cc_ch_2_val_21_mode298_listener)
        self.midi_cc_ch_2_val_22.remove_value_listener(self.midi_cc_ch_2_val_22_mode298_listener)
        self.midi_cc_ch_2_val_23.remove_value_listener(self.midi_cc_ch_2_val_23_mode298_listener)
        self.midi_cc_ch_2_val_24.remove_value_listener(self.midi_cc_ch_2_val_24_mode298_listener)
        self.midi_cc_ch_2_val_25.remove_value_listener(self.midi_cc_ch_2_val_25_mode298_listener)
        self.midi_cc_ch_2_val_26.remove_value_listener(self.midi_cc_ch_2_val_26_mode298_listener)
        self.midi_cc_ch_2_val_27.remove_value_listener(self.midi_cc_ch_2_val_27_mode298_listener)
        self.midi_cc_ch_2_val_28.remove_value_listener(self.midi_cc_ch_2_val_28_mode298_listener)
        self.midi_cc_ch_2_val_29.remove_value_listener(self.midi_cc_ch_2_val_29_mode298_listener)
        self.midi_cc_ch_2_val_42.remove_value_listener(self.midi_cc_ch_2_val_42_mode298_listener)
        self.midi_cc_ch_2_val_43.remove_value_listener(self.midi_cc_ch_2_val_43_mode298_listener)
        self.midi_cc_ch_2_val_44.remove_value_listener(self.midi_cc_ch_2_val_44_mode298_listener)
        self.midi_cc_ch_2_val_45.remove_value_listener(self.midi_cc_ch_2_val_45_mode298_listener)
        self.midi_cc_ch_2_val_46.remove_value_listener(self.midi_cc_ch_2_val_46_mode298_listener)
        self.midi_cc_ch_2_val_47.remove_value_listener(self.midi_cc_ch_2_val_47_mode298_listener)
        self.midi_cc_ch_2_val_48.remove_value_listener(self.midi_cc_ch_2_val_48_mode298_listener)
        self.midi_cc_ch_2_val_114.remove_value_listener(self.midi_cc_ch_2_val_114_mode298_listener)
        self.midi_cc_ch_2_val_115.remove_value_listener(self.midi_cc_ch_2_val_115_mode298_listener)
        self.midi_note_ch_8_val_43.remove_value_listener(self.midi_note_ch_8_val_43_mode298_listener)
        self.midi_cc_ch_2_val_116.remove_value_listener(self.midi_cc_ch_2_val_116_mode298_listener)
        self.midi_cc_ch_2_val_117.remove_value_listener(self.midi_cc_ch_2_val_117_mode298_listener)
        self.midi_note_ch_8_val_9.remove_value_listener(self.midi_note_ch_8_val_9_mode298_listener)
        self.midi_note_ch_8_val_12.remove_value_listener(self.midi_note_ch_8_val_12_mode298_listener)
        self.midi_note_ch_8_val_37.remove_value_listener(self.midi_note_ch_8_val_37_mode298_listener)
        self._remove_mode298_led_listeners()
        self._remove_custom_lom_listeners_handler(298)
    def device_parameter_banks(self):
        self.device_id_3_banks = ["parameter_bank_1_id_59"]
        self.device_id_71_banks = ["parameter_bank_2_id_72"]
        self.device_id_209_banks = ["parameter_bank_id_250"]
        self.device_id_271_banks = ["parameter_bank_id_272"]
        self.device_id_301_banks = ["parameter_bank_id_302"]
        self.device_id_3_bank_names = ["Parameter Bank 1"]
        self.device_id_3_active_bank = 0
        self.device_id_71_bank_names = ["Parameter Bank 2"]
        self.device_id_71_active_bank = 0
        self.device_id_209_bank_names = ["Parameter Bank"]
        self.device_id_209_active_bank = 0
        self.device_id_271_bank_names = ["Parameter Bank"]
        self.device_id_271_active_bank = 0
        self.device_id_301_bank_names = ["Parameter Bank"]
        self.device_id_301_active_bank = 0
        self.device_id_209_bank_parameters_0 = [
            "parameter_1___osc_1_detune_id_251",
            "parameter_2___osc_1_pos_id_252",
            "parameter_3___osc_1_effect_1_id_253",
            "parameter_4___osc_1_effect_2_id_254",
            "parameter_5___filter_1_type_id_255",
            "parameter_6___filter_1_lphp_id_256",
            "parameter_7___filter_1_freq_id_257",
            "parameter_8___filter_1_res_id_258",
            "parameter_9___amp_attack_id_259",
            "parameter_10___amp_decay_id_260",
            "parameter_11___amp_release_id_261",
            "parameter_12___amp_sustain_id_262",
            "parameter_13___unison_amount_id_263",
            "parameter_14___transpose_id_264",
            "parameter_15___glide_id_265",
            "parameter_16___volume_id_266"]
        self.device_id_3_bank_parameters_0 = [
            "parameter_1_id_60",
            "parameter_2_id_61",
            "parameter_3_id_62",
            "parameter_4_id_63",
            "parameter_5_id_64",
            "parameter_6_id_65",
            "parameter_7_id_66",
            "parameter_8_id_67",
            "parameter_9_id_100",
            "parameter_10_id_101",
            "parameter_11_id_102",
            "parameter_12_id_103",
            "parameter_13_id_104",
            "parameter_14_id_105",
            "parameter_15_id_106",
            "parameter_16_id_107"]
        self.device_id_71_bank_parameters_0 = [
            "parameter_1_id_73",
            "parameter_2_id_74",
            "parameter_3_id_75",
            "parameter_4_id_76",
            "parameter_5_id_77",
            "parameter_6_id_78",
            "parameter_7_id_79",
            "parameter_8_id_80"]
        self.device_id_271_bank_parameters_0 = [
            "parameter_1___osc_1_transp_id_273",
            "parameter_2___osc_1_detune_id_274",
            "parameter_3___osc_1_pos_id_275",
            "parameter_4___osc_1_effect_1_id_276",
            "parameter_5___amp_attack_id_277",
            "parameter_6___amp_decay_id_278",
            "parameter_7___amp_sustain_id_279",
            "parameter_8___amp_release_id_280",
            "parameter_9___filter_1_freq_id_281",
            "parameter_10___filter_1_res_id_282",
            "parameter_11___filter_1_drive_id_283",
            "parameter_12___filter_2_freq_id_284",
            "parameter_13___transpose_id_285",
            "parameter_14___unison_amount_id_286",
            "parameter_15___glide_id_287",
            "parameter_16___volume_id_288"]
        self.device_id_301_bank_parameters_0 = [
            "parameter_1___s_start_id_303",
            "parameter_2___s_length_id_304",
            "parameter_3___transpose_id_305",
            "parameter_4___detune_id_306",
            "parameter_5___filter_type_id_307",
            "parameter_6___filter_circuit___lphp_id_308",
            "parameter_7___filter_freq_id_309",
            "parameter_8___filter_res_id_310",
            "parameter_9___ve_attack_id_311",
            "parameter_10___ve_decay_id_312",
            "parameter_11___ve_sustain_id_313",
            "parameter_12___ve_release_id_314",
            "parameter_13___vol_vel_id_315",
            "parameter_14___trigger_mode_id_316",
            "parameter_15___fade_in_id_317",
            "parameter_16___fade_out_id_318"]
    def midi_cc_ch_2_val_21_mode240_listener(self, value):
        self.midi_cc_ch_2_val_21.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_21, "pre_val"):
            self.midi_cc_ch_2_val_21.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_21, "prev_press_time"):
            self.midi_cc_ch_2_val_21.prev_press_time = time.time()
        if (self.device_id_209_active_bank == 0):
            self.pick_brain(self.parameter_1___osc_1_detune_id_251)
        self.midi_cc_ch_2_val_21.pre_val = value
        self.midi_cc_ch_2_val_21.prev_press_time = time.time()
    def midi_cc_ch_2_val_22_mode240_listener(self, value):
        self.midi_cc_ch_2_val_22.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_22, "pre_val"):
            self.midi_cc_ch_2_val_22.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_22, "prev_press_time"):
            self.midi_cc_ch_2_val_22.prev_press_time = time.time()
        if (self.device_id_209_active_bank == 0):
            self.pick_brain(self.parameter_2___osc_1_pos_id_252)
        self.midi_cc_ch_2_val_22.pre_val = value
        self.midi_cc_ch_2_val_22.prev_press_time = time.time()
    def midi_cc_ch_2_val_23_mode240_listener(self, value):
        self.midi_cc_ch_2_val_23.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_23, "pre_val"):
            self.midi_cc_ch_2_val_23.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_23, "prev_press_time"):
            self.midi_cc_ch_2_val_23.prev_press_time = time.time()
        if (self.device_id_209_active_bank == 0):
            self.pick_brain(self.parameter_3___osc_1_effect_1_id_253)
        self.midi_cc_ch_2_val_23.pre_val = value
        self.midi_cc_ch_2_val_23.prev_press_time = time.time()
    def midi_cc_ch_2_val_24_mode240_listener(self, value):
        self.midi_cc_ch_2_val_24.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_24, "pre_val"):
            self.midi_cc_ch_2_val_24.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_24, "prev_press_time"):
            self.midi_cc_ch_2_val_24.prev_press_time = time.time()
        if (self.device_id_209_active_bank == 0):
            self.pick_brain(self.parameter_4___osc_1_effect_2_id_254)
        self.midi_cc_ch_2_val_24.pre_val = value
        self.midi_cc_ch_2_val_24.prev_press_time = time.time()
    def midi_cc_ch_2_val_25_mode240_listener(self, value):
        self.midi_cc_ch_2_val_25.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_25, "pre_val"):
            self.midi_cc_ch_2_val_25.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_25, "prev_press_time"):
            self.midi_cc_ch_2_val_25.prev_press_time = time.time()
        if (self.device_id_209_active_bank == 0):
            self.pick_brain(self.parameter_5___filter_1_type_id_255)
        self.midi_cc_ch_2_val_25.pre_val = value
        self.midi_cc_ch_2_val_25.prev_press_time = time.time()
    def midi_cc_ch_2_val_26_mode240_listener(self, value):
        self.midi_cc_ch_2_val_26.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_26, "pre_val"):
            self.midi_cc_ch_2_val_26.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_26, "prev_press_time"):
            self.midi_cc_ch_2_val_26.prev_press_time = time.time()
        if (self.device_id_209_active_bank == 0):
            self.pick_brain(self.parameter_6___filter_1_lphp_id_256)
        self.midi_cc_ch_2_val_26.pre_val = value
        self.midi_cc_ch_2_val_26.prev_press_time = time.time()
    def midi_cc_ch_2_val_27_mode240_listener(self, value):
        self.midi_cc_ch_2_val_27.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_27, "pre_val"):
            self.midi_cc_ch_2_val_27.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_27, "prev_press_time"):
            self.midi_cc_ch_2_val_27.prev_press_time = time.time()
        if (self.device_id_209_active_bank == 0):
            self.pick_brain(self.parameter_7___filter_1_freq_id_257)
        self.midi_cc_ch_2_val_27.pre_val = value
        self.midi_cc_ch_2_val_27.prev_press_time = time.time()
    def midi_cc_ch_2_val_28_mode240_listener(self, value):
        self.midi_cc_ch_2_val_28.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_28, "pre_val"):
            self.midi_cc_ch_2_val_28.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_28, "prev_press_time"):
            self.midi_cc_ch_2_val_28.prev_press_time = time.time()
        if (self.device_id_209_active_bank == 0):
            self.pick_brain(self.parameter_8___filter_1_res_id_258)
        self.midi_cc_ch_2_val_28.pre_val = value
        self.midi_cc_ch_2_val_28.prev_press_time = time.time()
    def midi_cc_ch_2_val_29_mode240_listener(self, value):
        self.midi_cc_ch_2_val_29.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_29, "pre_val"):
            self.midi_cc_ch_2_val_29.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_29, "prev_press_time"):
            self.midi_cc_ch_2_val_29.prev_press_time = time.time()
        if (self.device_id_209_active_bank == 0):
            self.pick_brain(self.parameter_9___amp_attack_id_259)
        self.midi_cc_ch_2_val_29.pre_val = value
        self.midi_cc_ch_2_val_29.prev_press_time = time.time()
    def midi_cc_ch_2_val_42_mode240_listener(self, value):
        self.midi_cc_ch_2_val_42.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_42, "pre_val"):
            self.midi_cc_ch_2_val_42.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_42, "prev_press_time"):
            self.midi_cc_ch_2_val_42.prev_press_time = time.time()
        if (self.device_id_209_active_bank == 0):
            self.pick_brain(self.parameter_10___amp_decay_id_260)
        self.midi_cc_ch_2_val_42.pre_val = value
        self.midi_cc_ch_2_val_42.prev_press_time = time.time()
    def midi_cc_ch_2_val_43_mode240_listener(self, value):
        self.midi_cc_ch_2_val_43.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_43, "pre_val"):
            self.midi_cc_ch_2_val_43.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_43, "prev_press_time"):
            self.midi_cc_ch_2_val_43.prev_press_time = time.time()
        if (self.device_id_209_active_bank == 0):
            self.pick_brain(self.parameter_11___amp_release_id_261)
        self.midi_cc_ch_2_val_43.pre_val = value
        self.midi_cc_ch_2_val_43.prev_press_time = time.time()
    def midi_cc_ch_2_val_44_mode240_listener(self, value):
        self.midi_cc_ch_2_val_44.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_44, "pre_val"):
            self.midi_cc_ch_2_val_44.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_44, "prev_press_time"):
            self.midi_cc_ch_2_val_44.prev_press_time = time.time()
        if (self.device_id_209_active_bank == 0):
            self.pick_brain(self.parameter_12___amp_sustain_id_262)
        self.midi_cc_ch_2_val_44.pre_val = value
        self.midi_cc_ch_2_val_44.prev_press_time = time.time()
    def midi_cc_ch_2_val_45_mode240_listener(self, value):
        self.midi_cc_ch_2_val_45.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_45, "pre_val"):
            self.midi_cc_ch_2_val_45.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_45, "prev_press_time"):
            self.midi_cc_ch_2_val_45.prev_press_time = time.time()
        if (self.device_id_209_active_bank == 0):
            self.pick_brain(self.parameter_13___unison_amount_id_263)
        self.midi_cc_ch_2_val_45.pre_val = value
        self.midi_cc_ch_2_val_45.prev_press_time = time.time()
    def midi_cc_ch_2_val_46_mode240_listener(self, value):
        self.midi_cc_ch_2_val_46.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_46, "pre_val"):
            self.midi_cc_ch_2_val_46.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_46, "prev_press_time"):
            self.midi_cc_ch_2_val_46.prev_press_time = time.time()
        if (self.device_id_209_active_bank == 0):
            self.pick_brain(self.parameter_14___transpose_id_264)
        self.midi_cc_ch_2_val_46.pre_val = value
        self.midi_cc_ch_2_val_46.prev_press_time = time.time()
    def midi_cc_ch_2_val_47_mode240_listener(self, value):
        self.midi_cc_ch_2_val_47.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_47, "pre_val"):
            self.midi_cc_ch_2_val_47.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_47, "prev_press_time"):
            self.midi_cc_ch_2_val_47.prev_press_time = time.time()
        if (self.device_id_209_active_bank == 0):
            self.pick_brain(self.parameter_15___glide_id_265)
        self.midi_cc_ch_2_val_47.pre_val = value
        self.midi_cc_ch_2_val_47.prev_press_time = time.time()
    def midi_cc_ch_2_val_48_mode240_listener(self, value):
        self.midi_cc_ch_2_val_48.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_48, "pre_val"):
            self.midi_cc_ch_2_val_48.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_48, "prev_press_time"):
            self.midi_cc_ch_2_val_48.prev_press_time = time.time()
        if (self.device_id_209_active_bank == 0):
            self.pick_brain(self.parameter_16___volume_id_266)
        self.midi_cc_ch_2_val_48.pre_val = value
        self.midi_cc_ch_2_val_48.prev_press_time = time.time()
    def midi_note_ch_8_val_37_mode1_listener(self, value):
        self.midi_note_ch_8_val_37.cur_val = value
        if not hasattr(self.midi_note_ch_8_val_37, "pre_val"):
            self.midi_note_ch_8_val_37.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_37, "prev_press_time"):
            self.midi_note_ch_8_val_37.prev_press_time = time.time()
        self.pick_brain(self.pad_3___track_mute_id_21)
        self.midi_note_ch_8_val_37.pre_val = value
        self.midi_note_ch_8_val_37.prev_press_time = time.time()
    def midi_note_ch_8_val_38_mode1_listener(self, value):
        self.midi_note_ch_8_val_38.cur_val = value
        if not hasattr(self.midi_note_ch_8_val_38, "pre_val"):
            self.midi_note_ch_8_val_38.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_38, "prev_press_time"):
            self.midi_note_ch_8_val_38.prev_press_time = time.time()
        self.pick_brain(self.pad_4___device_onoff_id_25)
        self.midi_note_ch_8_val_38.pre_val = value
        self.midi_note_ch_8_val_38.prev_press_time = time.time()
    def midi_note_ch_8_val_9_mode1_listener(self, value):
        self.midi_note_ch_8_val_9.cur_val = value
        if not hasattr(self.midi_note_ch_8_val_9, "pre_val"):
            self.midi_note_ch_8_val_9.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_9, "prev_press_time"):
            self.midi_note_ch_8_val_9.prev_press_time = time.time()
        self.pick_brain(self.mode_selector_1_id_40)
        self.midi_note_ch_8_val_9.pre_val = value
        self.midi_note_ch_8_val_9.prev_press_time = time.time()
    def midi_note_ch_8_val_43_mode87_listener(self, value):
        self.midi_note_ch_8_val_43.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.copy_all_to_arrangement()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 8 Session tracks to Start of arrangement' (from 'Pad 8 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_43, "pre_val"):
            self.midi_note_ch_8_val_43.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_43, "prev_press_time"):
            self.midi_note_ch_8_val_43.prev_press_time = time.time()
        self.midi_note_ch_8_val_43.pre_val = value
        self.midi_note_ch_8_val_43.prev_press_time = time.time()
    def midi_cc_ch_2_val_21_mode1_listener(self, value):
        self.midi_cc_ch_2_val_21.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_21, "pre_val"):
            self.midi_cc_ch_2_val_21.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_21, "prev_press_time"):
            self.midi_cc_ch_2_val_21.prev_press_time = time.time()
        if (self.device_id_3_active_bank == 0):
            self.pick_brain(self.parameter_1_id_60)
        self.midi_cc_ch_2_val_21.pre_val = value
        self.midi_cc_ch_2_val_21.prev_press_time = time.time()
    def midi_cc_ch_2_val_22_mode1_listener(self, value):
        self.midi_cc_ch_2_val_22.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_22, "pre_val"):
            self.midi_cc_ch_2_val_22.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_22, "prev_press_time"):
            self.midi_cc_ch_2_val_22.prev_press_time = time.time()
        if (self.device_id_3_active_bank == 0):
            self.pick_brain(self.parameter_2_id_61)
        self.midi_cc_ch_2_val_22.pre_val = value
        self.midi_cc_ch_2_val_22.prev_press_time = time.time()
    def midi_cc_ch_2_val_23_mode1_listener(self, value):
        self.midi_cc_ch_2_val_23.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_23, "pre_val"):
            self.midi_cc_ch_2_val_23.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_23, "prev_press_time"):
            self.midi_cc_ch_2_val_23.prev_press_time = time.time()
        if (self.device_id_3_active_bank == 0):
            self.pick_brain(self.parameter_3_id_62)
        self.midi_cc_ch_2_val_23.pre_val = value
        self.midi_cc_ch_2_val_23.prev_press_time = time.time()
    def midi_cc_ch_2_val_24_mode1_listener(self, value):
        self.midi_cc_ch_2_val_24.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_24, "pre_val"):
            self.midi_cc_ch_2_val_24.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_24, "prev_press_time"):
            self.midi_cc_ch_2_val_24.prev_press_time = time.time()
        if (self.device_id_3_active_bank == 0):
            self.pick_brain(self.parameter_4_id_63)
        self.midi_cc_ch_2_val_24.pre_val = value
        self.midi_cc_ch_2_val_24.prev_press_time = time.time()
    def midi_cc_ch_2_val_25_mode1_listener(self, value):
        self.midi_cc_ch_2_val_25.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_25, "pre_val"):
            self.midi_cc_ch_2_val_25.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_25, "prev_press_time"):
            self.midi_cc_ch_2_val_25.prev_press_time = time.time()
        if (self.device_id_3_active_bank == 0):
            self.pick_brain(self.parameter_5_id_64)
        self.midi_cc_ch_2_val_25.pre_val = value
        self.midi_cc_ch_2_val_25.prev_press_time = time.time()
    def midi_cc_ch_2_val_26_mode1_listener(self, value):
        self.midi_cc_ch_2_val_26.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_26, "pre_val"):
            self.midi_cc_ch_2_val_26.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_26, "prev_press_time"):
            self.midi_cc_ch_2_val_26.prev_press_time = time.time()
        if (self.device_id_3_active_bank == 0):
            self.pick_brain(self.parameter_6_id_65)
        self.midi_cc_ch_2_val_26.pre_val = value
        self.midi_cc_ch_2_val_26.prev_press_time = time.time()
    def midi_cc_ch_2_val_27_mode1_listener(self, value):
        self.midi_cc_ch_2_val_27.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_27, "pre_val"):
            self.midi_cc_ch_2_val_27.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_27, "prev_press_time"):
            self.midi_cc_ch_2_val_27.prev_press_time = time.time()
        if (self.device_id_3_active_bank == 0):
            self.pick_brain(self.parameter_7_id_66)
        self.midi_cc_ch_2_val_27.pre_val = value
        self.midi_cc_ch_2_val_27.prev_press_time = time.time()
    def midi_cc_ch_2_val_28_mode1_listener(self, value):
        self.midi_cc_ch_2_val_28.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_28, "pre_val"):
            self.midi_cc_ch_2_val_28.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_28, "prev_press_time"):
            self.midi_cc_ch_2_val_28.prev_press_time = time.time()
        if (self.device_id_3_active_bank == 0):
            self.pick_brain(self.parameter_8_id_67)
        self.midi_cc_ch_2_val_28.pre_val = value
        self.midi_cc_ch_2_val_28.prev_press_time = time.time()
    def midi_cc_ch_2_val_21_mode87_listener(self, value):
        self.midi_cc_ch_2_val_21.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_21, "pre_val"):
            self.midi_cc_ch_2_val_21.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_21, "prev_press_time"):
            self.midi_cc_ch_2_val_21.prev_press_time = time.time()
        if (self.device_id_71_active_bank == 0):
            self.pick_brain(self.parameter_1_id_73)
        self.pick_brain(self.send_1_id_188)
        self.pick_brain(self.send_2_id_189)
        self.pick_brain(self.send_3_id_190)
        self.pick_brain(self.send_4_id_191)
        self.pick_brain(self.send_5_id_192)
        self.pick_brain(self.send_6_id_193)
        self.midi_cc_ch_2_val_21.pre_val = value
        self.midi_cc_ch_2_val_21.prev_press_time = time.time()
    def midi_cc_ch_2_val_22_mode87_listener(self, value):
        self.midi_cc_ch_2_val_22.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_22, "pre_val"):
            self.midi_cc_ch_2_val_22.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_22, "prev_press_time"):
            self.midi_cc_ch_2_val_22.prev_press_time = time.time()
        if (self.device_id_71_active_bank == 0):
            self.pick_brain(self.parameter_2_id_74)
        self.midi_cc_ch_2_val_22.pre_val = value
        self.midi_cc_ch_2_val_22.prev_press_time = time.time()
    def midi_cc_ch_2_val_23_mode87_listener(self, value):
        self.midi_cc_ch_2_val_23.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_23, "pre_val"):
            self.midi_cc_ch_2_val_23.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_23, "prev_press_time"):
            self.midi_cc_ch_2_val_23.prev_press_time = time.time()
        if (self.device_id_71_active_bank == 0):
            self.pick_brain(self.parameter_3_id_75)
        self.midi_cc_ch_2_val_23.pre_val = value
        self.midi_cc_ch_2_val_23.prev_press_time = time.time()
    def midi_cc_ch_2_val_24_mode87_listener(self, value):
        self.midi_cc_ch_2_val_24.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_24, "pre_val"):
            self.midi_cc_ch_2_val_24.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_24, "prev_press_time"):
            self.midi_cc_ch_2_val_24.prev_press_time = time.time()
        if (self.device_id_71_active_bank == 0):
            self.pick_brain(self.parameter_4_id_76)
        self.midi_cc_ch_2_val_24.pre_val = value
        self.midi_cc_ch_2_val_24.prev_press_time = time.time()
    def midi_cc_ch_2_val_29_mode87_listener(self, value):
        self.midi_cc_ch_2_val_29.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_29, "pre_val"):
            self.midi_cc_ch_2_val_29.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_29, "prev_press_time"):
            self.midi_cc_ch_2_val_29.prev_press_time = time.time()
        if (self.device_id_71_active_bank == 0):
            self.pick_brain(self.parameter_5_id_77)
        self.midi_cc_ch_2_val_29.pre_val = value
        self.midi_cc_ch_2_val_29.prev_press_time = time.time()
    def midi_cc_ch_2_val_42_mode87_listener(self, value):
        self.midi_cc_ch_2_val_42.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_42, "pre_val"):
            self.midi_cc_ch_2_val_42.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_42, "prev_press_time"):
            self.midi_cc_ch_2_val_42.prev_press_time = time.time()
        if (self.device_id_71_active_bank == 0):
            self.pick_brain(self.parameter_6_id_78)
        self.midi_cc_ch_2_val_42.pre_val = value
        self.midi_cc_ch_2_val_42.prev_press_time = time.time()
    def midi_cc_ch_2_val_43_mode87_listener(self, value):
        self.midi_cc_ch_2_val_43.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_43, "pre_val"):
            self.midi_cc_ch_2_val_43.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_43, "prev_press_time"):
            self.midi_cc_ch_2_val_43.prev_press_time = time.time()
        if (self.device_id_71_active_bank == 0):
            self.pick_brain(self.parameter_7_id_79)
        self.midi_cc_ch_2_val_43.pre_val = value
        self.midi_cc_ch_2_val_43.prev_press_time = time.time()
    def midi_cc_ch_2_val_44_mode87_listener(self, value):
        self.midi_cc_ch_2_val_44.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_44, "pre_val"):
            self.midi_cc_ch_2_val_44.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_44, "prev_press_time"):
            self.midi_cc_ch_2_val_44.prev_press_time = time.time()
        if (self.device_id_71_active_bank == 0):
            self.pick_brain(self.parameter_8_id_80)
        self.midi_cc_ch_2_val_44.pre_val = value
        self.midi_cc_ch_2_val_44.prev_press_time = time.time()
    def midi_note_ch_8_val_60_mode87_listener(self, value):
        self.midi_note_ch_8_val_60.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            if self.midi_note_ch_8_val_60.cur_val == 127:
                self.user.midi_rand()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 6 - New Clip - Random Midi Sequence' (from 'Pad 6 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_60, "pre_val"):
            self.midi_note_ch_8_val_60.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_60, "prev_press_time"):
            self.midi_note_ch_8_val_60.prev_press_time = time.time()
        self.midi_note_ch_8_val_60.pre_val = value
        self.midi_note_ch_8_val_60.prev_press_time = time.time()
    def midi_note_ch_8_val_60_mode1_listener(self, value):
        self.midi_note_ch_8_val_60.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.song().scrub_by(-2.0)
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 6 Scrub Backwards' (from 'Pad 6 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_60, "pre_val"):
            self.midi_note_ch_8_val_60.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_60, "prev_press_time"):
            self.midi_note_ch_8_val_60.prev_press_time = time.time()
        self.midi_note_ch_8_val_60.pre_val = value
        self.midi_note_ch_8_val_60.prev_press_time = time.time()
    def midi_cc_ch_2_val_114_mode1_listener(self, value):
        self.midi_cc_ch_2_val_114.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_114, "pre_val"):
            self.midi_cc_ch_2_val_114.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_114, "prev_press_time"):
            self.midi_cc_ch_2_val_114.prev_press_time = time.time()
        self.pick_brain(self.track_nav_left_id_83)
        self.midi_cc_ch_2_val_114.pre_val = value
        self.midi_cc_ch_2_val_114.prev_press_time = time.time()
    def midi_note_ch_8_val_9_mode87_listener(self, value):
        self.midi_note_ch_8_val_9.cur_val = value
        if not hasattr(self.midi_note_ch_8_val_9, "pre_val"):
            self.midi_note_ch_8_val_9.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_9, "prev_press_time"):
            self.midi_note_ch_8_val_9.prev_press_time = time.time()
        self.pick_brain(self.mode_selector_shift_id_88)
        self.midi_note_ch_8_val_9.pre_val = value
        self.midi_note_ch_8_val_9.prev_press_time = time.time()
    def midi_note_ch_8_val_12_mode87_listener(self, value):
        self.midi_note_ch_8_val_12.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            if self.midi_note_ch_8_val_9.cur_val == 127:
                self.user.record_midi_overdub()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 2 - Record Midi' (from 'Pad 2 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_12, "pre_val"):
            self.midi_note_ch_8_val_12.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_12, "prev_press_time"):
            self.midi_note_ch_8_val_12.prev_press_time = time.time()
        self.midi_note_ch_8_val_12.pre_val = value
        self.midi_note_ch_8_val_12.prev_press_time = time.time()
    def midi_note_ch_8_val_37_mode87_listener(self, value):
        self.midi_note_ch_8_val_37.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            if self.midi_note_ch_8_val_37.cur_val == 127:
                self.user.nudge_notes()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 3 - Nudge Notes' (from 'Pad 3 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_37, "pre_val"):
            self.midi_note_ch_8_val_37.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_37, "prev_press_time"):
            self.midi_note_ch_8_val_37.prev_press_time = time.time()
        self.midi_note_ch_8_val_37.pre_val = value
        self.midi_note_ch_8_val_37.prev_press_time = time.time()
    def midi_note_ch_8_val_38_mode87_listener(self, value):
        self.midi_note_ch_8_val_38.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.log("pressed pad 4")
            self.user.nudge_velocities()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 4 - Nudge Velocity' (from 'Pad 4 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_38, "pre_val"):
            self.midi_note_ch_8_val_38.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_38, "prev_press_time"):
            self.midi_note_ch_8_val_38.prev_press_time = time.time()
        self.midi_note_ch_8_val_38.pre_val = value
        self.midi_note_ch_8_val_38.prev_press_time = time.time()
    def midi_note_ch_8_val_36_mode87_listener(self, value):
        self.midi_note_ch_8_val_36.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.iterate_perc_pattern()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 5 - Iterate Perc Pattern' (from 'Pad 5 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_36, "pre_val"):
            self.midi_note_ch_8_val_36.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_36, "prev_press_time"):
            self.midi_note_ch_8_val_36.prev_press_time = time.time()
        self.midi_note_ch_8_val_36.pre_val = value
        self.midi_note_ch_8_val_36.prev_press_time = time.time()
    def midi_note_ch_8_val_43_mode1_listener(self, value):
        self.midi_note_ch_8_val_43.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.toggle_first_last_device()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 8 Go To Last Device' (from 'Pad 8 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_43, "pre_val"):
            self.midi_note_ch_8_val_43.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_43, "prev_press_time"):
            self.midi_note_ch_8_val_43.prev_press_time = time.time()
        self.midi_note_ch_8_val_43.pre_val = value
        self.midi_note_ch_8_val_43.prev_press_time = time.time()
    def midi_note_ch_8_val_41_mode1_listener(self, value):
        self.midi_note_ch_8_val_41.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.log_message("event for pad 7")
            self.user.update_track_names()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 7 Update Track Names' (from 'Pad 7 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_41, "pre_val"):
            self.midi_note_ch_8_val_41.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_41, "prev_press_time"):
            self.midi_note_ch_8_val_41.prev_press_time = time.time()
        self.midi_note_ch_8_val_41.pre_val = value
        self.midi_note_ch_8_val_41.prev_press_time = time.time()
    def midi_note_ch_8_val_36_mode1_listener(self, value):
        self.midi_note_ch_8_val_36.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.iterate_basic_midi_clip()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 5 - Iterate New Basic Midi Clip from List' (from 'Pad 5 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_36, "pre_val"):
            self.midi_note_ch_8_val_36.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_36, "prev_press_time"):
            self.midi_note_ch_8_val_36.prev_press_time = time.time()
        self.midi_note_ch_8_val_36.pre_val = value
        self.midi_note_ch_8_val_36.prev_press_time = time.time()
    def midi_cc_ch_2_val_29_mode1_listener(self, value):
        self.midi_cc_ch_2_val_29.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_29, "pre_val"):
            self.midi_cc_ch_2_val_29.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_29, "prev_press_time"):
            self.midi_cc_ch_2_val_29.prev_press_time = time.time()
        if (self.device_id_3_active_bank == 0):
            self.pick_brain(self.parameter_9_id_100)
        self.midi_cc_ch_2_val_29.pre_val = value
        self.midi_cc_ch_2_val_29.prev_press_time = time.time()
    def midi_cc_ch_2_val_42_mode1_listener(self, value):
        self.midi_cc_ch_2_val_42.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_42, "pre_val"):
            self.midi_cc_ch_2_val_42.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_42, "prev_press_time"):
            self.midi_cc_ch_2_val_42.prev_press_time = time.time()
        if (self.device_id_3_active_bank == 0):
            self.pick_brain(self.parameter_10_id_101)
        self.midi_cc_ch_2_val_42.pre_val = value
        self.midi_cc_ch_2_val_42.prev_press_time = time.time()
    def midi_cc_ch_2_val_43_mode1_listener(self, value):
        self.midi_cc_ch_2_val_43.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_43, "pre_val"):
            self.midi_cc_ch_2_val_43.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_43, "prev_press_time"):
            self.midi_cc_ch_2_val_43.prev_press_time = time.time()
        if (self.device_id_3_active_bank == 0):
            self.pick_brain(self.parameter_11_id_102)
        self.midi_cc_ch_2_val_43.pre_val = value
        self.midi_cc_ch_2_val_43.prev_press_time = time.time()
    def midi_cc_ch_2_val_44_mode1_listener(self, value):
        self.midi_cc_ch_2_val_44.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_44, "pre_val"):
            self.midi_cc_ch_2_val_44.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_44, "prev_press_time"):
            self.midi_cc_ch_2_val_44.prev_press_time = time.time()
        if (self.device_id_3_active_bank == 0):
            self.pick_brain(self.parameter_12_id_103)
        self.midi_cc_ch_2_val_44.pre_val = value
        self.midi_cc_ch_2_val_44.prev_press_time = time.time()
    def midi_cc_ch_2_val_45_mode1_listener(self, value):
        self.midi_cc_ch_2_val_45.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_45, "pre_val"):
            self.midi_cc_ch_2_val_45.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_45, "prev_press_time"):
            self.midi_cc_ch_2_val_45.prev_press_time = time.time()
        if (self.device_id_3_active_bank == 0):
            self.pick_brain(self.parameter_13_id_104)
        self.midi_cc_ch_2_val_45.pre_val = value
        self.midi_cc_ch_2_val_45.prev_press_time = time.time()
    def midi_cc_ch_2_val_46_mode1_listener(self, value):
        self.midi_cc_ch_2_val_46.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_46, "pre_val"):
            self.midi_cc_ch_2_val_46.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_46, "prev_press_time"):
            self.midi_cc_ch_2_val_46.prev_press_time = time.time()
        if (self.device_id_3_active_bank == 0):
            self.pick_brain(self.parameter_14_id_105)
        self.midi_cc_ch_2_val_46.pre_val = value
        self.midi_cc_ch_2_val_46.prev_press_time = time.time()
    def midi_cc_ch_2_val_47_mode1_listener(self, value):
        self.midi_cc_ch_2_val_47.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_47, "pre_val"):
            self.midi_cc_ch_2_val_47.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_47, "prev_press_time"):
            self.midi_cc_ch_2_val_47.prev_press_time = time.time()
        if (self.device_id_3_active_bank == 0):
            self.pick_brain(self.parameter_15_id_106)
        self.midi_cc_ch_2_val_47.pre_val = value
        self.midi_cc_ch_2_val_47.prev_press_time = time.time()
    def midi_cc_ch_2_val_48_mode1_listener(self, value):
        self.midi_cc_ch_2_val_48.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_48, "pre_val"):
            self.midi_cc_ch_2_val_48.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_48, "prev_press_time"):
            self.midi_cc_ch_2_val_48.prev_press_time = time.time()
        if (self.device_id_3_active_bank == 0):
            self.pick_brain(self.parameter_16_id_107)
        self.midi_cc_ch_2_val_48.pre_val = value
        self.midi_cc_ch_2_val_48.prev_press_time = time.time()
    def midi_cc_ch_2_val_28_mode87_listener(self, value):
        self.midi_cc_ch_2_val_28.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_28, "pre_val"):
            self.midi_cc_ch_2_val_28.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_28, "prev_press_time"):
            self.midi_cc_ch_2_val_28.prev_press_time = time.time()
        self.pick_brain(self.volume_1_id_108)
        self.midi_cc_ch_2_val_28.pre_val = value
        self.midi_cc_ch_2_val_28.prev_press_time = time.time()
    def midi_cc_ch_2_val_48_mode87_listener(self, value):
        self.midi_cc_ch_2_val_48.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_48, "pre_val"):
            self.midi_cc_ch_2_val_48.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_48, "prev_press_time"):
            self.midi_cc_ch_2_val_48.prev_press_time = time.time()
        self.pick_brain(self.pan_1_id_109)
        self.midi_cc_ch_2_val_48.pre_val = value
        self.midi_cc_ch_2_val_48.prev_press_time = time.time()
    def midi_cc_ch_2_val_117_mode1_listener(self, value):
        self.midi_cc_ch_2_val_117.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.device_nav_right_ignoring_inner_devices()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Button 2 Device Nav Right Special' (from 'Button 2 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_cc_ch_2_val_117, "pre_val"):
            self.midi_cc_ch_2_val_117.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_117, "prev_press_time"):
            self.midi_cc_ch_2_val_117.prev_press_time = time.time()
        self.midi_cc_ch_2_val_117.pre_val = value
        self.midi_cc_ch_2_val_117.prev_press_time = time.time()
    def midi_note_ch_8_val_41_mode87_listener(self, value):
        self.midi_note_ch_8_val_41.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.press_rack_random_button()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 7 - Press Device Random Button' (from 'Pad 7 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_41, "pre_val"):
            self.midi_note_ch_8_val_41.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_41, "prev_press_time"):
            self.midi_note_ch_8_val_41.prev_press_time = time.time()
        self.midi_note_ch_8_val_41.pre_val = value
        self.midi_note_ch_8_val_41.prev_press_time = time.time()
    def midi_cc_ch_2_val_116_mode87_listener(self, value):
        self.midi_cc_ch_2_val_116.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.shrink_loop()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Left Button - Shrink Loop' (from 'Button 1 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_cc_ch_2_val_116, "pre_val"):
            self.midi_cc_ch_2_val_116.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_116, "prev_press_time"):
            self.midi_cc_ch_2_val_116.prev_press_time = time.time()
        self.midi_cc_ch_2_val_116.pre_val = value
        self.midi_cc_ch_2_val_116.prev_press_time = time.time()
    def midi_cc_ch_2_val_45_mode87_listener(self, value):
        self.midi_cc_ch_2_val_45.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.log_message(str("knob 5 first action, lenght is:" + str(self.song().song_length)))
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Knob 13 - Scrub Song Time copy' (from 'Knob 13 was turned' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.song().current_song_time = self.get_value_from_ranges(False, 200, False, self.midi_cc_ch_2_val_45.cur_val, 0, 127, 2, 0, 800, 2, False)
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 2' in reaction 'Knob 13 - Scrub Song Time copy' (from 'Knob 13 was turned' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_cc_ch_2_val_45, "pre_val"):
            self.midi_cc_ch_2_val_45.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_45, "prev_press_time"):
            self.midi_cc_ch_2_val_45.prev_press_time = time.time()
        self.pick_brain(self.send_4_id_236)
        self.midi_cc_ch_2_val_45.pre_val = value
        self.midi_cc_ch_2_val_45.prev_press_time = time.time()
    def midi_cc_ch_2_val_116_mode1_listener(self, value):
        self.midi_cc_ch_2_val_116.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.device_nav_left_ignoring_inner_devices()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Button 1 Device Nav Left Special' (from 'Button 1 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_cc_ch_2_val_116, "pre_val"):
            self.midi_cc_ch_2_val_116.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_116, "prev_press_time"):
            self.midi_cc_ch_2_val_116.prev_press_time = time.time()
        self.midi_cc_ch_2_val_116.pre_val = value
        self.midi_cc_ch_2_val_116.prev_press_time = time.time()
    def midi_cc_ch_2_val_117_mode87_listener(self, value):
        self.midi_cc_ch_2_val_117.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.extend_loop()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Right Button - Extend Loop' (from 'Button 2 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_cc_ch_2_val_117, "pre_val"):
            self.midi_cc_ch_2_val_117.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_117, "prev_press_time"):
            self.midi_cc_ch_2_val_117.prev_press_time = time.time()
        self.midi_cc_ch_2_val_117.pre_val = value
        self.midi_cc_ch_2_val_117.prev_press_time = time.time()
    def midi_cc_ch_2_val_114_mode87_listener(self, value):
        self.midi_cc_ch_2_val_114.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.backwards_start_loop()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Up Button - Loop Start Left' (from 'Pad 9 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_cc_ch_2_val_114, "pre_val"):
            self.midi_cc_ch_2_val_114.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_114, "prev_press_time"):
            self.midi_cc_ch_2_val_114.prev_press_time = time.time()
        self.midi_cc_ch_2_val_114.pre_val = value
        self.midi_cc_ch_2_val_114.prev_press_time = time.time()
    def midi_cc_ch_2_val_115_mode87_listener(self, value):
        self.midi_cc_ch_2_val_115.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.forward_start_loop()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Down Button - Loop Start Right' (from 'Pad 10 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_cc_ch_2_val_115, "pre_val"):
            self.midi_cc_ch_2_val_115.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_115, "prev_press_time"):
            self.midi_cc_ch_2_val_115.prev_press_time = time.time()
        self.midi_cc_ch_2_val_115.pre_val = value
        self.midi_cc_ch_2_val_115.prev_press_time = time.time()
    def midi_cc_ch_2_val_115_mode1_listener(self, value):
        self.midi_cc_ch_2_val_115.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_115, "pre_val"):
            self.midi_cc_ch_2_val_115.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_115, "prev_press_time"):
            self.midi_cc_ch_2_val_115.prev_press_time = time.time()
        self.pick_brain(self.track_nav_right_id_134)
        self.midi_cc_ch_2_val_115.pre_val = value
        self.midi_cc_ch_2_val_115.prev_press_time = time.time()
    def midi_note_ch_8_val_12_mode1_listener(self, value):
        self.midi_note_ch_8_val_12.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            if self.midi_note_ch_8_val_12.cur_val == 127:
                self.user.bounce_in_place()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 2 - Bounce in Place' (from 'Pad 2 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_12, "pre_val"):
            self.midi_note_ch_8_val_12.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_12, "prev_press_time"):
            self.midi_note_ch_8_val_12.prev_press_time = time.time()
        self.midi_note_ch_8_val_12.pre_val = value
        self.midi_note_ch_8_val_12.prev_press_time = time.time()
    def midi_cc_ch_2_val_25_mode87_listener(self, value):
        self.midi_cc_ch_2_val_25.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_25, "pre_val"):
            self.midi_cc_ch_2_val_25.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_25, "prev_press_time"):
            self.midi_cc_ch_2_val_25.prev_press_time = time.time()
        self.pick_brain(self.send_1_id_233)
        self.midi_cc_ch_2_val_25.pre_val = value
        self.midi_cc_ch_2_val_25.prev_press_time = time.time()
    def midi_cc_ch_2_val_26_mode87_listener(self, value):
        self.midi_cc_ch_2_val_26.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_26, "pre_val"):
            self.midi_cc_ch_2_val_26.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_26, "prev_press_time"):
            self.midi_cc_ch_2_val_26.prev_press_time = time.time()
        self.pick_brain(self.send_2_id_234)
        self.midi_cc_ch_2_val_26.pre_val = value
        self.midi_cc_ch_2_val_26.prev_press_time = time.time()
    def midi_cc_ch_2_val_27_mode87_listener(self, value):
        self.midi_cc_ch_2_val_27.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_27, "pre_val"):
            self.midi_cc_ch_2_val_27.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_27, "prev_press_time"):
            self.midi_cc_ch_2_val_27.prev_press_time = time.time()
        self.pick_brain(self.send_3_id_235)
        self.midi_cc_ch_2_val_27.pre_val = value
        self.midi_cc_ch_2_val_27.prev_press_time = time.time()
    def midi_cc_ch_2_val_46_mode87_listener(self, value):
        self.midi_cc_ch_2_val_46.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_46, "pre_val"):
            self.midi_cc_ch_2_val_46.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_46, "prev_press_time"):
            self.midi_cc_ch_2_val_46.prev_press_time = time.time()
        self.pick_brain(self.send_5_id_237)
        self.midi_cc_ch_2_val_46.pre_val = value
        self.midi_cc_ch_2_val_46.prev_press_time = time.time()
    def midi_cc_ch_2_val_47_mode87_listener(self, value):
        self.midi_cc_ch_2_val_47.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_47, "pre_val"):
            self.midi_cc_ch_2_val_47.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_47, "prev_press_time"):
            self.midi_cc_ch_2_val_47.prev_press_time = time.time()
        self.pick_brain(self.send_6_id_238)
        self.midi_cc_ch_2_val_47.pre_val = value
        self.midi_cc_ch_2_val_47.prev_press_time = time.time()
    def midi_cc_ch_2_val_114_mode240_listener(self, value):
        self.midi_cc_ch_2_val_114.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_114, "pre_val"):
            self.midi_cc_ch_2_val_114.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_114, "prev_press_time"):
            self.midi_cc_ch_2_val_114.prev_press_time = time.time()
        self.pick_brain(self.track_nav_left_copy_id_242)
        self.midi_cc_ch_2_val_114.pre_val = value
        self.midi_cc_ch_2_val_114.prev_press_time = time.time()
    def midi_cc_ch_2_val_115_mode240_listener(self, value):
        self.midi_cc_ch_2_val_115.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_115, "pre_val"):
            self.midi_cc_ch_2_val_115.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_115, "prev_press_time"):
            self.midi_cc_ch_2_val_115.prev_press_time = time.time()
        self.pick_brain(self.track_nav_right_copy_id_243)
        self.midi_cc_ch_2_val_115.pre_val = value
        self.midi_cc_ch_2_val_115.prev_press_time = time.time()
    def midi_note_ch_8_val_43_mode240_listener(self, value):
        self.midi_note_ch_8_val_43.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.toggle_first_last_device()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 8 Go To Last Device copy' (from 'Pad 8 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_43, "pre_val"):
            self.midi_note_ch_8_val_43.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_43, "prev_press_time"):
            self.midi_note_ch_8_val_43.prev_press_time = time.time()
        self.midi_note_ch_8_val_43.pre_val = value
        self.midi_note_ch_8_val_43.prev_press_time = time.time()
    def midi_cc_ch_2_val_116_mode240_listener(self, value):
        self.midi_cc_ch_2_val_116.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.device_nav_left_ignoring_inner_devices()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Button 1 Device Nav Left Special' (from 'Button 1 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_cc_ch_2_val_116, "pre_val"):
            self.midi_cc_ch_2_val_116.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_116, "prev_press_time"):
            self.midi_cc_ch_2_val_116.prev_press_time = time.time()
        self.midi_cc_ch_2_val_116.pre_val = value
        self.midi_cc_ch_2_val_116.prev_press_time = time.time()
    def midi_cc_ch_2_val_117_mode240_listener(self, value):
        self.midi_cc_ch_2_val_117.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.device_nav_right_ignoring_inner_devices()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Button 2 Device Nav Right Special' (from 'Button 2 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_cc_ch_2_val_117, "pre_val"):
            self.midi_cc_ch_2_val_117.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_117, "prev_press_time"):
            self.midi_cc_ch_2_val_117.prev_press_time = time.time()
        self.midi_cc_ch_2_val_117.pre_val = value
        self.midi_cc_ch_2_val_117.prev_press_time = time.time()
    def midi_note_ch_8_val_9_mode240_listener(self, value):
        self.midi_note_ch_8_val_9.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.log_message("FIRED - On device change - move to mode 1")
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'On Shift Press - move to mode 1' (from 'Pad 1 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.set_active_mode(self.modes[0])
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 2' in reaction 'On Shift Press - move to mode 1' (from 'Pad 1 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_9, "pre_val"):
            self.midi_note_ch_8_val_9.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_9, "prev_press_time"):
            self.midi_note_ch_8_val_9.prev_press_time = time.time()
        self.midi_note_ch_8_val_9.pre_val = value
        self.midi_note_ch_8_val_9.prev_press_time = time.time()
    def midi_note_ch_8_val_12_mode240_listener(self, value):
        self.midi_note_ch_8_val_12.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            if self.midi_note_ch_8_val_12.cur_val == 127:
                pass
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 2' (from 'Pad 2 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_12, "pre_val"):
            self.midi_note_ch_8_val_12.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_12, "prev_press_time"):
            self.midi_note_ch_8_val_12.prev_press_time = time.time()
        self.midi_note_ch_8_val_12.pre_val = value
        self.midi_note_ch_8_val_12.prev_press_time = time.time()
    def midi_note_ch_8_val_37_mode240_listener(self, value):
        self.midi_note_ch_8_val_37.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            if self.midi_note_ch_8_val_37.cur_val == 127:
                pass
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 3' (from 'Pad 3 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_37, "pre_val"):
            self.midi_note_ch_8_val_37.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_37, "prev_press_time"):
            self.midi_note_ch_8_val_37.prev_press_time = time.time()
        self.midi_note_ch_8_val_37.pre_val = value
        self.midi_note_ch_8_val_37.prev_press_time = time.time()
    def midi_cc_ch_2_val_21_mode268_listener(self, value):
        self.midi_cc_ch_2_val_21.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_21, "pre_val"):
            self.midi_cc_ch_2_val_21.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_21, "prev_press_time"):
            self.midi_cc_ch_2_val_21.prev_press_time = time.time()
        if (self.device_id_271_active_bank == 0):
            self.pick_brain(self.parameter_1___osc_1_transp_id_273)
        self.midi_cc_ch_2_val_21.pre_val = value
        self.midi_cc_ch_2_val_21.prev_press_time = time.time()
    def midi_cc_ch_2_val_22_mode268_listener(self, value):
        self.midi_cc_ch_2_val_22.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_22, "pre_val"):
            self.midi_cc_ch_2_val_22.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_22, "prev_press_time"):
            self.midi_cc_ch_2_val_22.prev_press_time = time.time()
        if (self.device_id_271_active_bank == 0):
            self.pick_brain(self.parameter_2___osc_1_detune_id_274)
        self.midi_cc_ch_2_val_22.pre_val = value
        self.midi_cc_ch_2_val_22.prev_press_time = time.time()
    def midi_cc_ch_2_val_23_mode268_listener(self, value):
        self.midi_cc_ch_2_val_23.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_23, "pre_val"):
            self.midi_cc_ch_2_val_23.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_23, "prev_press_time"):
            self.midi_cc_ch_2_val_23.prev_press_time = time.time()
        if (self.device_id_271_active_bank == 0):
            self.pick_brain(self.parameter_3___osc_1_pos_id_275)
        self.midi_cc_ch_2_val_23.pre_val = value
        self.midi_cc_ch_2_val_23.prev_press_time = time.time()
    def midi_cc_ch_2_val_24_mode268_listener(self, value):
        self.midi_cc_ch_2_val_24.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_24, "pre_val"):
            self.midi_cc_ch_2_val_24.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_24, "prev_press_time"):
            self.midi_cc_ch_2_val_24.prev_press_time = time.time()
        if (self.device_id_271_active_bank == 0):
            self.pick_brain(self.parameter_4___osc_1_effect_1_id_276)
        self.midi_cc_ch_2_val_24.pre_val = value
        self.midi_cc_ch_2_val_24.prev_press_time = time.time()
    def midi_cc_ch_2_val_25_mode268_listener(self, value):
        self.midi_cc_ch_2_val_25.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_25, "pre_val"):
            self.midi_cc_ch_2_val_25.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_25, "prev_press_time"):
            self.midi_cc_ch_2_val_25.prev_press_time = time.time()
        if (self.device_id_271_active_bank == 0):
            self.pick_brain(self.parameter_5___amp_attack_id_277)
        self.midi_cc_ch_2_val_25.pre_val = value
        self.midi_cc_ch_2_val_25.prev_press_time = time.time()
    def midi_cc_ch_2_val_26_mode268_listener(self, value):
        self.midi_cc_ch_2_val_26.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_26, "pre_val"):
            self.midi_cc_ch_2_val_26.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_26, "prev_press_time"):
            self.midi_cc_ch_2_val_26.prev_press_time = time.time()
        if (self.device_id_271_active_bank == 0):
            self.pick_brain(self.parameter_6___amp_decay_id_278)
        self.midi_cc_ch_2_val_26.pre_val = value
        self.midi_cc_ch_2_val_26.prev_press_time = time.time()
    def midi_cc_ch_2_val_27_mode268_listener(self, value):
        self.midi_cc_ch_2_val_27.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_27, "pre_val"):
            self.midi_cc_ch_2_val_27.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_27, "prev_press_time"):
            self.midi_cc_ch_2_val_27.prev_press_time = time.time()
        if (self.device_id_271_active_bank == 0):
            self.pick_brain(self.parameter_7___amp_sustain_id_279)
        self.midi_cc_ch_2_val_27.pre_val = value
        self.midi_cc_ch_2_val_27.prev_press_time = time.time()
    def midi_cc_ch_2_val_28_mode268_listener(self, value):
        self.midi_cc_ch_2_val_28.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_28, "pre_val"):
            self.midi_cc_ch_2_val_28.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_28, "prev_press_time"):
            self.midi_cc_ch_2_val_28.prev_press_time = time.time()
        if (self.device_id_271_active_bank == 0):
            self.pick_brain(self.parameter_8___amp_release_id_280)
        self.midi_cc_ch_2_val_28.pre_val = value
        self.midi_cc_ch_2_val_28.prev_press_time = time.time()
    def midi_cc_ch_2_val_29_mode268_listener(self, value):
        self.midi_cc_ch_2_val_29.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_29, "pre_val"):
            self.midi_cc_ch_2_val_29.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_29, "prev_press_time"):
            self.midi_cc_ch_2_val_29.prev_press_time = time.time()
        if (self.device_id_271_active_bank == 0):
            self.pick_brain(self.parameter_9___filter_1_freq_id_281)
        self.midi_cc_ch_2_val_29.pre_val = value
        self.midi_cc_ch_2_val_29.prev_press_time = time.time()
    def midi_cc_ch_2_val_42_mode268_listener(self, value):
        self.midi_cc_ch_2_val_42.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_42, "pre_val"):
            self.midi_cc_ch_2_val_42.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_42, "prev_press_time"):
            self.midi_cc_ch_2_val_42.prev_press_time = time.time()
        if (self.device_id_271_active_bank == 0):
            self.pick_brain(self.parameter_10___filter_1_res_id_282)
        self.midi_cc_ch_2_val_42.pre_val = value
        self.midi_cc_ch_2_val_42.prev_press_time = time.time()
    def midi_cc_ch_2_val_43_mode268_listener(self, value):
        self.midi_cc_ch_2_val_43.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_43, "pre_val"):
            self.midi_cc_ch_2_val_43.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_43, "prev_press_time"):
            self.midi_cc_ch_2_val_43.prev_press_time = time.time()
        if (self.device_id_271_active_bank == 0):
            self.pick_brain(self.parameter_11___filter_1_drive_id_283)
        self.midi_cc_ch_2_val_43.pre_val = value
        self.midi_cc_ch_2_val_43.prev_press_time = time.time()
    def midi_cc_ch_2_val_44_mode268_listener(self, value):
        self.midi_cc_ch_2_val_44.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_44, "pre_val"):
            self.midi_cc_ch_2_val_44.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_44, "prev_press_time"):
            self.midi_cc_ch_2_val_44.prev_press_time = time.time()
        if (self.device_id_271_active_bank == 0):
            self.pick_brain(self.parameter_12___filter_2_freq_id_284)
        self.midi_cc_ch_2_val_44.pre_val = value
        self.midi_cc_ch_2_val_44.prev_press_time = time.time()
    def midi_cc_ch_2_val_45_mode268_listener(self, value):
        self.midi_cc_ch_2_val_45.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_45, "pre_val"):
            self.midi_cc_ch_2_val_45.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_45, "prev_press_time"):
            self.midi_cc_ch_2_val_45.prev_press_time = time.time()
        if (self.device_id_271_active_bank == 0):
            self.pick_brain(self.parameter_13___transpose_id_285)
        self.midi_cc_ch_2_val_45.pre_val = value
        self.midi_cc_ch_2_val_45.prev_press_time = time.time()
    def midi_cc_ch_2_val_46_mode268_listener(self, value):
        self.midi_cc_ch_2_val_46.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_46, "pre_val"):
            self.midi_cc_ch_2_val_46.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_46, "prev_press_time"):
            self.midi_cc_ch_2_val_46.prev_press_time = time.time()
        if (self.device_id_271_active_bank == 0):
            self.pick_brain(self.parameter_14___unison_amount_id_286)
        self.midi_cc_ch_2_val_46.pre_val = value
        self.midi_cc_ch_2_val_46.prev_press_time = time.time()
    def midi_cc_ch_2_val_47_mode268_listener(self, value):
        self.midi_cc_ch_2_val_47.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_47, "pre_val"):
            self.midi_cc_ch_2_val_47.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_47, "prev_press_time"):
            self.midi_cc_ch_2_val_47.prev_press_time = time.time()
        if (self.device_id_271_active_bank == 0):
            self.pick_brain(self.parameter_15___glide_id_287)
        self.midi_cc_ch_2_val_47.pre_val = value
        self.midi_cc_ch_2_val_47.prev_press_time = time.time()
    def midi_cc_ch_2_val_48_mode268_listener(self, value):
        self.midi_cc_ch_2_val_48.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_48, "pre_val"):
            self.midi_cc_ch_2_val_48.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_48, "prev_press_time"):
            self.midi_cc_ch_2_val_48.prev_press_time = time.time()
        if (self.device_id_271_active_bank == 0):
            self.pick_brain(self.parameter_16___volume_id_288)
        self.midi_cc_ch_2_val_48.pre_val = value
        self.midi_cc_ch_2_val_48.prev_press_time = time.time()
    def midi_cc_ch_2_val_114_mode268_listener(self, value):
        self.midi_cc_ch_2_val_114.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_114, "pre_val"):
            self.midi_cc_ch_2_val_114.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_114, "prev_press_time"):
            self.midi_cc_ch_2_val_114.prev_press_time = time.time()
        self.pick_brain(self.track_nav_left_copy_id_289)
        self.midi_cc_ch_2_val_114.pre_val = value
        self.midi_cc_ch_2_val_114.prev_press_time = time.time()
    def midi_cc_ch_2_val_115_mode268_listener(self, value):
        self.midi_cc_ch_2_val_115.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_115, "pre_val"):
            self.midi_cc_ch_2_val_115.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_115, "prev_press_time"):
            self.midi_cc_ch_2_val_115.prev_press_time = time.time()
        self.pick_brain(self.track_nav_right_copy_id_290)
        self.midi_cc_ch_2_val_115.pre_val = value
        self.midi_cc_ch_2_val_115.prev_press_time = time.time()
    def midi_note_ch_8_val_43_mode268_listener(self, value):
        self.midi_note_ch_8_val_43.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.toggle_first_last_device()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 8 Go To Last Device copy' (from 'Pad 8 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_43, "pre_val"):
            self.midi_note_ch_8_val_43.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_43, "prev_press_time"):
            self.midi_note_ch_8_val_43.prev_press_time = time.time()
        self.midi_note_ch_8_val_43.pre_val = value
        self.midi_note_ch_8_val_43.prev_press_time = time.time()
    def midi_cc_ch_2_val_116_mode268_listener(self, value):
        self.midi_cc_ch_2_val_116.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.device_nav_left_ignoring_inner_devices()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Button 1 Device Nav Left Special' (from 'Button 1 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_cc_ch_2_val_116, "pre_val"):
            self.midi_cc_ch_2_val_116.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_116, "prev_press_time"):
            self.midi_cc_ch_2_val_116.prev_press_time = time.time()
        self.midi_cc_ch_2_val_116.pre_val = value
        self.midi_cc_ch_2_val_116.prev_press_time = time.time()
    def midi_cc_ch_2_val_117_mode268_listener(self, value):
        self.midi_cc_ch_2_val_117.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.device_nav_right_ignoring_inner_devices()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Button 2 Device Nav Right Special' (from 'Button 2 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_cc_ch_2_val_117, "pre_val"):
            self.midi_cc_ch_2_val_117.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_117, "prev_press_time"):
            self.midi_cc_ch_2_val_117.prev_press_time = time.time()
        self.midi_cc_ch_2_val_117.pre_val = value
        self.midi_cc_ch_2_val_117.prev_press_time = time.time()
    def midi_note_ch_8_val_9_mode268_listener(self, value):
        self.midi_note_ch_8_val_9.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.log_message("FIRED - On device change - move to mode 1")
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'On Shift Press - move to mode 1' (from 'Pad 1 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.set_active_mode(self.modes[0])
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 2' in reaction 'On Shift Press - move to mode 1' (from 'Pad 1 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_9, "pre_val"):
            self.midi_note_ch_8_val_9.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_9, "prev_press_time"):
            self.midi_note_ch_8_val_9.prev_press_time = time.time()
        self.midi_note_ch_8_val_9.pre_val = value
        self.midi_note_ch_8_val_9.prev_press_time = time.time()
    def midi_note_ch_8_val_12_mode268_listener(self, value):
        self.midi_note_ch_8_val_12.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            if self.midi_note_ch_8_val_12.cur_val == 127:
                device = self.song().view.selected_track.view.selected_device
                curr_value = device.parameters[22].value
                next = (curr_value + 1) % 4
                device.parameters[22].value = next
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 2 - Filter 1 LP/HP (toggle)' (from 'Pad 2 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_12, "pre_val"):
            self.midi_note_ch_8_val_12.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_12, "prev_press_time"):
            self.midi_note_ch_8_val_12.prev_press_time = time.time()
        self.midi_note_ch_8_val_12.pre_val = value
        self.midi_note_ch_8_val_12.prev_press_time = time.time()
    def midi_note_ch_8_val_37_mode268_listener(self, value):
        self.midi_note_ch_8_val_37.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            if self.midi_note_ch_8_val_37.cur_val == 127:
                pass
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 3' (from 'Pad 3 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_37, "pre_val"):
            self.midi_note_ch_8_val_37.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_37, "prev_press_time"):
            self.midi_note_ch_8_val_37.prev_press_time = time.time()
        self.midi_note_ch_8_val_37.pre_val = value
        self.midi_note_ch_8_val_37.prev_press_time = time.time()
    def midi_cc_ch_2_val_21_mode298_listener(self, value):
        self.midi_cc_ch_2_val_21.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_21, "pre_val"):
            self.midi_cc_ch_2_val_21.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_21, "prev_press_time"):
            self.midi_cc_ch_2_val_21.prev_press_time = time.time()
        if (self.device_id_301_active_bank == 0):
            self.pick_brain(self.parameter_1___s_start_id_303)
        self.midi_cc_ch_2_val_21.pre_val = value
        self.midi_cc_ch_2_val_21.prev_press_time = time.time()
    def midi_cc_ch_2_val_22_mode298_listener(self, value):
        self.midi_cc_ch_2_val_22.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_22, "pre_val"):
            self.midi_cc_ch_2_val_22.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_22, "prev_press_time"):
            self.midi_cc_ch_2_val_22.prev_press_time = time.time()
        if (self.device_id_301_active_bank == 0):
            self.pick_brain(self.parameter_2___s_length_id_304)
        self.midi_cc_ch_2_val_22.pre_val = value
        self.midi_cc_ch_2_val_22.prev_press_time = time.time()
    def midi_cc_ch_2_val_23_mode298_listener(self, value):
        self.midi_cc_ch_2_val_23.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_23, "pre_val"):
            self.midi_cc_ch_2_val_23.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_23, "prev_press_time"):
            self.midi_cc_ch_2_val_23.prev_press_time = time.time()
        if (self.device_id_301_active_bank == 0):
            self.pick_brain(self.parameter_3___transpose_id_305)
        self.midi_cc_ch_2_val_23.pre_val = value
        self.midi_cc_ch_2_val_23.prev_press_time = time.time()
    def midi_cc_ch_2_val_24_mode298_listener(self, value):
        self.midi_cc_ch_2_val_24.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_24, "pre_val"):
            self.midi_cc_ch_2_val_24.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_24, "prev_press_time"):
            self.midi_cc_ch_2_val_24.prev_press_time = time.time()
        if (self.device_id_301_active_bank == 0):
            self.pick_brain(self.parameter_4___detune_id_306)
        self.midi_cc_ch_2_val_24.pre_val = value
        self.midi_cc_ch_2_val_24.prev_press_time = time.time()
    def midi_cc_ch_2_val_25_mode298_listener(self, value):
        self.midi_cc_ch_2_val_25.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_25, "pre_val"):
            self.midi_cc_ch_2_val_25.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_25, "prev_press_time"):
            self.midi_cc_ch_2_val_25.prev_press_time = time.time()
        if (self.device_id_301_active_bank == 0):
            self.pick_brain(self.parameter_5___filter_type_id_307)
        self.midi_cc_ch_2_val_25.pre_val = value
        self.midi_cc_ch_2_val_25.prev_press_time = time.time()
    def midi_cc_ch_2_val_26_mode298_listener(self, value):
        self.midi_cc_ch_2_val_26.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_26, "pre_val"):
            self.midi_cc_ch_2_val_26.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_26, "prev_press_time"):
            self.midi_cc_ch_2_val_26.prev_press_time = time.time()
        if (self.device_id_301_active_bank == 0):
            self.pick_brain(self.parameter_6___filter_circuit___lphp_id_308)
        self.midi_cc_ch_2_val_26.pre_val = value
        self.midi_cc_ch_2_val_26.prev_press_time = time.time()
    def midi_cc_ch_2_val_27_mode298_listener(self, value):
        self.midi_cc_ch_2_val_27.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_27, "pre_val"):
            self.midi_cc_ch_2_val_27.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_27, "prev_press_time"):
            self.midi_cc_ch_2_val_27.prev_press_time = time.time()
        if (self.device_id_301_active_bank == 0):
            self.pick_brain(self.parameter_7___filter_freq_id_309)
        self.midi_cc_ch_2_val_27.pre_val = value
        self.midi_cc_ch_2_val_27.prev_press_time = time.time()
    def midi_cc_ch_2_val_28_mode298_listener(self, value):
        self.midi_cc_ch_2_val_28.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_28, "pre_val"):
            self.midi_cc_ch_2_val_28.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_28, "prev_press_time"):
            self.midi_cc_ch_2_val_28.prev_press_time = time.time()
        if (self.device_id_301_active_bank == 0):
            self.pick_brain(self.parameter_8___filter_res_id_310)
        self.midi_cc_ch_2_val_28.pre_val = value
        self.midi_cc_ch_2_val_28.prev_press_time = time.time()
    def midi_cc_ch_2_val_29_mode298_listener(self, value):
        self.midi_cc_ch_2_val_29.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_29, "pre_val"):
            self.midi_cc_ch_2_val_29.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_29, "prev_press_time"):
            self.midi_cc_ch_2_val_29.prev_press_time = time.time()
        if (self.device_id_301_active_bank == 0):
            self.pick_brain(self.parameter_9___ve_attack_id_311)
        self.midi_cc_ch_2_val_29.pre_val = value
        self.midi_cc_ch_2_val_29.prev_press_time = time.time()
    def midi_cc_ch_2_val_42_mode298_listener(self, value):
        self.midi_cc_ch_2_val_42.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_42, "pre_val"):
            self.midi_cc_ch_2_val_42.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_42, "prev_press_time"):
            self.midi_cc_ch_2_val_42.prev_press_time = time.time()
        if (self.device_id_301_active_bank == 0):
            self.pick_brain(self.parameter_10___ve_decay_id_312)
        self.midi_cc_ch_2_val_42.pre_val = value
        self.midi_cc_ch_2_val_42.prev_press_time = time.time()
    def midi_cc_ch_2_val_43_mode298_listener(self, value):
        self.midi_cc_ch_2_val_43.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_43, "pre_val"):
            self.midi_cc_ch_2_val_43.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_43, "prev_press_time"):
            self.midi_cc_ch_2_val_43.prev_press_time = time.time()
        if (self.device_id_301_active_bank == 0):
            self.pick_brain(self.parameter_11___ve_sustain_id_313)
        self.midi_cc_ch_2_val_43.pre_val = value
        self.midi_cc_ch_2_val_43.prev_press_time = time.time()
    def midi_cc_ch_2_val_44_mode298_listener(self, value):
        self.midi_cc_ch_2_val_44.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_44, "pre_val"):
            self.midi_cc_ch_2_val_44.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_44, "prev_press_time"):
            self.midi_cc_ch_2_val_44.prev_press_time = time.time()
        if (self.device_id_301_active_bank == 0):
            self.pick_brain(self.parameter_12___ve_release_id_314)
        self.midi_cc_ch_2_val_44.pre_val = value
        self.midi_cc_ch_2_val_44.prev_press_time = time.time()
    def midi_cc_ch_2_val_45_mode298_listener(self, value):
        self.midi_cc_ch_2_val_45.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_45, "pre_val"):
            self.midi_cc_ch_2_val_45.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_45, "prev_press_time"):
            self.midi_cc_ch_2_val_45.prev_press_time = time.time()
        if (self.device_id_301_active_bank == 0):
            self.pick_brain(self.parameter_13___vol_vel_id_315)
        self.midi_cc_ch_2_val_45.pre_val = value
        self.midi_cc_ch_2_val_45.prev_press_time = time.time()
    def midi_cc_ch_2_val_46_mode298_listener(self, value):
        self.midi_cc_ch_2_val_46.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_46, "pre_val"):
            self.midi_cc_ch_2_val_46.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_46, "prev_press_time"):
            self.midi_cc_ch_2_val_46.prev_press_time = time.time()
        if (self.device_id_301_active_bank == 0):
            self.pick_brain(self.parameter_14___trigger_mode_id_316)
        self.midi_cc_ch_2_val_46.pre_val = value
        self.midi_cc_ch_2_val_46.prev_press_time = time.time()
    def midi_cc_ch_2_val_47_mode298_listener(self, value):
        self.midi_cc_ch_2_val_47.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_47, "pre_val"):
            self.midi_cc_ch_2_val_47.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_47, "prev_press_time"):
            self.midi_cc_ch_2_val_47.prev_press_time = time.time()
        if (self.device_id_301_active_bank == 0):
            self.pick_brain(self.parameter_15___fade_in_id_317)
        self.midi_cc_ch_2_val_47.pre_val = value
        self.midi_cc_ch_2_val_47.prev_press_time = time.time()
    def midi_cc_ch_2_val_48_mode298_listener(self, value):
        self.midi_cc_ch_2_val_48.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_48, "pre_val"):
            self.midi_cc_ch_2_val_48.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_48, "prev_press_time"):
            self.midi_cc_ch_2_val_48.prev_press_time = time.time()
        if (self.device_id_301_active_bank == 0):
            self.pick_brain(self.parameter_16___fade_out_id_318)
        self.midi_cc_ch_2_val_48.pre_val = value
        self.midi_cc_ch_2_val_48.prev_press_time = time.time()
    def midi_cc_ch_2_val_114_mode298_listener(self, value):
        self.midi_cc_ch_2_val_114.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_114, "pre_val"):
            self.midi_cc_ch_2_val_114.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_114, "prev_press_time"):
            self.midi_cc_ch_2_val_114.prev_press_time = time.time()
        self.pick_brain(self.track_nav_left_copy_id_319)
        self.midi_cc_ch_2_val_114.pre_val = value
        self.midi_cc_ch_2_val_114.prev_press_time = time.time()
    def midi_cc_ch_2_val_115_mode298_listener(self, value):
        self.midi_cc_ch_2_val_115.cur_val = value
        if not hasattr(self.midi_cc_ch_2_val_115, "pre_val"):
            self.midi_cc_ch_2_val_115.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_115, "prev_press_time"):
            self.midi_cc_ch_2_val_115.prev_press_time = time.time()
        self.pick_brain(self.track_nav_right_copy_id_320)
        self.midi_cc_ch_2_val_115.pre_val = value
        self.midi_cc_ch_2_val_115.prev_press_time = time.time()
    def midi_note_ch_8_val_43_mode298_listener(self, value):
        self.midi_note_ch_8_val_43.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.toggle_first_last_device()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 8 Go To Last Device copy' (from 'Pad 8 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_43, "pre_val"):
            self.midi_note_ch_8_val_43.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_43, "prev_press_time"):
            self.midi_note_ch_8_val_43.prev_press_time = time.time()
        self.midi_note_ch_8_val_43.pre_val = value
        self.midi_note_ch_8_val_43.prev_press_time = time.time()
    def midi_cc_ch_2_val_116_mode298_listener(self, value):
        self.midi_cc_ch_2_val_116.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.device_nav_left_ignoring_inner_devices()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Button 1 Device Nav Left Special' (from 'Button 1 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_cc_ch_2_val_116, "pre_val"):
            self.midi_cc_ch_2_val_116.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_116, "prev_press_time"):
            self.midi_cc_ch_2_val_116.prev_press_time = time.time()
        self.midi_cc_ch_2_val_116.pre_val = value
        self.midi_cc_ch_2_val_116.prev_press_time = time.time()
    def midi_cc_ch_2_val_117_mode298_listener(self, value):
        self.midi_cc_ch_2_val_117.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.device_nav_right_ignoring_inner_devices()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Button 2 Device Nav Right Special' (from 'Button 2 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_cc_ch_2_val_117, "pre_val"):
            self.midi_cc_ch_2_val_117.pre_val = None
        if not hasattr(self.midi_cc_ch_2_val_117, "prev_press_time"):
            self.midi_cc_ch_2_val_117.prev_press_time = time.time()
        self.midi_cc_ch_2_val_117.pre_val = value
        self.midi_cc_ch_2_val_117.prev_press_time = time.time()
    def midi_note_ch_8_val_9_mode298_listener(self, value):
        self.midi_note_ch_8_val_9.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.log_message("FIRED - On device change - move to mode 1")
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'On Shift Press - move to mode 1' (from 'Pad 1 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.set_active_mode(self.modes[0])
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 2' in reaction 'On Shift Press - move to mode 1' (from 'Pad 1 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_9, "pre_val"):
            self.midi_note_ch_8_val_9.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_9, "prev_press_time"):
            self.midi_note_ch_8_val_9.prev_press_time = time.time()
        self.midi_note_ch_8_val_9.pre_val = value
        self.midi_note_ch_8_val_9.prev_press_time = time.time()
    def midi_note_ch_8_val_12_mode298_listener(self, value):
        self.midi_note_ch_8_val_12.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            if self.midi_note_ch_8_val_12.cur_val == 127:
                pass
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 2' (from 'Pad 2 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_12, "pre_val"):
            self.midi_note_ch_8_val_12.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_12, "prev_press_time"):
            self.midi_note_ch_8_val_12.prev_press_time = time.time()
        self.midi_note_ch_8_val_12.pre_val = value
        self.midi_note_ch_8_val_12.prev_press_time = time.time()
    def midi_note_ch_8_val_37_mode298_listener(self, value):
        self.midi_note_ch_8_val_37.cur_val = value
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            if self.midi_note_ch_8_val_37.cur_val == 127:
                pass
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Pad 3' (from 'Pad 3 was pressed' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        if not hasattr(self.midi_note_ch_8_val_37, "pre_val"):
            self.midi_note_ch_8_val_37.pre_val = None
        if not hasattr(self.midi_note_ch_8_val_37, "prev_press_time"):
            self.midi_note_ch_8_val_37.prev_press_time = time.time()
        self.midi_note_ch_8_val_37.pre_val = value
        self.midi_note_ch_8_val_37.prev_press_time = time.time()
    def _mode1_configs(self):
        self.mode_1_configs_map = [
            "track_selector_1_id_2",
            "device_selector_1_id_3",
            "pad_3___track_mute_id_21",
            "pad_4___device_onoff_id_25",
            "mode_selector_1_id_40",
            "parameter_bank_1_id_59",
            "parameter_1_id_60",
            "parameter_2_id_61",
            "parameter_3_id_62",
            "parameter_4_id_63",
            "parameter_5_id_64",
            "parameter_6_id_65",
            "parameter_7_id_66",
            "parameter_8_id_67",
            "track_nav_left_id_83",
            "parameter_9_id_100",
            "parameter_10_id_101",
            "parameter_11_id_102",
            "parameter_12_id_103",
            "parameter_13_id_104",
            "parameter_14_id_105",
            "parameter_15_id_106",
            "parameter_16_id_107",
            "track_nav_right_id_134"]
        self.track_selector_1_id_2 = {}
        self.track_selector_1_id_2["track"] = self.track_num(2)
        self.track_selector_1_id_2["module"] = "self.song().view.selected_track"
        self.track_selector_1_id_2["LED_mapping_type_needs_feedback"] = ""
        self.track_selector_1_id_2["LED_feedback"] = "custom"
        self.track_selector_1_id_2["LED_feedback_active"] = ""
        self.track_selector_1_id_2["LED_on"] = "127"
        self.track_selector_1_id_2["LED_off"] = "0"
        self.track_selector_1_id_2["LED_send_feedback_to_selected"] = []
        self.track_selector_1_id_2["json_id"] = 2
        self.track_selector_1_id_2["mapping_name"] = "Track Selector 1"
        self.track_selector_1_id_2["mapping_type"] = "Track"
        self.track_selector_1_id_2["parent_json_id"] = 1
        self.track_selector_1_id_2["parent_name"] = "device_id_1"
        self.device_selector_1_id_3 = {}
        self.device_selector_1_id_3["track"] = self.track_num(2)
        self.device_selector_1_id_3["module"] = "self.song().view.selected_track.view.selected_device"
        self.device_selector_1_id_3["LED_mapping_type_needs_feedback"] = ""
        self.device_selector_1_id_3["LED_feedback"] = "custom"
        self.device_selector_1_id_3["LED_feedback_active"] = ""
        self.device_selector_1_id_3["LED_on"] = "127"
        self.device_selector_1_id_3["LED_off"] = "0"
        self.device_selector_1_id_3["LED_send_feedback_to_selected"] = []
        self.device_selector_1_id_3["json_id"] = 3
        self.device_selector_1_id_3["mapping_name"] = "Device Selector 1"
        self.device_selector_1_id_3["mapping_type"] = "Device"
        self.device_selector_1_id_3["parent_json_id"] = 2
        self.device_selector_1_id_3["parent_name"] = "track_selector_1_id_2"
        self.pad_3___track_mute_id_21 = {}
        self.pad_3___track_mute_id_21["attached_to"] = "midi_note_ch_8_val_37"
        self.pad_3___track_mute_id_21["track"] = self.track_num(2)
        self.pad_3___track_mute_id_21["module"] = "self.song().view.selected_track"
        self.pad_3___track_mute_id_21["element"] = "mute"
        self.pad_3___track_mute_id_21["output_type"] = "bool"
        self.pad_3___track_mute_id_21["ui_listener"] = "mute"
        self.pad_3___track_mute_id_21["feedback_brain"] = "feedback_bool"
        self.pad_3___track_mute_id_21["ctrl_type"] = "on/off"
        self.pad_3___track_mute_id_21["enc_first"] = 127
        self.pad_3___track_mute_id_21["enc_second"] = 0
        self.pad_3___track_mute_id_21["switch_type"] = "momentary"
        self.pad_3___track_mute_id_21["LED_mapping_type_needs_feedback"] = "1"
        self.pad_3___track_mute_id_21["LED_feedback"] = "default"
        self.pad_3___track_mute_id_21["LED_feedback_active"] = "1"
        self.pad_3___track_mute_id_21["LED_on"] = "127"
        self.pad_3___track_mute_id_21["LED_off"] = "0"
        self.pad_3___track_mute_id_21["LED_send_feedback_to_selected"] = ["midi_note_ch_8_val_37"]
        self.pad_3___track_mute_id_21["json_id"] = 21
        self.pad_3___track_mute_id_21["mapping_name"] = "Pad 3 - Track Mute"
        self.pad_3___track_mute_id_21["mapping_type"] = "Mute"
        self.pad_3___track_mute_id_21["parent_json_id"] = 2
        self.pad_3___track_mute_id_21["parent_name"] = "track_selector_1_id_2"
        self.pad_4___device_onoff_id_25 = {}
        self.pad_4___device_onoff_id_25["attached_to"] = "midi_note_ch_8_val_38"
        self.pad_4___device_onoff_id_25["track"] = self.track_num(2)
        self.pad_4___device_onoff_id_25["module"] = "self.song().view.selected_track.view.selected_device.parameters[0]"
        self.pad_4___device_onoff_id_25["minimum"] = 0.0
        self.pad_4___device_onoff_id_25["maximum"] = 1.0
        self.pad_4___device_onoff_id_25["snap_to"] = 1
        self.pad_4___device_onoff_id_25["element"] = "value"
        self.pad_4___device_onoff_id_25["output_type"] = "val"
        self.pad_4___device_onoff_id_25["ui_listener"] = "value"
        self.pad_4___device_onoff_id_25["feedback_brain"] = "feedback_on_off"
        self.pad_4___device_onoff_id_25["ctrl_type"] = "on/off"
        self.pad_4___device_onoff_id_25["enc_first"] = 127
        self.pad_4___device_onoff_id_25["enc_second"] = 0
        self.pad_4___device_onoff_id_25["switch_type"] = "momentary"
        self.pad_4___device_onoff_id_25["LED_mapping_type_needs_feedback"] = "1"
        self.pad_4___device_onoff_id_25["LED_feedback"] = "default"
        self.pad_4___device_onoff_id_25["LED_feedback_active"] = "1"
        self.pad_4___device_onoff_id_25["LED_on"] = "127"
        self.pad_4___device_onoff_id_25["LED_off"] = "0"
        self.pad_4___device_onoff_id_25["LED_send_feedback_to_selected"] = ["midi_note_ch_8_val_38"]
        self.pad_4___device_onoff_id_25["json_id"] = 25
        self.pad_4___device_onoff_id_25["mapping_name"] = "Pad 4 - Device On/Off"
        self.pad_4___device_onoff_id_25["mapping_type"] = "On/Off"
        self.pad_4___device_onoff_id_25["parent_json_id"] = 3
        self.pad_4___device_onoff_id_25["parent_name"] = "device_selector_1_id_3"
        self.mode_selector_1_id_40 = {}
        self.mode_selector_1_id_40["attached_to"] = "midi_note_ch_8_val_9"
        self.mode_selector_1_id_40["module"] = "self"
        self.mode_selector_1_id_40["element"] = "set_active_mode"
        self.mode_selector_1_id_40["output_type"] = "func"
        self.mode_selector_1_id_40["func_arg"] = "87"
        self.mode_selector_1_id_40["ui_listener"] = "value"
        self.mode_selector_1_id_40["feedback_brain"] = "feedback_scroll_mode_selector_select"
        self.mode_selector_1_id_40["ctrl_type"] = "on/off"
        self.mode_selector_1_id_40["enc_first"] = 127
        self.mode_selector_1_id_40["enc_second"] = 0
        self.mode_selector_1_id_40["switch_type"] = "momentary"
        self.mode_selector_1_id_40["LED_mapping_type_needs_feedback"] = ""
        self.mode_selector_1_id_40["LED_feedback"] = "default"
        self.mode_selector_1_id_40["LED_feedback_active"] = "1"
        self.mode_selector_1_id_40["LED_on"] = "127"
        self.mode_selector_1_id_40["LED_off"] = "0"
        self.mode_selector_1_id_40["LED_send_feedback_to_selected"] = ["midi_note_ch_8_val_9"]
        self.mode_selector_1_id_40["json_id"] = 40
        self.mode_selector_1_id_40["mapping_name"] = "Mode Selector 1"
        self.mode_selector_1_id_40["mapping_type"] = "Mode Selector"
        self.mode_selector_1_id_40["parent_json_id"] = 1
        self.mode_selector_1_id_40["parent_name"] = "device_id_1"
        self.parameter_bank_1_id_59 = {}
        self.parameter_bank_1_id_59["LED_mapping_type_needs_feedback"] = ""
        self.parameter_bank_1_id_59["LED_feedback"] = "custom"
        self.parameter_bank_1_id_59["LED_feedback_active"] = ""
        self.parameter_bank_1_id_59["LED_on"] = "127"
        self.parameter_bank_1_id_59["LED_off"] = "0"
        self.parameter_bank_1_id_59["LED_send_feedback_to_selected"] = []
        self.parameter_bank_1_id_59["json_id"] = 59
        self.parameter_bank_1_id_59["mapping_name"] = "Parameter Bank 1"
        self.parameter_bank_1_id_59["mapping_type"] = "Parameter Bank"
        self.parameter_bank_1_id_59["parent_json_id"] = 3
        self.parameter_bank_1_id_59["parent_name"] = "device_selector_1_id_3"
        self.parameter_1_id_60 = {}
        self.parameter_1_id_60["attached_to"] = "midi_cc_ch_2_val_21"
        self.parameter_1_id_60["track"] = self.track_num(2)
        self.parameter_1_id_60["module"] = "self.song().view.selected_track.view.selected_device.parameters[1]"
        self.parameter_1_id_60["element"] = "value"
        self.parameter_1_id_60["output_type"] = "val"
        self.parameter_1_id_60["minimum"] = round(0,2)
        self.parameter_1_id_60["maximum"] = round(100,2)
        self.parameter_1_id_60["decimal_places"] = 2
        self.parameter_1_id_60["ui_listener"] = "value"
        self.parameter_1_id_60["feedback_brain"] = "feedback_range"
        self.parameter_1_id_60["ctrl_type"] = "absolute"
        self.parameter_1_id_60["takeover_mode"] = "Value scaling"
        self.parameter_1_id_60["enc_first"] = 0
        self.parameter_1_id_60["enc_second"] = 127
        self.parameter_1_id_60["reverse_mode"] = False
        self.parameter_1_id_60["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_1_id_60["LED_feedback"] = "default"
        self.parameter_1_id_60["LED_feedback_active"] = "1"
        self.parameter_1_id_60["LED_on"] = "127"
        self.parameter_1_id_60["LED_off"] = "0"
        self.parameter_1_id_60["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_21"]
        self.parameter_1_id_60["snap_to"] = True
        self.parameter_1_id_60["json_id"] = 60
        self.parameter_1_id_60["mapping_name"] = "Parameter 1"
        self.parameter_1_id_60["mapping_type"] = "Parameter"
        self.parameter_1_id_60["parent_json_id"] = 59
        self.parameter_1_id_60["parent_name"] = "parameter_bank_1_id_59"
        self.parameter_2_id_61 = {}
        self.parameter_2_id_61["attached_to"] = "midi_cc_ch_2_val_22"
        self.parameter_2_id_61["track"] = self.track_num(2)
        self.parameter_2_id_61["module"] = "self.song().view.selected_track.view.selected_device.parameters[2]"
        self.parameter_2_id_61["element"] = "value"
        self.parameter_2_id_61["output_type"] = "val"
        self.parameter_2_id_61["minimum"] = round(0,2)
        self.parameter_2_id_61["maximum"] = round(100,2)
        self.parameter_2_id_61["decimal_places"] = 2
        self.parameter_2_id_61["ui_listener"] = "value"
        self.parameter_2_id_61["feedback_brain"] = "feedback_range"
        self.parameter_2_id_61["ctrl_type"] = "absolute"
        self.parameter_2_id_61["takeover_mode"] = "Value scaling"
        self.parameter_2_id_61["enc_first"] = 0
        self.parameter_2_id_61["enc_second"] = 127
        self.parameter_2_id_61["reverse_mode"] = False
        self.parameter_2_id_61["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_2_id_61["LED_feedback"] = "default"
        self.parameter_2_id_61["LED_feedback_active"] = "1"
        self.parameter_2_id_61["LED_on"] = "127"
        self.parameter_2_id_61["LED_off"] = "0"
        self.parameter_2_id_61["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_22"]
        self.parameter_2_id_61["snap_to"] = True
        self.parameter_2_id_61["json_id"] = 61
        self.parameter_2_id_61["mapping_name"] = "Parameter 2"
        self.parameter_2_id_61["mapping_type"] = "Parameter"
        self.parameter_2_id_61["parent_json_id"] = 59
        self.parameter_2_id_61["parent_name"] = "parameter_bank_1_id_59"
        self.parameter_3_id_62 = {}
        self.parameter_3_id_62["attached_to"] = "midi_cc_ch_2_val_23"
        self.parameter_3_id_62["track"] = self.track_num(2)
        self.parameter_3_id_62["module"] = "self.song().view.selected_track.view.selected_device.parameters[3]"
        self.parameter_3_id_62["element"] = "value"
        self.parameter_3_id_62["output_type"] = "val"
        self.parameter_3_id_62["minimum"] = round(0,2)
        self.parameter_3_id_62["maximum"] = round(100,2)
        self.parameter_3_id_62["decimal_places"] = 2
        self.parameter_3_id_62["ui_listener"] = "value"
        self.parameter_3_id_62["feedback_brain"] = "feedback_range"
        self.parameter_3_id_62["ctrl_type"] = "absolute"
        self.parameter_3_id_62["takeover_mode"] = "Value scaling"
        self.parameter_3_id_62["enc_first"] = 0
        self.parameter_3_id_62["enc_second"] = 127
        self.parameter_3_id_62["reverse_mode"] = False
        self.parameter_3_id_62["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_3_id_62["LED_feedback"] = "default"
        self.parameter_3_id_62["LED_feedback_active"] = "1"
        self.parameter_3_id_62["LED_on"] = "127"
        self.parameter_3_id_62["LED_off"] = "0"
        self.parameter_3_id_62["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_23"]
        self.parameter_3_id_62["snap_to"] = True
        self.parameter_3_id_62["json_id"] = 62
        self.parameter_3_id_62["mapping_name"] = "Parameter 3"
        self.parameter_3_id_62["mapping_type"] = "Parameter"
        self.parameter_3_id_62["parent_json_id"] = 59
        self.parameter_3_id_62["parent_name"] = "parameter_bank_1_id_59"
        self.parameter_4_id_63 = {}
        self.parameter_4_id_63["attached_to"] = "midi_cc_ch_2_val_24"
        self.parameter_4_id_63["track"] = self.track_num(2)
        self.parameter_4_id_63["module"] = "self.song().view.selected_track.view.selected_device.parameters[4]"
        self.parameter_4_id_63["element"] = "value"
        self.parameter_4_id_63["output_type"] = "val"
        self.parameter_4_id_63["minimum"] = round(0,2)
        self.parameter_4_id_63["maximum"] = round(100,2)
        self.parameter_4_id_63["decimal_places"] = 2
        self.parameter_4_id_63["ui_listener"] = "value"
        self.parameter_4_id_63["feedback_brain"] = "feedback_range"
        self.parameter_4_id_63["ctrl_type"] = "absolute"
        self.parameter_4_id_63["takeover_mode"] = "Value scaling"
        self.parameter_4_id_63["enc_first"] = 0
        self.parameter_4_id_63["enc_second"] = 127
        self.parameter_4_id_63["reverse_mode"] = False
        self.parameter_4_id_63["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_4_id_63["LED_feedback"] = "default"
        self.parameter_4_id_63["LED_feedback_active"] = "1"
        self.parameter_4_id_63["LED_on"] = "127"
        self.parameter_4_id_63["LED_off"] = "0"
        self.parameter_4_id_63["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_24"]
        self.parameter_4_id_63["snap_to"] = True
        self.parameter_4_id_63["json_id"] = 63
        self.parameter_4_id_63["mapping_name"] = "Parameter 4"
        self.parameter_4_id_63["mapping_type"] = "Parameter"
        self.parameter_4_id_63["parent_json_id"] = 59
        self.parameter_4_id_63["parent_name"] = "parameter_bank_1_id_59"
        self.parameter_5_id_64 = {}
        self.parameter_5_id_64["attached_to"] = "midi_cc_ch_2_val_25"
        self.parameter_5_id_64["track"] = self.track_num(2)
        self.parameter_5_id_64["module"] = "self.song().view.selected_track.view.selected_device.parameters[5]"
        self.parameter_5_id_64["element"] = "value"
        self.parameter_5_id_64["output_type"] = "val"
        self.parameter_5_id_64["minimum"] = round(0,2)
        self.parameter_5_id_64["maximum"] = round(100,2)
        self.parameter_5_id_64["decimal_places"] = 2
        self.parameter_5_id_64["ui_listener"] = "value"
        self.parameter_5_id_64["feedback_brain"] = "feedback_range"
        self.parameter_5_id_64["ctrl_type"] = "absolute"
        self.parameter_5_id_64["takeover_mode"] = "Value scaling"
        self.parameter_5_id_64["enc_first"] = 0
        self.parameter_5_id_64["enc_second"] = 127
        self.parameter_5_id_64["reverse_mode"] = False
        self.parameter_5_id_64["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_5_id_64["LED_feedback"] = "default"
        self.parameter_5_id_64["LED_feedback_active"] = "1"
        self.parameter_5_id_64["LED_on"] = "127"
        self.parameter_5_id_64["LED_off"] = "0"
        self.parameter_5_id_64["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_25"]
        self.parameter_5_id_64["snap_to"] = True
        self.parameter_5_id_64["json_id"] = 64
        self.parameter_5_id_64["mapping_name"] = "Parameter 5"
        self.parameter_5_id_64["mapping_type"] = "Parameter"
        self.parameter_5_id_64["parent_json_id"] = 59
        self.parameter_5_id_64["parent_name"] = "parameter_bank_1_id_59"
        self.parameter_6_id_65 = {}
        self.parameter_6_id_65["attached_to"] = "midi_cc_ch_2_val_26"
        self.parameter_6_id_65["track"] = self.track_num(2)
        self.parameter_6_id_65["module"] = "self.song().view.selected_track.view.selected_device.parameters[6]"
        self.parameter_6_id_65["element"] = "value"
        self.parameter_6_id_65["output_type"] = "val"
        self.parameter_6_id_65["minimum"] = round(0,2)
        self.parameter_6_id_65["maximum"] = round(100,2)
        self.parameter_6_id_65["decimal_places"] = 2
        self.parameter_6_id_65["ui_listener"] = "value"
        self.parameter_6_id_65["feedback_brain"] = "feedback_range"
        self.parameter_6_id_65["ctrl_type"] = "absolute"
        self.parameter_6_id_65["takeover_mode"] = "Value scaling"
        self.parameter_6_id_65["enc_first"] = 0
        self.parameter_6_id_65["enc_second"] = 127
        self.parameter_6_id_65["reverse_mode"] = False
        self.parameter_6_id_65["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_6_id_65["LED_feedback"] = "default"
        self.parameter_6_id_65["LED_feedback_active"] = "1"
        self.parameter_6_id_65["LED_on"] = "127"
        self.parameter_6_id_65["LED_off"] = "0"
        self.parameter_6_id_65["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_26"]
        self.parameter_6_id_65["snap_to"] = True
        self.parameter_6_id_65["json_id"] = 65
        self.parameter_6_id_65["mapping_name"] = "Parameter 6"
        self.parameter_6_id_65["mapping_type"] = "Parameter"
        self.parameter_6_id_65["parent_json_id"] = 59
        self.parameter_6_id_65["parent_name"] = "parameter_bank_1_id_59"
        self.parameter_7_id_66 = {}
        self.parameter_7_id_66["attached_to"] = "midi_cc_ch_2_val_27"
        self.parameter_7_id_66["track"] = self.track_num(2)
        self.parameter_7_id_66["module"] = "self.song().view.selected_track.view.selected_device.parameters[7]"
        self.parameter_7_id_66["element"] = "value"
        self.parameter_7_id_66["output_type"] = "val"
        self.parameter_7_id_66["minimum"] = round(0,2)
        self.parameter_7_id_66["maximum"] = round(100,2)
        self.parameter_7_id_66["decimal_places"] = 2
        self.parameter_7_id_66["ui_listener"] = "value"
        self.parameter_7_id_66["feedback_brain"] = "feedback_range"
        self.parameter_7_id_66["ctrl_type"] = "absolute"
        self.parameter_7_id_66["takeover_mode"] = "Value scaling"
        self.parameter_7_id_66["enc_first"] = 0
        self.parameter_7_id_66["enc_second"] = 127
        self.parameter_7_id_66["reverse_mode"] = False
        self.parameter_7_id_66["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_7_id_66["LED_feedback"] = "default"
        self.parameter_7_id_66["LED_feedback_active"] = "1"
        self.parameter_7_id_66["LED_on"] = "127"
        self.parameter_7_id_66["LED_off"] = "0"
        self.parameter_7_id_66["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_27"]
        self.parameter_7_id_66["snap_to"] = True
        self.parameter_7_id_66["json_id"] = 66
        self.parameter_7_id_66["mapping_name"] = "Parameter 7"
        self.parameter_7_id_66["mapping_type"] = "Parameter"
        self.parameter_7_id_66["parent_json_id"] = 59
        self.parameter_7_id_66["parent_name"] = "parameter_bank_1_id_59"
        self.parameter_8_id_67 = {}
        self.parameter_8_id_67["attached_to"] = "midi_cc_ch_2_val_28"
        self.parameter_8_id_67["track"] = self.track_num(2)
        self.parameter_8_id_67["module"] = "self.song().view.selected_track.view.selected_device.parameters[8]"
        self.parameter_8_id_67["element"] = "value"
        self.parameter_8_id_67["output_type"] = "val"
        self.parameter_8_id_67["minimum"] = round(0,2)
        self.parameter_8_id_67["maximum"] = round(100,2)
        self.parameter_8_id_67["decimal_places"] = 2
        self.parameter_8_id_67["ui_listener"] = "value"
        self.parameter_8_id_67["feedback_brain"] = "feedback_range"
        self.parameter_8_id_67["ctrl_type"] = "absolute"
        self.parameter_8_id_67["takeover_mode"] = "Value scaling"
        self.parameter_8_id_67["enc_first"] = 0
        self.parameter_8_id_67["enc_second"] = 127
        self.parameter_8_id_67["reverse_mode"] = False
        self.parameter_8_id_67["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_8_id_67["LED_feedback"] = "default"
        self.parameter_8_id_67["LED_feedback_active"] = "1"
        self.parameter_8_id_67["LED_on"] = "127"
        self.parameter_8_id_67["LED_off"] = "0"
        self.parameter_8_id_67["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_28"]
        self.parameter_8_id_67["snap_to"] = True
        self.parameter_8_id_67["json_id"] = 67
        self.parameter_8_id_67["mapping_name"] = "Parameter 8"
        self.parameter_8_id_67["mapping_type"] = "Parameter"
        self.parameter_8_id_67["parent_json_id"] = 59
        self.parameter_8_id_67["parent_name"] = "parameter_bank_1_id_59"
        self.track_nav_left_id_83 = {}
        self.track_nav_left_id_83["attached_to"] = "midi_cc_ch_2_val_114"
        self.track_nav_left_id_83["module"] = "self"
        self.track_nav_left_id_83["element"] = "scroll_highlight"
        self.track_nav_left_id_83["output_type"] = "func"
        self.track_nav_left_id_83["func_arg"] = "cnfg"
        self.track_nav_left_id_83["tracks_scenes"] = "tracks"
        self.track_nav_left_id_83["ui_listener"] = "tracks"
        self.track_nav_left_id_83["feedback_brain"] = "feedback_highlight_nav"
        self.track_nav_left_id_83["ctrl_type"] = "decrement"
        self.track_nav_left_id_83["enc_first"] = 127
        self.track_nav_left_id_83["enc_second"] = 0
        self.track_nav_left_id_83["steps"] = 1
        self.track_nav_left_id_83["switch_type"] = "toggle"
        self.track_nav_left_id_83["LED_mapping_type_needs_feedback"] = "1"
        self.track_nav_left_id_83["LED_feedback"] = "default"
        self.track_nav_left_id_83["LED_feedback_active"] = "1"
        self.track_nav_left_id_83["LED_on"] = "127"
        self.track_nav_left_id_83["LED_off"] = "0"
        self.track_nav_left_id_83["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_114"]
        self.track_nav_left_id_83["json_id"] = 83
        self.track_nav_left_id_83["mapping_name"] = "Track Nav Left"
        self.track_nav_left_id_83["mapping_type"] = "Highlight Navigation"
        self.track_nav_left_id_83["parent_json_id"] = 1
        self.track_nav_left_id_83["parent_name"] = "device_id_1"
        self.parameter_9_id_100 = {}
        self.parameter_9_id_100["attached_to"] = "midi_cc_ch_2_val_29"
        self.parameter_9_id_100["track"] = self.track_num(2)
        self.parameter_9_id_100["module"] = "self.song().view.selected_track.view.selected_device.parameters[9]"
        self.parameter_9_id_100["element"] = "value"
        self.parameter_9_id_100["output_type"] = "val"
        self.parameter_9_id_100["minimum"] = round(0,2)
        self.parameter_9_id_100["maximum"] = round(100,2)
        self.parameter_9_id_100["decimal_places"] = 2
        self.parameter_9_id_100["ui_listener"] = "value"
        self.parameter_9_id_100["feedback_brain"] = "feedback_range"
        self.parameter_9_id_100["ctrl_type"] = "absolute"
        self.parameter_9_id_100["takeover_mode"] = "Value scaling"
        self.parameter_9_id_100["enc_first"] = 0
        self.parameter_9_id_100["enc_second"] = 127
        self.parameter_9_id_100["reverse_mode"] = False
        self.parameter_9_id_100["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_9_id_100["LED_feedback"] = "default"
        self.parameter_9_id_100["LED_feedback_active"] = "1"
        self.parameter_9_id_100["LED_on"] = "127"
        self.parameter_9_id_100["LED_off"] = "0"
        self.parameter_9_id_100["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_29"]
        self.parameter_9_id_100["snap_to"] = True
        self.parameter_9_id_100["json_id"] = 100
        self.parameter_9_id_100["mapping_name"] = "Parameter 9"
        self.parameter_9_id_100["mapping_type"] = "Parameter"
        self.parameter_9_id_100["parent_json_id"] = 59
        self.parameter_9_id_100["parent_name"] = "parameter_bank_1_id_59"
        self.parameter_10_id_101 = {}
        self.parameter_10_id_101["attached_to"] = "midi_cc_ch_2_val_42"
        self.parameter_10_id_101["track"] = self.track_num(2)
        self.parameter_10_id_101["module"] = "self.song().view.selected_track.view.selected_device.parameters[10]"
        self.parameter_10_id_101["element"] = "value"
        self.parameter_10_id_101["output_type"] = "val"
        self.parameter_10_id_101["minimum"] = round(0,2)
        self.parameter_10_id_101["maximum"] = round(100,2)
        self.parameter_10_id_101["decimal_places"] = 2
        self.parameter_10_id_101["ui_listener"] = "value"
        self.parameter_10_id_101["feedback_brain"] = "feedback_range"
        self.parameter_10_id_101["ctrl_type"] = "absolute"
        self.parameter_10_id_101["takeover_mode"] = "Value scaling"
        self.parameter_10_id_101["enc_first"] = 0
        self.parameter_10_id_101["enc_second"] = 127
        self.parameter_10_id_101["reverse_mode"] = False
        self.parameter_10_id_101["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_10_id_101["LED_feedback"] = "default"
        self.parameter_10_id_101["LED_feedback_active"] = "1"
        self.parameter_10_id_101["LED_on"] = "127"
        self.parameter_10_id_101["LED_off"] = "0"
        self.parameter_10_id_101["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_42"]
        self.parameter_10_id_101["snap_to"] = True
        self.parameter_10_id_101["json_id"] = 101
        self.parameter_10_id_101["mapping_name"] = "Parameter 10"
        self.parameter_10_id_101["mapping_type"] = "Parameter"
        self.parameter_10_id_101["parent_json_id"] = 59
        self.parameter_10_id_101["parent_name"] = "parameter_bank_1_id_59"
        self.parameter_11_id_102 = {}
        self.parameter_11_id_102["attached_to"] = "midi_cc_ch_2_val_43"
        self.parameter_11_id_102["track"] = self.track_num(2)
        self.parameter_11_id_102["module"] = "self.song().view.selected_track.view.selected_device.parameters[11]"
        self.parameter_11_id_102["element"] = "value"
        self.parameter_11_id_102["output_type"] = "val"
        self.parameter_11_id_102["minimum"] = round(0,2)
        self.parameter_11_id_102["maximum"] = round(100,2)
        self.parameter_11_id_102["decimal_places"] = 2
        self.parameter_11_id_102["ui_listener"] = "value"
        self.parameter_11_id_102["feedback_brain"] = "feedback_range"
        self.parameter_11_id_102["ctrl_type"] = "absolute"
        self.parameter_11_id_102["takeover_mode"] = "Value scaling"
        self.parameter_11_id_102["enc_first"] = 0
        self.parameter_11_id_102["enc_second"] = 127
        self.parameter_11_id_102["reverse_mode"] = False
        self.parameter_11_id_102["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_11_id_102["LED_feedback"] = "default"
        self.parameter_11_id_102["LED_feedback_active"] = "1"
        self.parameter_11_id_102["LED_on"] = "127"
        self.parameter_11_id_102["LED_off"] = "0"
        self.parameter_11_id_102["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_43"]
        self.parameter_11_id_102["snap_to"] = True
        self.parameter_11_id_102["json_id"] = 102
        self.parameter_11_id_102["mapping_name"] = "Parameter 11"
        self.parameter_11_id_102["mapping_type"] = "Parameter"
        self.parameter_11_id_102["parent_json_id"] = 59
        self.parameter_11_id_102["parent_name"] = "parameter_bank_1_id_59"
        self.parameter_12_id_103 = {}
        self.parameter_12_id_103["attached_to"] = "midi_cc_ch_2_val_44"
        self.parameter_12_id_103["track"] = self.track_num(2)
        self.parameter_12_id_103["module"] = "self.song().view.selected_track.view.selected_device.parameters[12]"
        self.parameter_12_id_103["element"] = "value"
        self.parameter_12_id_103["output_type"] = "val"
        self.parameter_12_id_103["minimum"] = round(0,2)
        self.parameter_12_id_103["maximum"] = round(100,2)
        self.parameter_12_id_103["decimal_places"] = 2
        self.parameter_12_id_103["ui_listener"] = "value"
        self.parameter_12_id_103["feedback_brain"] = "feedback_range"
        self.parameter_12_id_103["ctrl_type"] = "absolute"
        self.parameter_12_id_103["takeover_mode"] = "Value scaling"
        self.parameter_12_id_103["enc_first"] = 0
        self.parameter_12_id_103["enc_second"] = 127
        self.parameter_12_id_103["reverse_mode"] = False
        self.parameter_12_id_103["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_12_id_103["LED_feedback"] = "default"
        self.parameter_12_id_103["LED_feedback_active"] = "1"
        self.parameter_12_id_103["LED_on"] = "127"
        self.parameter_12_id_103["LED_off"] = "0"
        self.parameter_12_id_103["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_44"]
        self.parameter_12_id_103["snap_to"] = True
        self.parameter_12_id_103["json_id"] = 103
        self.parameter_12_id_103["mapping_name"] = "Parameter 12"
        self.parameter_12_id_103["mapping_type"] = "Parameter"
        self.parameter_12_id_103["parent_json_id"] = 59
        self.parameter_12_id_103["parent_name"] = "parameter_bank_1_id_59"
        self.parameter_13_id_104 = {}
        self.parameter_13_id_104["attached_to"] = "midi_cc_ch_2_val_45"
        self.parameter_13_id_104["track"] = self.track_num(2)
        self.parameter_13_id_104["module"] = "self.song().view.selected_track.view.selected_device.parameters[13]"
        self.parameter_13_id_104["element"] = "value"
        self.parameter_13_id_104["output_type"] = "val"
        self.parameter_13_id_104["minimum"] = round(0,2)
        self.parameter_13_id_104["maximum"] = round(100,2)
        self.parameter_13_id_104["decimal_places"] = 2
        self.parameter_13_id_104["ui_listener"] = "value"
        self.parameter_13_id_104["feedback_brain"] = "feedback_range"
        self.parameter_13_id_104["ctrl_type"] = "absolute"
        self.parameter_13_id_104["takeover_mode"] = "Value scaling"
        self.parameter_13_id_104["enc_first"] = 0
        self.parameter_13_id_104["enc_second"] = 127
        self.parameter_13_id_104["reverse_mode"] = False
        self.parameter_13_id_104["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_13_id_104["LED_feedback"] = "default"
        self.parameter_13_id_104["LED_feedback_active"] = "1"
        self.parameter_13_id_104["LED_on"] = "127"
        self.parameter_13_id_104["LED_off"] = "0"
        self.parameter_13_id_104["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_45"]
        self.parameter_13_id_104["snap_to"] = True
        self.parameter_13_id_104["json_id"] = 104
        self.parameter_13_id_104["mapping_name"] = "Parameter 13"
        self.parameter_13_id_104["mapping_type"] = "Parameter"
        self.parameter_13_id_104["parent_json_id"] = 59
        self.parameter_13_id_104["parent_name"] = "parameter_bank_1_id_59"
        self.parameter_14_id_105 = {}
        self.parameter_14_id_105["attached_to"] = "midi_cc_ch_2_val_46"
        self.parameter_14_id_105["track"] = self.track_num(2)
        self.parameter_14_id_105["module"] = "self.song().view.selected_track.view.selected_device.parameters[14]"
        self.parameter_14_id_105["element"] = "value"
        self.parameter_14_id_105["output_type"] = "val"
        self.parameter_14_id_105["minimum"] = round(0,2)
        self.parameter_14_id_105["maximum"] = round(100,2)
        self.parameter_14_id_105["decimal_places"] = 2
        self.parameter_14_id_105["ui_listener"] = "value"
        self.parameter_14_id_105["feedback_brain"] = "feedback_range"
        self.parameter_14_id_105["ctrl_type"] = "absolute"
        self.parameter_14_id_105["takeover_mode"] = "Value scaling"
        self.parameter_14_id_105["enc_first"] = 0
        self.parameter_14_id_105["enc_second"] = 127
        self.parameter_14_id_105["reverse_mode"] = False
        self.parameter_14_id_105["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_14_id_105["LED_feedback"] = "default"
        self.parameter_14_id_105["LED_feedback_active"] = "1"
        self.parameter_14_id_105["LED_on"] = "127"
        self.parameter_14_id_105["LED_off"] = "0"
        self.parameter_14_id_105["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_46"]
        self.parameter_14_id_105["snap_to"] = True
        self.parameter_14_id_105["json_id"] = 105
        self.parameter_14_id_105["mapping_name"] = "Parameter 14"
        self.parameter_14_id_105["mapping_type"] = "Parameter"
        self.parameter_14_id_105["parent_json_id"] = 59
        self.parameter_14_id_105["parent_name"] = "parameter_bank_1_id_59"
        self.parameter_15_id_106 = {}
        self.parameter_15_id_106["attached_to"] = "midi_cc_ch_2_val_47"
        self.parameter_15_id_106["track"] = self.track_num(2)
        self.parameter_15_id_106["module"] = "self.song().view.selected_track.view.selected_device.parameters[15]"
        self.parameter_15_id_106["element"] = "value"
        self.parameter_15_id_106["output_type"] = "val"
        self.parameter_15_id_106["minimum"] = round(0,2)
        self.parameter_15_id_106["maximum"] = round(100,2)
        self.parameter_15_id_106["decimal_places"] = 2
        self.parameter_15_id_106["ui_listener"] = "value"
        self.parameter_15_id_106["feedback_brain"] = "feedback_range"
        self.parameter_15_id_106["ctrl_type"] = "absolute"
        self.parameter_15_id_106["takeover_mode"] = "Value scaling"
        self.parameter_15_id_106["enc_first"] = 0
        self.parameter_15_id_106["enc_second"] = 127
        self.parameter_15_id_106["reverse_mode"] = False
        self.parameter_15_id_106["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_15_id_106["LED_feedback"] = "default"
        self.parameter_15_id_106["LED_feedback_active"] = "1"
        self.parameter_15_id_106["LED_on"] = "127"
        self.parameter_15_id_106["LED_off"] = "0"
        self.parameter_15_id_106["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_47"]
        self.parameter_15_id_106["snap_to"] = True
        self.parameter_15_id_106["json_id"] = 106
        self.parameter_15_id_106["mapping_name"] = "Parameter 15"
        self.parameter_15_id_106["mapping_type"] = "Parameter"
        self.parameter_15_id_106["parent_json_id"] = 59
        self.parameter_15_id_106["parent_name"] = "parameter_bank_1_id_59"
        self.parameter_16_id_107 = {}
        self.parameter_16_id_107["attached_to"] = "midi_cc_ch_2_val_48"
        self.parameter_16_id_107["track"] = self.track_num(2)
        self.parameter_16_id_107["module"] = "self.song().view.selected_track.view.selected_device.parameters[16]"
        self.parameter_16_id_107["element"] = "value"
        self.parameter_16_id_107["output_type"] = "val"
        self.parameter_16_id_107["minimum"] = round(0,2)
        self.parameter_16_id_107["maximum"] = round(100,2)
        self.parameter_16_id_107["decimal_places"] = 2
        self.parameter_16_id_107["ui_listener"] = "value"
        self.parameter_16_id_107["feedback_brain"] = "feedback_range"
        self.parameter_16_id_107["ctrl_type"] = "absolute"
        self.parameter_16_id_107["takeover_mode"] = "Value scaling"
        self.parameter_16_id_107["enc_first"] = 0
        self.parameter_16_id_107["enc_second"] = 127
        self.parameter_16_id_107["reverse_mode"] = False
        self.parameter_16_id_107["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_16_id_107["LED_feedback"] = "default"
        self.parameter_16_id_107["LED_feedback_active"] = "1"
        self.parameter_16_id_107["LED_on"] = "127"
        self.parameter_16_id_107["LED_off"] = "0"
        self.parameter_16_id_107["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_48"]
        self.parameter_16_id_107["snap_to"] = True
        self.parameter_16_id_107["json_id"] = 107
        self.parameter_16_id_107["mapping_name"] = "Parameter 16"
        self.parameter_16_id_107["mapping_type"] = "Parameter"
        self.parameter_16_id_107["parent_json_id"] = 59
        self.parameter_16_id_107["parent_name"] = "parameter_bank_1_id_59"
        self.track_nav_right_id_134 = {}
        self.track_nav_right_id_134["attached_to"] = "midi_cc_ch_2_val_115"
        self.track_nav_right_id_134["module"] = "self"
        self.track_nav_right_id_134["element"] = "scroll_highlight"
        self.track_nav_right_id_134["output_type"] = "func"
        self.track_nav_right_id_134["func_arg"] = "cnfg"
        self.track_nav_right_id_134["tracks_scenes"] = "tracks"
        self.track_nav_right_id_134["ui_listener"] = "tracks"
        self.track_nav_right_id_134["feedback_brain"] = "feedback_highlight_nav"
        self.track_nav_right_id_134["ctrl_type"] = "increment"
        self.track_nav_right_id_134["enc_first"] = 127
        self.track_nav_right_id_134["enc_second"] = 0
        self.track_nav_right_id_134["steps"] = 1
        self.track_nav_right_id_134["switch_type"] = "toggle"
        self.track_nav_right_id_134["LED_mapping_type_needs_feedback"] = "1"
        self.track_nav_right_id_134["LED_feedback"] = "default"
        self.track_nav_right_id_134["LED_feedback_active"] = "1"
        self.track_nav_right_id_134["LED_on"] = "127"
        self.track_nav_right_id_134["LED_off"] = "0"
        self.track_nav_right_id_134["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_115"]
        self.track_nav_right_id_134["json_id"] = 134
        self.track_nav_right_id_134["mapping_name"] = "Track Nav Right"
        self.track_nav_right_id_134["mapping_type"] = "Highlight Navigation"
        self.track_nav_right_id_134["parent_json_id"] = 1
        self.track_nav_right_id_134["parent_name"] = "device_id_1"
    def _mode240_configs(self):
        self.mode_240_configs_map = [
            "parameter_1___osc_1_detune_id_251",
            "parameter_2___osc_1_pos_id_252",
            "parameter_3___osc_1_effect_1_id_253",
            "parameter_4___osc_1_effect_2_id_254",
            "parameter_5___filter_1_type_id_255",
            "parameter_6___filter_1_lphp_id_256",
            "parameter_7___filter_1_freq_id_257",
            "parameter_8___filter_1_res_id_258",
            "parameter_9___amp_attack_id_259",
            "parameter_10___amp_decay_id_260",
            "parameter_11___amp_release_id_261",
            "parameter_12___amp_sustain_id_262",
            "parameter_13___unison_amount_id_263",
            "parameter_14___transpose_id_264",
            "parameter_15___glide_id_265",
            "parameter_16___volume_id_266",
            "track_selector_id_208",
            "device_selector_id_209",
            "parameter_bank_id_250",
            "track_nav_left_copy_id_242",
            "track_nav_right_copy_id_243"]
        self.parameter_1___osc_1_detune_id_251 = {}
        self.parameter_1___osc_1_detune_id_251["attached_to"] = "midi_cc_ch_2_val_21"
        self.parameter_1___osc_1_detune_id_251["track"] = self.track_num(2)
        self.parameter_1___osc_1_detune_id_251["module"] = "self.song().view.selected_track.view.selected_device.parameters[3]"
        self.parameter_1___osc_1_detune_id_251["element"] = "value"
        self.parameter_1___osc_1_detune_id_251["output_type"] = "val"
        self.parameter_1___osc_1_detune_id_251["minimum"] = round(0,2)
        self.parameter_1___osc_1_detune_id_251["maximum"] = round(100,2)
        self.parameter_1___osc_1_detune_id_251["decimal_places"] = 2
        self.parameter_1___osc_1_detune_id_251["ui_listener"] = "value"
        self.parameter_1___osc_1_detune_id_251["feedback_brain"] = "feedback_range"
        self.parameter_1___osc_1_detune_id_251["ctrl_type"] = "absolute"
        self.parameter_1___osc_1_detune_id_251["takeover_mode"] = "Value scaling"
        self.parameter_1___osc_1_detune_id_251["enc_first"] = 0
        self.parameter_1___osc_1_detune_id_251["enc_second"] = 127
        self.parameter_1___osc_1_detune_id_251["reverse_mode"] = False
        self.parameter_1___osc_1_detune_id_251["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_1___osc_1_detune_id_251["LED_feedback"] = "default"
        self.parameter_1___osc_1_detune_id_251["LED_feedback_active"] = "1"
        self.parameter_1___osc_1_detune_id_251["LED_on"] = "127"
        self.parameter_1___osc_1_detune_id_251["LED_off"] = "0"
        self.parameter_1___osc_1_detune_id_251["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_21"]
        self.parameter_1___osc_1_detune_id_251["snap_to"] = True
        self.parameter_1___osc_1_detune_id_251["json_id"] = 251
        self.parameter_1___osc_1_detune_id_251["mapping_name"] = "Parameter 1 - Osc 1 Detune"
        self.parameter_1___osc_1_detune_id_251["mapping_type"] = "Parameter"
        self.parameter_1___osc_1_detune_id_251["parent_json_id"] = 250
        self.parameter_1___osc_1_detune_id_251["parent_name"] = "parameter_bank_id_250"
        self.parameter_2___osc_1_pos_id_252 = {}
        self.parameter_2___osc_1_pos_id_252["attached_to"] = "midi_cc_ch_2_val_22"
        self.parameter_2___osc_1_pos_id_252["track"] = self.track_num(2)
        self.parameter_2___osc_1_pos_id_252["module"] = "self.song().view.selected_track.view.selected_device.parameters[4]"
        self.parameter_2___osc_1_pos_id_252["element"] = "value"
        self.parameter_2___osc_1_pos_id_252["output_type"] = "val"
        self.parameter_2___osc_1_pos_id_252["minimum"] = round(0,2)
        self.parameter_2___osc_1_pos_id_252["maximum"] = round(100,2)
        self.parameter_2___osc_1_pos_id_252["decimal_places"] = 2
        self.parameter_2___osc_1_pos_id_252["ui_listener"] = "value"
        self.parameter_2___osc_1_pos_id_252["feedback_brain"] = "feedback_range"
        self.parameter_2___osc_1_pos_id_252["ctrl_type"] = "absolute"
        self.parameter_2___osc_1_pos_id_252["takeover_mode"] = "Value scaling"
        self.parameter_2___osc_1_pos_id_252["enc_first"] = 0
        self.parameter_2___osc_1_pos_id_252["enc_second"] = 127
        self.parameter_2___osc_1_pos_id_252["reverse_mode"] = False
        self.parameter_2___osc_1_pos_id_252["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_2___osc_1_pos_id_252["LED_feedback"] = "default"
        self.parameter_2___osc_1_pos_id_252["LED_feedback_active"] = "1"
        self.parameter_2___osc_1_pos_id_252["LED_on"] = "127"
        self.parameter_2___osc_1_pos_id_252["LED_off"] = "0"
        self.parameter_2___osc_1_pos_id_252["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_22"]
        self.parameter_2___osc_1_pos_id_252["snap_to"] = True
        self.parameter_2___osc_1_pos_id_252["json_id"] = 252
        self.parameter_2___osc_1_pos_id_252["mapping_name"] = "Parameter 2 - Osc 1 Pos"
        self.parameter_2___osc_1_pos_id_252["mapping_type"] = "Parameter"
        self.parameter_2___osc_1_pos_id_252["parent_json_id"] = 250
        self.parameter_2___osc_1_pos_id_252["parent_name"] = "parameter_bank_id_250"
        self.parameter_3___osc_1_effect_1_id_253 = {}
        self.parameter_3___osc_1_effect_1_id_253["attached_to"] = "midi_cc_ch_2_val_23"
        self.parameter_3___osc_1_effect_1_id_253["track"] = self.track_num(2)
        self.parameter_3___osc_1_effect_1_id_253["module"] = "self.song().view.selected_track.view.selected_device.parameters[5]"
        self.parameter_3___osc_1_effect_1_id_253["element"] = "value"
        self.parameter_3___osc_1_effect_1_id_253["output_type"] = "val"
        self.parameter_3___osc_1_effect_1_id_253["minimum"] = round(0,2)
        self.parameter_3___osc_1_effect_1_id_253["maximum"] = round(100,2)
        self.parameter_3___osc_1_effect_1_id_253["decimal_places"] = 2
        self.parameter_3___osc_1_effect_1_id_253["ui_listener"] = "value"
        self.parameter_3___osc_1_effect_1_id_253["feedback_brain"] = "feedback_range"
        self.parameter_3___osc_1_effect_1_id_253["ctrl_type"] = "absolute"
        self.parameter_3___osc_1_effect_1_id_253["takeover_mode"] = "Value scaling"
        self.parameter_3___osc_1_effect_1_id_253["enc_first"] = 0
        self.parameter_3___osc_1_effect_1_id_253["enc_second"] = 127
        self.parameter_3___osc_1_effect_1_id_253["reverse_mode"] = False
        self.parameter_3___osc_1_effect_1_id_253["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_3___osc_1_effect_1_id_253["LED_feedback"] = "default"
        self.parameter_3___osc_1_effect_1_id_253["LED_feedback_active"] = "1"
        self.parameter_3___osc_1_effect_1_id_253["LED_on"] = "127"
        self.parameter_3___osc_1_effect_1_id_253["LED_off"] = "0"
        self.parameter_3___osc_1_effect_1_id_253["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_23"]
        self.parameter_3___osc_1_effect_1_id_253["snap_to"] = True
        self.parameter_3___osc_1_effect_1_id_253["json_id"] = 253
        self.parameter_3___osc_1_effect_1_id_253["mapping_name"] = "Parameter 3 - Osc 1 Effect 1"
        self.parameter_3___osc_1_effect_1_id_253["mapping_type"] = "Parameter"
        self.parameter_3___osc_1_effect_1_id_253["parent_json_id"] = 250
        self.parameter_3___osc_1_effect_1_id_253["parent_name"] = "parameter_bank_id_250"
        self.parameter_4___osc_1_effect_2_id_254 = {}
        self.parameter_4___osc_1_effect_2_id_254["attached_to"] = "midi_cc_ch_2_val_24"
        self.parameter_4___osc_1_effect_2_id_254["track"] = self.track_num(2)
        self.parameter_4___osc_1_effect_2_id_254["module"] = "self.song().view.selected_track.view.selected_device.parameters[6]"
        self.parameter_4___osc_1_effect_2_id_254["element"] = "value"
        self.parameter_4___osc_1_effect_2_id_254["output_type"] = "val"
        self.parameter_4___osc_1_effect_2_id_254["minimum"] = round(0,2)
        self.parameter_4___osc_1_effect_2_id_254["maximum"] = round(100,2)
        self.parameter_4___osc_1_effect_2_id_254["decimal_places"] = 2
        self.parameter_4___osc_1_effect_2_id_254["ui_listener"] = "value"
        self.parameter_4___osc_1_effect_2_id_254["feedback_brain"] = "feedback_range"
        self.parameter_4___osc_1_effect_2_id_254["ctrl_type"] = "absolute"
        self.parameter_4___osc_1_effect_2_id_254["takeover_mode"] = "Value scaling"
        self.parameter_4___osc_1_effect_2_id_254["enc_first"] = 0
        self.parameter_4___osc_1_effect_2_id_254["enc_second"] = 127
        self.parameter_4___osc_1_effect_2_id_254["reverse_mode"] = False
        self.parameter_4___osc_1_effect_2_id_254["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_4___osc_1_effect_2_id_254["LED_feedback"] = "default"
        self.parameter_4___osc_1_effect_2_id_254["LED_feedback_active"] = "1"
        self.parameter_4___osc_1_effect_2_id_254["LED_on"] = "127"
        self.parameter_4___osc_1_effect_2_id_254["LED_off"] = "0"
        self.parameter_4___osc_1_effect_2_id_254["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_24"]
        self.parameter_4___osc_1_effect_2_id_254["snap_to"] = True
        self.parameter_4___osc_1_effect_2_id_254["json_id"] = 254
        self.parameter_4___osc_1_effect_2_id_254["mapping_name"] = "Parameter 4 - Osc 1 Effect 2"
        self.parameter_4___osc_1_effect_2_id_254["mapping_type"] = "Parameter"
        self.parameter_4___osc_1_effect_2_id_254["parent_json_id"] = 250
        self.parameter_4___osc_1_effect_2_id_254["parent_name"] = "parameter_bank_id_250"
        self.parameter_5___filter_1_type_id_255 = {}
        self.parameter_5___filter_1_type_id_255["attached_to"] = "midi_cc_ch_2_val_25"
        self.parameter_5___filter_1_type_id_255["track"] = self.track_num(2)
        self.parameter_5___filter_1_type_id_255["module"] = "self.song().view.selected_track.view.selected_device.parameters[22]"
        self.parameter_5___filter_1_type_id_255["element"] = "value"
        self.parameter_5___filter_1_type_id_255["output_type"] = "val"
        self.parameter_5___filter_1_type_id_255["minimum"] = round(0,2)
        self.parameter_5___filter_1_type_id_255["maximum"] = round(100,2)
        self.parameter_5___filter_1_type_id_255["decimal_places"] = 2
        self.parameter_5___filter_1_type_id_255["ui_listener"] = "value"
        self.parameter_5___filter_1_type_id_255["feedback_brain"] = "feedback_range"
        self.parameter_5___filter_1_type_id_255["ctrl_type"] = "absolute"
        self.parameter_5___filter_1_type_id_255["takeover_mode"] = "Value scaling"
        self.parameter_5___filter_1_type_id_255["enc_first"] = 0
        self.parameter_5___filter_1_type_id_255["enc_second"] = 127
        self.parameter_5___filter_1_type_id_255["reverse_mode"] = False
        self.parameter_5___filter_1_type_id_255["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_5___filter_1_type_id_255["LED_feedback"] = "default"
        self.parameter_5___filter_1_type_id_255["LED_feedback_active"] = "1"
        self.parameter_5___filter_1_type_id_255["LED_on"] = "127"
        self.parameter_5___filter_1_type_id_255["LED_off"] = "0"
        self.parameter_5___filter_1_type_id_255["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_25"]
        self.parameter_5___filter_1_type_id_255["snap_to"] = True
        self.parameter_5___filter_1_type_id_255["json_id"] = 255
        self.parameter_5___filter_1_type_id_255["mapping_name"] = "Parameter 5 - Filter 1 Type"
        self.parameter_5___filter_1_type_id_255["mapping_type"] = "Parameter"
        self.parameter_5___filter_1_type_id_255["parent_json_id"] = 250
        self.parameter_5___filter_1_type_id_255["parent_name"] = "parameter_bank_id_250"
        self.parameter_6___filter_1_lphp_id_256 = {}
        self.parameter_6___filter_1_lphp_id_256["attached_to"] = "midi_cc_ch_2_val_26"
        self.parameter_6___filter_1_lphp_id_256["track"] = self.track_num(2)
        self.parameter_6___filter_1_lphp_id_256["module"] = "self.song().view.selected_track.view.selected_device.parameters[23]"
        self.parameter_6___filter_1_lphp_id_256["element"] = "value"
        self.parameter_6___filter_1_lphp_id_256["output_type"] = "val"
        self.parameter_6___filter_1_lphp_id_256["minimum"] = round(0,2)
        self.parameter_6___filter_1_lphp_id_256["maximum"] = round(100,2)
        self.parameter_6___filter_1_lphp_id_256["decimal_places"] = 2
        self.parameter_6___filter_1_lphp_id_256["ui_listener"] = "value"
        self.parameter_6___filter_1_lphp_id_256["feedback_brain"] = "feedback_range"
        self.parameter_6___filter_1_lphp_id_256["ctrl_type"] = "absolute"
        self.parameter_6___filter_1_lphp_id_256["takeover_mode"] = "Value scaling"
        self.parameter_6___filter_1_lphp_id_256["enc_first"] = 0
        self.parameter_6___filter_1_lphp_id_256["enc_second"] = 127
        self.parameter_6___filter_1_lphp_id_256["reverse_mode"] = False
        self.parameter_6___filter_1_lphp_id_256["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_6___filter_1_lphp_id_256["LED_feedback"] = "default"
        self.parameter_6___filter_1_lphp_id_256["LED_feedback_active"] = "1"
        self.parameter_6___filter_1_lphp_id_256["LED_on"] = "127"
        self.parameter_6___filter_1_lphp_id_256["LED_off"] = "0"
        self.parameter_6___filter_1_lphp_id_256["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_26"]
        self.parameter_6___filter_1_lphp_id_256["snap_to"] = True
        self.parameter_6___filter_1_lphp_id_256["json_id"] = 256
        self.parameter_6___filter_1_lphp_id_256["mapping_name"] = "Parameter 6 - Filter 1 LP/HP"
        self.parameter_6___filter_1_lphp_id_256["mapping_type"] = "Parameter"
        self.parameter_6___filter_1_lphp_id_256["parent_json_id"] = 250
        self.parameter_6___filter_1_lphp_id_256["parent_name"] = "parameter_bank_id_250"
        self.parameter_7___filter_1_freq_id_257 = {}
        self.parameter_7___filter_1_freq_id_257["attached_to"] = "midi_cc_ch_2_val_27"
        self.parameter_7___filter_1_freq_id_257["track"] = self.track_num(2)
        self.parameter_7___filter_1_freq_id_257["module"] = "self.song().view.selected_track.view.selected_device.parameters[26]"
        self.parameter_7___filter_1_freq_id_257["element"] = "value"
        self.parameter_7___filter_1_freq_id_257["output_type"] = "val"
        self.parameter_7___filter_1_freq_id_257["minimum"] = round(0,2)
        self.parameter_7___filter_1_freq_id_257["maximum"] = round(100,2)
        self.parameter_7___filter_1_freq_id_257["decimal_places"] = 2
        self.parameter_7___filter_1_freq_id_257["ui_listener"] = "value"
        self.parameter_7___filter_1_freq_id_257["feedback_brain"] = "feedback_range"
        self.parameter_7___filter_1_freq_id_257["ctrl_type"] = "absolute"
        self.parameter_7___filter_1_freq_id_257["takeover_mode"] = "Value scaling"
        self.parameter_7___filter_1_freq_id_257["enc_first"] = 0
        self.parameter_7___filter_1_freq_id_257["enc_second"] = 127
        self.parameter_7___filter_1_freq_id_257["reverse_mode"] = False
        self.parameter_7___filter_1_freq_id_257["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_7___filter_1_freq_id_257["LED_feedback"] = "default"
        self.parameter_7___filter_1_freq_id_257["LED_feedback_active"] = "1"
        self.parameter_7___filter_1_freq_id_257["LED_on"] = "127"
        self.parameter_7___filter_1_freq_id_257["LED_off"] = "0"
        self.parameter_7___filter_1_freq_id_257["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_27"]
        self.parameter_7___filter_1_freq_id_257["snap_to"] = True
        self.parameter_7___filter_1_freq_id_257["json_id"] = 257
        self.parameter_7___filter_1_freq_id_257["mapping_name"] = "Parameter 7 - Filter 1 Freq"
        self.parameter_7___filter_1_freq_id_257["mapping_type"] = "Parameter"
        self.parameter_7___filter_1_freq_id_257["parent_json_id"] = 250
        self.parameter_7___filter_1_freq_id_257["parent_name"] = "parameter_bank_id_250"
        self.parameter_8___filter_1_res_id_258 = {}
        self.parameter_8___filter_1_res_id_258["attached_to"] = "midi_cc_ch_2_val_28"
        self.parameter_8___filter_1_res_id_258["track"] = self.track_num(2)
        self.parameter_8___filter_1_res_id_258["module"] = "self.song().view.selected_track.view.selected_device.parameters[27]"
        self.parameter_8___filter_1_res_id_258["element"] = "value"
        self.parameter_8___filter_1_res_id_258["output_type"] = "val"
        self.parameter_8___filter_1_res_id_258["minimum"] = round(0,2)
        self.parameter_8___filter_1_res_id_258["maximum"] = round(100,2)
        self.parameter_8___filter_1_res_id_258["decimal_places"] = 2
        self.parameter_8___filter_1_res_id_258["ui_listener"] = "value"
        self.parameter_8___filter_1_res_id_258["feedback_brain"] = "feedback_range"
        self.parameter_8___filter_1_res_id_258["ctrl_type"] = "absolute"
        self.parameter_8___filter_1_res_id_258["takeover_mode"] = "Value scaling"
        self.parameter_8___filter_1_res_id_258["enc_first"] = 0
        self.parameter_8___filter_1_res_id_258["enc_second"] = 127
        self.parameter_8___filter_1_res_id_258["reverse_mode"] = False
        self.parameter_8___filter_1_res_id_258["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_8___filter_1_res_id_258["LED_feedback"] = "default"
        self.parameter_8___filter_1_res_id_258["LED_feedback_active"] = "1"
        self.parameter_8___filter_1_res_id_258["LED_on"] = "127"
        self.parameter_8___filter_1_res_id_258["LED_off"] = "0"
        self.parameter_8___filter_1_res_id_258["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_28"]
        self.parameter_8___filter_1_res_id_258["snap_to"] = True
        self.parameter_8___filter_1_res_id_258["json_id"] = 258
        self.parameter_8___filter_1_res_id_258["mapping_name"] = "Parameter 8 - Filter 1 Res"
        self.parameter_8___filter_1_res_id_258["mapping_type"] = "Parameter"
        self.parameter_8___filter_1_res_id_258["parent_json_id"] = 250
        self.parameter_8___filter_1_res_id_258["parent_name"] = "parameter_bank_id_250"
        self.parameter_9___amp_attack_id_259 = {}
        self.parameter_9___amp_attack_id_259["attached_to"] = "midi_cc_ch_2_val_29"
        self.parameter_9___amp_attack_id_259["track"] = self.track_num(2)
        self.parameter_9___amp_attack_id_259["module"] = "self.song().view.selected_track.view.selected_device.parameters[39]"
        self.parameter_9___amp_attack_id_259["element"] = "value"
        self.parameter_9___amp_attack_id_259["output_type"] = "val"
        self.parameter_9___amp_attack_id_259["minimum"] = round(0,2)
        self.parameter_9___amp_attack_id_259["maximum"] = round(100,2)
        self.parameter_9___amp_attack_id_259["decimal_places"] = 2
        self.parameter_9___amp_attack_id_259["ui_listener"] = "value"
        self.parameter_9___amp_attack_id_259["feedback_brain"] = "feedback_range"
        self.parameter_9___amp_attack_id_259["ctrl_type"] = "absolute"
        self.parameter_9___amp_attack_id_259["takeover_mode"] = "Value scaling"
        self.parameter_9___amp_attack_id_259["enc_first"] = 0
        self.parameter_9___amp_attack_id_259["enc_second"] = 127
        self.parameter_9___amp_attack_id_259["reverse_mode"] = False
        self.parameter_9___amp_attack_id_259["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_9___amp_attack_id_259["LED_feedback"] = "default"
        self.parameter_9___amp_attack_id_259["LED_feedback_active"] = "1"
        self.parameter_9___amp_attack_id_259["LED_on"] = "127"
        self.parameter_9___amp_attack_id_259["LED_off"] = "0"
        self.parameter_9___amp_attack_id_259["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_29"]
        self.parameter_9___amp_attack_id_259["snap_to"] = True
        self.parameter_9___amp_attack_id_259["json_id"] = 259
        self.parameter_9___amp_attack_id_259["mapping_name"] = "Parameter 9 - Amp Attack"
        self.parameter_9___amp_attack_id_259["mapping_type"] = "Parameter"
        self.parameter_9___amp_attack_id_259["parent_json_id"] = 250
        self.parameter_9___amp_attack_id_259["parent_name"] = "parameter_bank_id_250"
        self.parameter_10___amp_decay_id_260 = {}
        self.parameter_10___amp_decay_id_260["attached_to"] = "midi_cc_ch_2_val_42"
        self.parameter_10___amp_decay_id_260["track"] = self.track_num(2)
        self.parameter_10___amp_decay_id_260["module"] = "self.song().view.selected_track.view.selected_device.parameters[40]"
        self.parameter_10___amp_decay_id_260["element"] = "value"
        self.parameter_10___amp_decay_id_260["output_type"] = "val"
        self.parameter_10___amp_decay_id_260["minimum"] = round(0,2)
        self.parameter_10___amp_decay_id_260["maximum"] = round(100,2)
        self.parameter_10___amp_decay_id_260["decimal_places"] = 2
        self.parameter_10___amp_decay_id_260["ui_listener"] = "value"
        self.parameter_10___amp_decay_id_260["feedback_brain"] = "feedback_range"
        self.parameter_10___amp_decay_id_260["ctrl_type"] = "absolute"
        self.parameter_10___amp_decay_id_260["takeover_mode"] = "Value scaling"
        self.parameter_10___amp_decay_id_260["enc_first"] = 0
        self.parameter_10___amp_decay_id_260["enc_second"] = 127
        self.parameter_10___amp_decay_id_260["reverse_mode"] = False
        self.parameter_10___amp_decay_id_260["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_10___amp_decay_id_260["LED_feedback"] = "default"
        self.parameter_10___amp_decay_id_260["LED_feedback_active"] = "1"
        self.parameter_10___amp_decay_id_260["LED_on"] = "127"
        self.parameter_10___amp_decay_id_260["LED_off"] = "0"
        self.parameter_10___amp_decay_id_260["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_42"]
        self.parameter_10___amp_decay_id_260["snap_to"] = True
        self.parameter_10___amp_decay_id_260["json_id"] = 260
        self.parameter_10___amp_decay_id_260["mapping_name"] = "Parameter 10 - Amp Decay"
        self.parameter_10___amp_decay_id_260["mapping_type"] = "Parameter"
        self.parameter_10___amp_decay_id_260["parent_json_id"] = 250
        self.parameter_10___amp_decay_id_260["parent_name"] = "parameter_bank_id_250"
        self.parameter_11___amp_release_id_261 = {}
        self.parameter_11___amp_release_id_261["attached_to"] = "midi_cc_ch_2_val_43"
        self.parameter_11___amp_release_id_261["track"] = self.track_num(2)
        self.parameter_11___amp_release_id_261["module"] = "self.song().view.selected_track.view.selected_device.parameters[41]"
        self.parameter_11___amp_release_id_261["element"] = "value"
        self.parameter_11___amp_release_id_261["output_type"] = "val"
        self.parameter_11___amp_release_id_261["minimum"] = round(0,2)
        self.parameter_11___amp_release_id_261["maximum"] = round(100,2)
        self.parameter_11___amp_release_id_261["decimal_places"] = 2
        self.parameter_11___amp_release_id_261["ui_listener"] = "value"
        self.parameter_11___amp_release_id_261["feedback_brain"] = "feedback_range"
        self.parameter_11___amp_release_id_261["ctrl_type"] = "absolute"
        self.parameter_11___amp_release_id_261["takeover_mode"] = "Value scaling"
        self.parameter_11___amp_release_id_261["enc_first"] = 0
        self.parameter_11___amp_release_id_261["enc_second"] = 127
        self.parameter_11___amp_release_id_261["reverse_mode"] = False
        self.parameter_11___amp_release_id_261["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_11___amp_release_id_261["LED_feedback"] = "default"
        self.parameter_11___amp_release_id_261["LED_feedback_active"] = "1"
        self.parameter_11___amp_release_id_261["LED_on"] = "127"
        self.parameter_11___amp_release_id_261["LED_off"] = "0"
        self.parameter_11___amp_release_id_261["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_43"]
        self.parameter_11___amp_release_id_261["snap_to"] = True
        self.parameter_11___amp_release_id_261["json_id"] = 261
        self.parameter_11___amp_release_id_261["mapping_name"] = "Parameter 11 - Amp Release"
        self.parameter_11___amp_release_id_261["mapping_type"] = "Parameter"
        self.parameter_11___amp_release_id_261["parent_json_id"] = 250
        self.parameter_11___amp_release_id_261["parent_name"] = "parameter_bank_id_250"
        self.parameter_12___amp_sustain_id_262 = {}
        self.parameter_12___amp_sustain_id_262["attached_to"] = "midi_cc_ch_2_val_44"
        self.parameter_12___amp_sustain_id_262["track"] = self.track_num(2)
        self.parameter_12___amp_sustain_id_262["module"] = "self.song().view.selected_track.view.selected_device.parameters[45]"
        self.parameter_12___amp_sustain_id_262["element"] = "value"
        self.parameter_12___amp_sustain_id_262["output_type"] = "val"
        self.parameter_12___amp_sustain_id_262["minimum"] = round(0,2)
        self.parameter_12___amp_sustain_id_262["maximum"] = round(100,2)
        self.parameter_12___amp_sustain_id_262["decimal_places"] = 2
        self.parameter_12___amp_sustain_id_262["ui_listener"] = "value"
        self.parameter_12___amp_sustain_id_262["feedback_brain"] = "feedback_range"
        self.parameter_12___amp_sustain_id_262["ctrl_type"] = "absolute"
        self.parameter_12___amp_sustain_id_262["takeover_mode"] = "Value scaling"
        self.parameter_12___amp_sustain_id_262["enc_first"] = 0
        self.parameter_12___amp_sustain_id_262["enc_second"] = 127
        self.parameter_12___amp_sustain_id_262["reverse_mode"] = False
        self.parameter_12___amp_sustain_id_262["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_12___amp_sustain_id_262["LED_feedback"] = "default"
        self.parameter_12___amp_sustain_id_262["LED_feedback_active"] = "1"
        self.parameter_12___amp_sustain_id_262["LED_on"] = "127"
        self.parameter_12___amp_sustain_id_262["LED_off"] = "0"
        self.parameter_12___amp_sustain_id_262["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_44"]
        self.parameter_12___amp_sustain_id_262["snap_to"] = True
        self.parameter_12___amp_sustain_id_262["json_id"] = 262
        self.parameter_12___amp_sustain_id_262["mapping_name"] = "Parameter 12 - Amp Sustain"
        self.parameter_12___amp_sustain_id_262["mapping_type"] = "Parameter"
        self.parameter_12___amp_sustain_id_262["parent_json_id"] = 250
        self.parameter_12___amp_sustain_id_262["parent_name"] = "parameter_bank_id_250"
        self.parameter_13___unison_amount_id_263 = {}
        self.parameter_13___unison_amount_id_263["attached_to"] = "midi_cc_ch_2_val_45"
        self.parameter_13___unison_amount_id_263["track"] = self.track_num(2)
        self.parameter_13___unison_amount_id_263["module"] = "self.song().view.selected_track.view.selected_device.parameters[89]"
        self.parameter_13___unison_amount_id_263["element"] = "value"
        self.parameter_13___unison_amount_id_263["output_type"] = "val"
        self.parameter_13___unison_amount_id_263["minimum"] = round(0,2)
        self.parameter_13___unison_amount_id_263["maximum"] = round(100,2)
        self.parameter_13___unison_amount_id_263["decimal_places"] = 2
        self.parameter_13___unison_amount_id_263["ui_listener"] = "value"
        self.parameter_13___unison_amount_id_263["feedback_brain"] = "feedback_range"
        self.parameter_13___unison_amount_id_263["ctrl_type"] = "absolute"
        self.parameter_13___unison_amount_id_263["takeover_mode"] = "Value scaling"
        self.parameter_13___unison_amount_id_263["enc_first"] = 0
        self.parameter_13___unison_amount_id_263["enc_second"] = 127
        self.parameter_13___unison_amount_id_263["reverse_mode"] = False
        self.parameter_13___unison_amount_id_263["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_13___unison_amount_id_263["LED_feedback"] = "default"
        self.parameter_13___unison_amount_id_263["LED_feedback_active"] = "1"
        self.parameter_13___unison_amount_id_263["LED_on"] = "127"
        self.parameter_13___unison_amount_id_263["LED_off"] = "0"
        self.parameter_13___unison_amount_id_263["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_45"]
        self.parameter_13___unison_amount_id_263["snap_to"] = True
        self.parameter_13___unison_amount_id_263["json_id"] = 263
        self.parameter_13___unison_amount_id_263["mapping_name"] = "Parameter 13 - Unison Amount"
        self.parameter_13___unison_amount_id_263["mapping_type"] = "Parameter"
        self.parameter_13___unison_amount_id_263["parent_json_id"] = 250
        self.parameter_13___unison_amount_id_263["parent_name"] = "parameter_bank_id_250"
        self.parameter_14___transpose_id_264 = {}
        self.parameter_14___transpose_id_264["attached_to"] = "midi_cc_ch_2_val_46"
        self.parameter_14___transpose_id_264["track"] = self.track_num(2)
        self.parameter_14___transpose_id_264["module"] = "self.song().view.selected_track.view.selected_device.parameters[90]"
        self.parameter_14___transpose_id_264["element"] = "value"
        self.parameter_14___transpose_id_264["output_type"] = "val"
        self.parameter_14___transpose_id_264["minimum"] = round(0,2)
        self.parameter_14___transpose_id_264["maximum"] = round(100,2)
        self.parameter_14___transpose_id_264["decimal_places"] = 2
        self.parameter_14___transpose_id_264["ui_listener"] = "value"
        self.parameter_14___transpose_id_264["feedback_brain"] = "feedback_range"
        self.parameter_14___transpose_id_264["ctrl_type"] = "absolute"
        self.parameter_14___transpose_id_264["takeover_mode"] = "Value scaling"
        self.parameter_14___transpose_id_264["enc_first"] = 0
        self.parameter_14___transpose_id_264["enc_second"] = 127
        self.parameter_14___transpose_id_264["reverse_mode"] = False
        self.parameter_14___transpose_id_264["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_14___transpose_id_264["LED_feedback"] = "default"
        self.parameter_14___transpose_id_264["LED_feedback_active"] = "1"
        self.parameter_14___transpose_id_264["LED_on"] = "127"
        self.parameter_14___transpose_id_264["LED_off"] = "0"
        self.parameter_14___transpose_id_264["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_46"]
        self.parameter_14___transpose_id_264["snap_to"] = True
        self.parameter_14___transpose_id_264["json_id"] = 264
        self.parameter_14___transpose_id_264["mapping_name"] = "Parameter 14 - Transpose"
        self.parameter_14___transpose_id_264["mapping_type"] = "Parameter"
        self.parameter_14___transpose_id_264["parent_json_id"] = 250
        self.parameter_14___transpose_id_264["parent_name"] = "parameter_bank_id_250"
        self.parameter_15___glide_id_265 = {}
        self.parameter_15___glide_id_265["attached_to"] = "midi_cc_ch_2_val_47"
        self.parameter_15___glide_id_265["track"] = self.track_num(2)
        self.parameter_15___glide_id_265["module"] = "self.song().view.selected_track.view.selected_device.parameters[91]"
        self.parameter_15___glide_id_265["element"] = "value"
        self.parameter_15___glide_id_265["output_type"] = "val"
        self.parameter_15___glide_id_265["minimum"] = round(0,2)
        self.parameter_15___glide_id_265["maximum"] = round(100,2)
        self.parameter_15___glide_id_265["decimal_places"] = 2
        self.parameter_15___glide_id_265["ui_listener"] = "value"
        self.parameter_15___glide_id_265["feedback_brain"] = "feedback_range"
        self.parameter_15___glide_id_265["ctrl_type"] = "absolute"
        self.parameter_15___glide_id_265["takeover_mode"] = "Value scaling"
        self.parameter_15___glide_id_265["enc_first"] = 0
        self.parameter_15___glide_id_265["enc_second"] = 127
        self.parameter_15___glide_id_265["reverse_mode"] = False
        self.parameter_15___glide_id_265["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_15___glide_id_265["LED_feedback"] = "default"
        self.parameter_15___glide_id_265["LED_feedback_active"] = "1"
        self.parameter_15___glide_id_265["LED_on"] = "127"
        self.parameter_15___glide_id_265["LED_off"] = "0"
        self.parameter_15___glide_id_265["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_47"]
        self.parameter_15___glide_id_265["snap_to"] = True
        self.parameter_15___glide_id_265["json_id"] = 265
        self.parameter_15___glide_id_265["mapping_name"] = "Parameter 15 - Glide"
        self.parameter_15___glide_id_265["mapping_type"] = "Parameter"
        self.parameter_15___glide_id_265["parent_json_id"] = 250
        self.parameter_15___glide_id_265["parent_name"] = "parameter_bank_id_250"
        self.parameter_16___volume_id_266 = {}
        self.parameter_16___volume_id_266["attached_to"] = "midi_cc_ch_2_val_48"
        self.parameter_16___volume_id_266["track"] = self.track_num(2)
        self.parameter_16___volume_id_266["module"] = "self.song().view.selected_track.view.selected_device.parameters[92]"
        self.parameter_16___volume_id_266["element"] = "value"
        self.parameter_16___volume_id_266["output_type"] = "val"
        self.parameter_16___volume_id_266["minimum"] = round(0,2)
        self.parameter_16___volume_id_266["maximum"] = round(100,2)
        self.parameter_16___volume_id_266["decimal_places"] = 2
        self.parameter_16___volume_id_266["ui_listener"] = "value"
        self.parameter_16___volume_id_266["feedback_brain"] = "feedback_range"
        self.parameter_16___volume_id_266["ctrl_type"] = "absolute"
        self.parameter_16___volume_id_266["takeover_mode"] = "Value scaling"
        self.parameter_16___volume_id_266["enc_first"] = 0
        self.parameter_16___volume_id_266["enc_second"] = 127
        self.parameter_16___volume_id_266["reverse_mode"] = False
        self.parameter_16___volume_id_266["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_16___volume_id_266["LED_feedback"] = "default"
        self.parameter_16___volume_id_266["LED_feedback_active"] = "1"
        self.parameter_16___volume_id_266["LED_on"] = "127"
        self.parameter_16___volume_id_266["LED_off"] = "0"
        self.parameter_16___volume_id_266["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_48"]
        self.parameter_16___volume_id_266["snap_to"] = True
        self.parameter_16___volume_id_266["json_id"] = 266
        self.parameter_16___volume_id_266["mapping_name"] = "Parameter 16 - Volume"
        self.parameter_16___volume_id_266["mapping_type"] = "Parameter"
        self.parameter_16___volume_id_266["parent_json_id"] = 250
        self.parameter_16___volume_id_266["parent_name"] = "parameter_bank_id_250"
        self.track_selector_id_208 = {}
        self.track_selector_id_208["track"] = self.track_num(2)
        self.track_selector_id_208["module"] = "self.song().view.selected_track"
        self.track_selector_id_208["LED_mapping_type_needs_feedback"] = ""
        self.track_selector_id_208["LED_feedback"] = "custom"
        self.track_selector_id_208["LED_feedback_active"] = ""
        self.track_selector_id_208["LED_on"] = "127"
        self.track_selector_id_208["LED_off"] = "0"
        self.track_selector_id_208["LED_send_feedback_to_selected"] = []
        self.track_selector_id_208["json_id"] = 208
        self.track_selector_id_208["mapping_name"] = "Track Selector"
        self.track_selector_id_208["mapping_type"] = "Track"
        self.track_selector_id_208["parent_json_id"] = 240
        self.track_selector_id_208["parent_name"] = "archetype_mode_2_selfmodes3_id_240"
        self.device_selector_id_209 = {}
        self.device_selector_id_209["track"] = self.track_num(2)
        self.device_selector_id_209["module"] = "self.song().view.selected_track.view.selected_device"
        self.device_selector_id_209["LED_mapping_type_needs_feedback"] = ""
        self.device_selector_id_209["LED_feedback"] = "custom"
        self.device_selector_id_209["LED_feedback_active"] = ""
        self.device_selector_id_209["LED_on"] = "127"
        self.device_selector_id_209["LED_off"] = "0"
        self.device_selector_id_209["LED_send_feedback_to_selected"] = []
        self.device_selector_id_209["json_id"] = 209
        self.device_selector_id_209["mapping_name"] = "Device Selector"
        self.device_selector_id_209["mapping_type"] = "Device"
        self.device_selector_id_209["parent_json_id"] = 208
        self.device_selector_id_209["parent_name"] = "track_selector_id_208"
        self.parameter_bank_id_250 = {}
        self.parameter_bank_id_250["LED_mapping_type_needs_feedback"] = ""
        self.parameter_bank_id_250["LED_feedback"] = "custom"
        self.parameter_bank_id_250["LED_feedback_active"] = ""
        self.parameter_bank_id_250["LED_on"] = "127"
        self.parameter_bank_id_250["LED_off"] = "0"
        self.parameter_bank_id_250["LED_send_feedback_to_selected"] = []
        self.parameter_bank_id_250["json_id"] = 250
        self.parameter_bank_id_250["mapping_name"] = "Parameter Bank"
        self.parameter_bank_id_250["mapping_type"] = "Parameter Bank"
        self.parameter_bank_id_250["parent_json_id"] = 209
        self.parameter_bank_id_250["parent_name"] = "device_selector_id_209"
        self.track_nav_left_copy_id_242 = {}
        self.track_nav_left_copy_id_242["attached_to"] = "midi_cc_ch_2_val_114"
        self.track_nav_left_copy_id_242["module"] = "self"
        self.track_nav_left_copy_id_242["element"] = "scroll_highlight"
        self.track_nav_left_copy_id_242["output_type"] = "func"
        self.track_nav_left_copy_id_242["func_arg"] = "cnfg"
        self.track_nav_left_copy_id_242["tracks_scenes"] = "tracks"
        self.track_nav_left_copy_id_242["ui_listener"] = "tracks"
        self.track_nav_left_copy_id_242["feedback_brain"] = "feedback_highlight_nav"
        self.track_nav_left_copy_id_242["ctrl_type"] = "decrement"
        self.track_nav_left_copy_id_242["enc_first"] = 127
        self.track_nav_left_copy_id_242["enc_second"] = 0
        self.track_nav_left_copy_id_242["steps"] = 1
        self.track_nav_left_copy_id_242["switch_type"] = "toggle"
        self.track_nav_left_copy_id_242["LED_mapping_type_needs_feedback"] = "1"
        self.track_nav_left_copy_id_242["LED_feedback"] = "default"
        self.track_nav_left_copy_id_242["LED_feedback_active"] = "1"
        self.track_nav_left_copy_id_242["LED_on"] = "127"
        self.track_nav_left_copy_id_242["LED_off"] = "0"
        self.track_nav_left_copy_id_242["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_114"]
        self.track_nav_left_copy_id_242["json_id"] = 242
        self.track_nav_left_copy_id_242["mapping_name"] = "Track Nav Left copy"
        self.track_nav_left_copy_id_242["mapping_type"] = "Highlight Navigation"
        self.track_nav_left_copy_id_242["parent_json_id"] = 240
        self.track_nav_left_copy_id_242["parent_name"] = "archetype_mode_2_selfmodes3_id_240"
        self.track_nav_right_copy_id_243 = {}
        self.track_nav_right_copy_id_243["attached_to"] = "midi_cc_ch_2_val_115"
        self.track_nav_right_copy_id_243["module"] = "self"
        self.track_nav_right_copy_id_243["element"] = "scroll_highlight"
        self.track_nav_right_copy_id_243["output_type"] = "func"
        self.track_nav_right_copy_id_243["func_arg"] = "cnfg"
        self.track_nav_right_copy_id_243["tracks_scenes"] = "tracks"
        self.track_nav_right_copy_id_243["ui_listener"] = "tracks"
        self.track_nav_right_copy_id_243["feedback_brain"] = "feedback_highlight_nav"
        self.track_nav_right_copy_id_243["ctrl_type"] = "increment"
        self.track_nav_right_copy_id_243["enc_first"] = 127
        self.track_nav_right_copy_id_243["enc_second"] = 0
        self.track_nav_right_copy_id_243["steps"] = 1
        self.track_nav_right_copy_id_243["switch_type"] = "toggle"
        self.track_nav_right_copy_id_243["LED_mapping_type_needs_feedback"] = "1"
        self.track_nav_right_copy_id_243["LED_feedback"] = "default"
        self.track_nav_right_copy_id_243["LED_feedback_active"] = "1"
        self.track_nav_right_copy_id_243["LED_on"] = "127"
        self.track_nav_right_copy_id_243["LED_off"] = "0"
        self.track_nav_right_copy_id_243["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_115"]
        self.track_nav_right_copy_id_243["json_id"] = 243
        self.track_nav_right_copy_id_243["mapping_name"] = "Track Nav Right copy"
        self.track_nav_right_copy_id_243["mapping_type"] = "Highlight Navigation"
        self.track_nav_right_copy_id_243["parent_json_id"] = 240
        self.track_nav_right_copy_id_243["parent_name"] = "archetype_mode_2_selfmodes3_id_240"
    def _mode87_configs(self):
        self.mode_87_configs_map = [
            "device_selector_2_id_71",
            "parameter_bank_2_id_72",
            "parameter_1_id_73",
            "parameter_2_id_74",
            "parameter_3_id_75",
            "parameter_4_id_76",
            "parameter_5_id_77",
            "parameter_6_id_78",
            "parameter_7_id_79",
            "parameter_8_id_80",
            "track_selector_shift_id_86",
            "mode_selector_shift_id_88",
            "volume_1_id_108",
            "pan_1_id_109",
            "send_1_id_188",
            "send_2_id_189",
            "send_3_id_190",
            "send_4_id_191",
            "send_5_id_192",
            "send_6_id_193",
            "send_1_id_233",
            "send_2_id_234",
            "send_3_id_235",
            "send_4_id_236",
            "send_5_id_237",
            "send_6_id_238"]
        self.device_selector_2_id_71 = {}
        self.device_selector_2_id_71["track"] = self.track_num(2)
        self.device_selector_2_id_71["module"] = "self.song().view.selected_track.devices[0]"
        self.device_selector_2_id_71["LED_mapping_type_needs_feedback"] = ""
        self.device_selector_2_id_71["LED_feedback"] = "custom"
        self.device_selector_2_id_71["LED_feedback_active"] = ""
        self.device_selector_2_id_71["LED_on"] = "127"
        self.device_selector_2_id_71["LED_off"] = "0"
        self.device_selector_2_id_71["LED_send_feedback_to_selected"] = []
        self.device_selector_2_id_71["json_id"] = 71
        self.device_selector_2_id_71["mapping_name"] = "Device Selector 2"
        self.device_selector_2_id_71["mapping_type"] = "Device"
        self.device_selector_2_id_71["parent_json_id"] = 86
        self.device_selector_2_id_71["parent_name"] = "track_selector_shift_id_86"
        self.parameter_bank_2_id_72 = {}
        self.parameter_bank_2_id_72["LED_mapping_type_needs_feedback"] = ""
        self.parameter_bank_2_id_72["LED_feedback"] = "custom"
        self.parameter_bank_2_id_72["LED_feedback_active"] = ""
        self.parameter_bank_2_id_72["LED_on"] = "127"
        self.parameter_bank_2_id_72["LED_off"] = "0"
        self.parameter_bank_2_id_72["LED_send_feedback_to_selected"] = []
        self.parameter_bank_2_id_72["json_id"] = 72
        self.parameter_bank_2_id_72["mapping_name"] = "Parameter Bank 2"
        self.parameter_bank_2_id_72["mapping_type"] = "Parameter Bank"
        self.parameter_bank_2_id_72["parent_json_id"] = 71
        self.parameter_bank_2_id_72["parent_name"] = "device_selector_2_id_71"
        self.parameter_1_id_73 = {}
        self.parameter_1_id_73["attached_to"] = "midi_cc_ch_2_val_21"
        self.parameter_1_id_73["track"] = self.track_num(2)
        self.parameter_1_id_73["module"] = "self.song().view.selected_track.devices[0].parameters[1]"
        self.parameter_1_id_73["element"] = "value"
        self.parameter_1_id_73["output_type"] = "val"
        self.parameter_1_id_73["minimum"] = round(0,2)
        self.parameter_1_id_73["maximum"] = round(100,2)
        self.parameter_1_id_73["decimal_places"] = 2
        self.parameter_1_id_73["ui_listener"] = "value"
        self.parameter_1_id_73["feedback_brain"] = "feedback_range"
        self.parameter_1_id_73["ctrl_type"] = "absolute"
        self.parameter_1_id_73["takeover_mode"] = "Value scaling"
        self.parameter_1_id_73["enc_first"] = 0
        self.parameter_1_id_73["enc_second"] = 127
        self.parameter_1_id_73["reverse_mode"] = False
        self.parameter_1_id_73["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_1_id_73["LED_feedback"] = "default"
        self.parameter_1_id_73["LED_feedback_active"] = "1"
        self.parameter_1_id_73["LED_on"] = "127"
        self.parameter_1_id_73["LED_off"] = "0"
        self.parameter_1_id_73["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_21"]
        self.parameter_1_id_73["snap_to"] = True
        self.parameter_1_id_73["json_id"] = 73
        self.parameter_1_id_73["mapping_name"] = "Parameter 1"
        self.parameter_1_id_73["mapping_type"] = "Parameter"
        self.parameter_1_id_73["parent_json_id"] = 72
        self.parameter_1_id_73["parent_name"] = "parameter_bank_2_id_72"
        self.parameter_2_id_74 = {}
        self.parameter_2_id_74["attached_to"] = "midi_cc_ch_2_val_22"
        self.parameter_2_id_74["track"] = self.track_num(2)
        self.parameter_2_id_74["module"] = "self.song().view.selected_track.devices[0].parameters[2]"
        self.parameter_2_id_74["element"] = "value"
        self.parameter_2_id_74["output_type"] = "val"
        self.parameter_2_id_74["minimum"] = round(0,2)
        self.parameter_2_id_74["maximum"] = round(100,2)
        self.parameter_2_id_74["decimal_places"] = 2
        self.parameter_2_id_74["ui_listener"] = "value"
        self.parameter_2_id_74["feedback_brain"] = "feedback_range"
        self.parameter_2_id_74["ctrl_type"] = "absolute"
        self.parameter_2_id_74["takeover_mode"] = "Value scaling"
        self.parameter_2_id_74["enc_first"] = 0
        self.parameter_2_id_74["enc_second"] = 127
        self.parameter_2_id_74["reverse_mode"] = False
        self.parameter_2_id_74["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_2_id_74["LED_feedback"] = "default"
        self.parameter_2_id_74["LED_feedback_active"] = "1"
        self.parameter_2_id_74["LED_on"] = "127"
        self.parameter_2_id_74["LED_off"] = "0"
        self.parameter_2_id_74["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_22"]
        self.parameter_2_id_74["snap_to"] = True
        self.parameter_2_id_74["json_id"] = 74
        self.parameter_2_id_74["mapping_name"] = "Parameter 2"
        self.parameter_2_id_74["mapping_type"] = "Parameter"
        self.parameter_2_id_74["parent_json_id"] = 72
        self.parameter_2_id_74["parent_name"] = "parameter_bank_2_id_72"
        self.parameter_3_id_75 = {}
        self.parameter_3_id_75["attached_to"] = "midi_cc_ch_2_val_23"
        self.parameter_3_id_75["track"] = self.track_num(2)
        self.parameter_3_id_75["module"] = "self.song().view.selected_track.devices[0].parameters[3]"
        self.parameter_3_id_75["element"] = "value"
        self.parameter_3_id_75["output_type"] = "val"
        self.parameter_3_id_75["minimum"] = round(0,2)
        self.parameter_3_id_75["maximum"] = round(100,2)
        self.parameter_3_id_75["decimal_places"] = 2
        self.parameter_3_id_75["ui_listener"] = "value"
        self.parameter_3_id_75["feedback_brain"] = "feedback_range"
        self.parameter_3_id_75["ctrl_type"] = "absolute"
        self.parameter_3_id_75["takeover_mode"] = "Value scaling"
        self.parameter_3_id_75["enc_first"] = 0
        self.parameter_3_id_75["enc_second"] = 127
        self.parameter_3_id_75["reverse_mode"] = False
        self.parameter_3_id_75["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_3_id_75["LED_feedback"] = "default"
        self.parameter_3_id_75["LED_feedback_active"] = "1"
        self.parameter_3_id_75["LED_on"] = "127"
        self.parameter_3_id_75["LED_off"] = "0"
        self.parameter_3_id_75["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_23"]
        self.parameter_3_id_75["snap_to"] = True
        self.parameter_3_id_75["json_id"] = 75
        self.parameter_3_id_75["mapping_name"] = "Parameter 3"
        self.parameter_3_id_75["mapping_type"] = "Parameter"
        self.parameter_3_id_75["parent_json_id"] = 72
        self.parameter_3_id_75["parent_name"] = "parameter_bank_2_id_72"
        self.parameter_4_id_76 = {}
        self.parameter_4_id_76["attached_to"] = "midi_cc_ch_2_val_24"
        self.parameter_4_id_76["track"] = self.track_num(2)
        self.parameter_4_id_76["module"] = "self.song().view.selected_track.devices[0].parameters[4]"
        self.parameter_4_id_76["element"] = "value"
        self.parameter_4_id_76["output_type"] = "val"
        self.parameter_4_id_76["minimum"] = round(0,2)
        self.parameter_4_id_76["maximum"] = round(100,2)
        self.parameter_4_id_76["decimal_places"] = 2
        self.parameter_4_id_76["ui_listener"] = "value"
        self.parameter_4_id_76["feedback_brain"] = "feedback_range"
        self.parameter_4_id_76["ctrl_type"] = "absolute"
        self.parameter_4_id_76["takeover_mode"] = "Value scaling"
        self.parameter_4_id_76["enc_first"] = 0
        self.parameter_4_id_76["enc_second"] = 127
        self.parameter_4_id_76["reverse_mode"] = False
        self.parameter_4_id_76["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_4_id_76["LED_feedback"] = "default"
        self.parameter_4_id_76["LED_feedback_active"] = "1"
        self.parameter_4_id_76["LED_on"] = "127"
        self.parameter_4_id_76["LED_off"] = "0"
        self.parameter_4_id_76["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_24"]
        self.parameter_4_id_76["snap_to"] = True
        self.parameter_4_id_76["json_id"] = 76
        self.parameter_4_id_76["mapping_name"] = "Parameter 4"
        self.parameter_4_id_76["mapping_type"] = "Parameter"
        self.parameter_4_id_76["parent_json_id"] = 72
        self.parameter_4_id_76["parent_name"] = "parameter_bank_2_id_72"
        self.parameter_5_id_77 = {}
        self.parameter_5_id_77["attached_to"] = "midi_cc_ch_2_val_29"
        self.parameter_5_id_77["track"] = self.track_num(2)
        self.parameter_5_id_77["module"] = "self.song().view.selected_track.devices[0].parameters[5]"
        self.parameter_5_id_77["element"] = "value"
        self.parameter_5_id_77["output_type"] = "val"
        self.parameter_5_id_77["minimum"] = round(0,2)
        self.parameter_5_id_77["maximum"] = round(100,2)
        self.parameter_5_id_77["decimal_places"] = 2
        self.parameter_5_id_77["ui_listener"] = "value"
        self.parameter_5_id_77["feedback_brain"] = "feedback_range"
        self.parameter_5_id_77["ctrl_type"] = "absolute"
        self.parameter_5_id_77["takeover_mode"] = "Value scaling"
        self.parameter_5_id_77["enc_first"] = 0
        self.parameter_5_id_77["enc_second"] = 127
        self.parameter_5_id_77["reverse_mode"] = False
        self.parameter_5_id_77["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_5_id_77["LED_feedback"] = "default"
        self.parameter_5_id_77["LED_feedback_active"] = "1"
        self.parameter_5_id_77["LED_on"] = "127"
        self.parameter_5_id_77["LED_off"] = "0"
        self.parameter_5_id_77["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_29"]
        self.parameter_5_id_77["snap_to"] = True
        self.parameter_5_id_77["json_id"] = 77
        self.parameter_5_id_77["mapping_name"] = "Parameter 5"
        self.parameter_5_id_77["mapping_type"] = "Parameter"
        self.parameter_5_id_77["parent_json_id"] = 72
        self.parameter_5_id_77["parent_name"] = "parameter_bank_2_id_72"
        self.parameter_6_id_78 = {}
        self.parameter_6_id_78["attached_to"] = "midi_cc_ch_2_val_42"
        self.parameter_6_id_78["track"] = self.track_num(2)
        self.parameter_6_id_78["module"] = "self.song().view.selected_track.devices[0].parameters[6]"
        self.parameter_6_id_78["element"] = "value"
        self.parameter_6_id_78["output_type"] = "val"
        self.parameter_6_id_78["minimum"] = round(0,2)
        self.parameter_6_id_78["maximum"] = round(100,2)
        self.parameter_6_id_78["decimal_places"] = 2
        self.parameter_6_id_78["ui_listener"] = "value"
        self.parameter_6_id_78["feedback_brain"] = "feedback_range"
        self.parameter_6_id_78["ctrl_type"] = "absolute"
        self.parameter_6_id_78["takeover_mode"] = "Value scaling"
        self.parameter_6_id_78["enc_first"] = 0
        self.parameter_6_id_78["enc_second"] = 127
        self.parameter_6_id_78["reverse_mode"] = False
        self.parameter_6_id_78["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_6_id_78["LED_feedback"] = "default"
        self.parameter_6_id_78["LED_feedback_active"] = "1"
        self.parameter_6_id_78["LED_on"] = "127"
        self.parameter_6_id_78["LED_off"] = "0"
        self.parameter_6_id_78["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_42"]
        self.parameter_6_id_78["snap_to"] = True
        self.parameter_6_id_78["json_id"] = 78
        self.parameter_6_id_78["mapping_name"] = "Parameter 6"
        self.parameter_6_id_78["mapping_type"] = "Parameter"
        self.parameter_6_id_78["parent_json_id"] = 72
        self.parameter_6_id_78["parent_name"] = "parameter_bank_2_id_72"
        self.parameter_7_id_79 = {}
        self.parameter_7_id_79["attached_to"] = "midi_cc_ch_2_val_43"
        self.parameter_7_id_79["track"] = self.track_num(2)
        self.parameter_7_id_79["module"] = "self.song().view.selected_track.devices[0].parameters[7]"
        self.parameter_7_id_79["element"] = "value"
        self.parameter_7_id_79["output_type"] = "val"
        self.parameter_7_id_79["minimum"] = round(0,2)
        self.parameter_7_id_79["maximum"] = round(100,2)
        self.parameter_7_id_79["decimal_places"] = 2
        self.parameter_7_id_79["ui_listener"] = "value"
        self.parameter_7_id_79["feedback_brain"] = "feedback_range"
        self.parameter_7_id_79["ctrl_type"] = "absolute"
        self.parameter_7_id_79["takeover_mode"] = "Value scaling"
        self.parameter_7_id_79["enc_first"] = 0
        self.parameter_7_id_79["enc_second"] = 127
        self.parameter_7_id_79["reverse_mode"] = False
        self.parameter_7_id_79["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_7_id_79["LED_feedback"] = "default"
        self.parameter_7_id_79["LED_feedback_active"] = "1"
        self.parameter_7_id_79["LED_on"] = "127"
        self.parameter_7_id_79["LED_off"] = "0"
        self.parameter_7_id_79["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_43"]
        self.parameter_7_id_79["snap_to"] = True
        self.parameter_7_id_79["json_id"] = 79
        self.parameter_7_id_79["mapping_name"] = "Parameter 7"
        self.parameter_7_id_79["mapping_type"] = "Parameter"
        self.parameter_7_id_79["parent_json_id"] = 72
        self.parameter_7_id_79["parent_name"] = "parameter_bank_2_id_72"
        self.parameter_8_id_80 = {}
        self.parameter_8_id_80["attached_to"] = "midi_cc_ch_2_val_44"
        self.parameter_8_id_80["track"] = self.track_num(2)
        self.parameter_8_id_80["module"] = "self.song().view.selected_track.devices[0].parameters[8]"
        self.parameter_8_id_80["element"] = "value"
        self.parameter_8_id_80["output_type"] = "val"
        self.parameter_8_id_80["minimum"] = round(0,2)
        self.parameter_8_id_80["maximum"] = round(100,2)
        self.parameter_8_id_80["decimal_places"] = 2
        self.parameter_8_id_80["ui_listener"] = "value"
        self.parameter_8_id_80["feedback_brain"] = "feedback_range"
        self.parameter_8_id_80["ctrl_type"] = "absolute"
        self.parameter_8_id_80["takeover_mode"] = "Value scaling"
        self.parameter_8_id_80["enc_first"] = 0
        self.parameter_8_id_80["enc_second"] = 127
        self.parameter_8_id_80["reverse_mode"] = False
        self.parameter_8_id_80["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_8_id_80["LED_feedback"] = "default"
        self.parameter_8_id_80["LED_feedback_active"] = "1"
        self.parameter_8_id_80["LED_on"] = "127"
        self.parameter_8_id_80["LED_off"] = "0"
        self.parameter_8_id_80["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_44"]
        self.parameter_8_id_80["snap_to"] = True
        self.parameter_8_id_80["json_id"] = 80
        self.parameter_8_id_80["mapping_name"] = "Parameter 8"
        self.parameter_8_id_80["mapping_type"] = "Parameter"
        self.parameter_8_id_80["parent_json_id"] = 72
        self.parameter_8_id_80["parent_name"] = "parameter_bank_2_id_72"
        self.track_selector_shift_id_86 = {}
        self.track_selector_shift_id_86["track"] = self.track_num(2)
        self.track_selector_shift_id_86["module"] = "self.song().view.selected_track"
        self.track_selector_shift_id_86["LED_mapping_type_needs_feedback"] = ""
        self.track_selector_shift_id_86["LED_feedback"] = "custom"
        self.track_selector_shift_id_86["LED_feedback_active"] = ""
        self.track_selector_shift_id_86["LED_on"] = "127"
        self.track_selector_shift_id_86["LED_off"] = "0"
        self.track_selector_shift_id_86["LED_send_feedback_to_selected"] = []
        self.track_selector_shift_id_86["json_id"] = 86
        self.track_selector_shift_id_86["mapping_name"] = "Track Selector Shift"
        self.track_selector_shift_id_86["mapping_type"] = "Track"
        self.track_selector_shift_id_86["parent_json_id"] = 87
        self.track_selector_shift_id_86["parent_name"] = "shift_mode_id_87"
        self.mode_selector_shift_id_88 = {}
        self.mode_selector_shift_id_88["attached_to"] = "midi_note_ch_8_val_9"
        self.mode_selector_shift_id_88["module"] = "self"
        self.mode_selector_shift_id_88["element"] = "set_active_mode"
        self.mode_selector_shift_id_88["output_type"] = "func"
        self.mode_selector_shift_id_88["func_arg"] = "Previous Mode"
        self.mode_selector_shift_id_88["ui_listener"] = "value"
        self.mode_selector_shift_id_88["feedback_brain"] = "feedback_scroll_mode_selector_select"
        self.mode_selector_shift_id_88["ctrl_type"] = "on/off"
        self.mode_selector_shift_id_88["enc_first"] = 0
        self.mode_selector_shift_id_88["enc_second"] = 127
        self.mode_selector_shift_id_88["steps"] = 20
        self.mode_selector_shift_id_88["switch_type"] = "momentary"
        self.mode_selector_shift_id_88["LED_mapping_type_needs_feedback"] = ""
        self.mode_selector_shift_id_88["LED_feedback"] = "default"
        self.mode_selector_shift_id_88["LED_feedback_active"] = "1"
        self.mode_selector_shift_id_88["LED_on"] = "127"
        self.mode_selector_shift_id_88["LED_off"] = "0"
        self.mode_selector_shift_id_88["LED_send_feedback_to_selected"] = ["midi_note_ch_8_val_9"]
        self.mode_selector_shift_id_88["json_id"] = 88
        self.mode_selector_shift_id_88["mapping_name"] = "Mode Selector Shift"
        self.mode_selector_shift_id_88["mapping_type"] = "Mode Selector"
        self.mode_selector_shift_id_88["parent_json_id"] = 87
        self.mode_selector_shift_id_88["parent_name"] = "shift_mode_id_87"
        self.volume_1_id_108 = {}
        self.volume_1_id_108["attached_to"] = "midi_cc_ch_2_val_28"
        self.volume_1_id_108["track"] = self.track_num(2)
        self.volume_1_id_108["module"] = "self.song().view.selected_track.mixer_device.volume"
        self.volume_1_id_108["element"] = "value"
        self.volume_1_id_108["output_type"] = "val"
        self.volume_1_id_108["minimum"] = round(0,2)
        self.volume_1_id_108["maximum"] = round(100,2)
        self.volume_1_id_108["decimal_places"] = 2
        self.volume_1_id_108["ui_listener"] = "value"
        self.volume_1_id_108["feedback_brain"] = "feedback_range"
        self.volume_1_id_108["ctrl_type"] = "absolute"
        self.volume_1_id_108["takeover_mode"] = "Value scaling"
        self.volume_1_id_108["enc_first"] = 0
        self.volume_1_id_108["enc_second"] = 127
        self.volume_1_id_108["reverse_mode"] = False
        self.volume_1_id_108["LED_mapping_type_needs_feedback"] = "1"
        self.volume_1_id_108["LED_feedback"] = "default"
        self.volume_1_id_108["LED_feedback_active"] = "1"
        self.volume_1_id_108["LED_on"] = "127"
        self.volume_1_id_108["LED_off"] = "0"
        self.volume_1_id_108["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_28"]
        self.volume_1_id_108["snap_to"] = True
        self.volume_1_id_108["json_id"] = 108
        self.volume_1_id_108["mapping_name"] = "Volume 1"
        self.volume_1_id_108["mapping_type"] = "Volume"
        self.volume_1_id_108["parent_json_id"] = 86
        self.volume_1_id_108["parent_name"] = "track_selector_shift_id_86"
        self.pan_1_id_109 = {}
        self.pan_1_id_109["attached_to"] = "midi_cc_ch_2_val_48"
        self.pan_1_id_109["track"] = self.track_num(2)
        self.pan_1_id_109["module"] = "self.song().view.selected_track.mixer_device.panning"
        self.pan_1_id_109["element"] = "value"
        self.pan_1_id_109["output_type"] = "val"
        self.pan_1_id_109["minimum"] = round(0,2)
        self.pan_1_id_109["maximum"] = round(100,2)
        self.pan_1_id_109["decimal_places"] = 2
        self.pan_1_id_109["ui_listener"] = "value"
        self.pan_1_id_109["feedback_brain"] = "feedback_range"
        self.pan_1_id_109["ctrl_type"] = "absolute"
        self.pan_1_id_109["takeover_mode"] = "Value scaling"
        self.pan_1_id_109["enc_first"] = 0
        self.pan_1_id_109["enc_second"] = 127
        self.pan_1_id_109["reverse_mode"] = False
        self.pan_1_id_109["LED_mapping_type_needs_feedback"] = "1"
        self.pan_1_id_109["LED_feedback"] = "default"
        self.pan_1_id_109["LED_feedback_active"] = "1"
        self.pan_1_id_109["LED_on"] = "127"
        self.pan_1_id_109["LED_off"] = "0"
        self.pan_1_id_109["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_48"]
        self.pan_1_id_109["snap_to"] = True
        self.pan_1_id_109["json_id"] = 109
        self.pan_1_id_109["mapping_name"] = "Pan 1"
        self.pan_1_id_109["mapping_type"] = "Pan"
        self.pan_1_id_109["parent_json_id"] = 86
        self.pan_1_id_109["parent_name"] = "track_selector_shift_id_86"
        self.send_1_id_188 = {}
        self.send_1_id_188["attached_to"] = "midi_cc_ch_2_val_21"
        self.send_1_id_188["track"] = self.track_num(2)
        self.send_1_id_188["module"] = "self.song().view.selected_track.mixer_device.sends[0]"
        self.send_1_id_188["element"] = "value"
        self.send_1_id_188["output_type"] = "val"
        self.send_1_id_188["minimum"] = round(0,3)
        self.send_1_id_188["maximum"] = round(100,3)
        self.send_1_id_188["decimal_places"] = 3
        self.send_1_id_188["ui_listener"] = "value"
        self.send_1_id_188["feedback_brain"] = "feedback_range"
        self.send_1_id_188["ctrl_type"] = "absolute"
        self.send_1_id_188["takeover_mode"] = "Value scaling"
        self.send_1_id_188["enc_first"] = 0
        self.send_1_id_188["enc_second"] = 127
        self.send_1_id_188["reverse_mode"] = False
        self.send_1_id_188["LED_mapping_type_needs_feedback"] = "1"
        self.send_1_id_188["LED_feedback"] = "default"
        self.send_1_id_188["LED_feedback_active"] = "1"
        self.send_1_id_188["LED_on"] = "127"
        self.send_1_id_188["LED_off"] = "0"
        self.send_1_id_188["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_21"]
        self.send_1_id_188["snap_to"] = True
        self.send_1_id_188["json_id"] = 188
        self.send_1_id_188["mapping_name"] = "Send 1"
        self.send_1_id_188["mapping_type"] = "Send"
        self.send_1_id_188["parent_json_id"] = 187
        self.send_1_id_188["parent_name"] = "sends_1_id_187"
        self.send_2_id_189 = {}
        self.send_2_id_189["attached_to"] = "midi_cc_ch_2_val_21"
        self.send_2_id_189["track"] = self.track_num(2)
        self.send_2_id_189["module"] = "self.song().view.selected_track.mixer_device.sends[1]"
        self.send_2_id_189["element"] = "value"
        self.send_2_id_189["output_type"] = "val"
        self.send_2_id_189["minimum"] = round(0,3)
        self.send_2_id_189["maximum"] = round(100,3)
        self.send_2_id_189["decimal_places"] = 3
        self.send_2_id_189["ui_listener"] = "value"
        self.send_2_id_189["feedback_brain"] = "feedback_range"
        self.send_2_id_189["ctrl_type"] = "absolute"
        self.send_2_id_189["takeover_mode"] = "Value scaling"
        self.send_2_id_189["enc_first"] = 0
        self.send_2_id_189["enc_second"] = 127
        self.send_2_id_189["reverse_mode"] = False
        self.send_2_id_189["LED_mapping_type_needs_feedback"] = "1"
        self.send_2_id_189["LED_feedback"] = "default"
        self.send_2_id_189["LED_feedback_active"] = "1"
        self.send_2_id_189["LED_on"] = "127"
        self.send_2_id_189["LED_off"] = "0"
        self.send_2_id_189["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_21"]
        self.send_2_id_189["snap_to"] = True
        self.send_2_id_189["json_id"] = 189
        self.send_2_id_189["mapping_name"] = "Send 2"
        self.send_2_id_189["mapping_type"] = "Send"
        self.send_2_id_189["parent_json_id"] = 187
        self.send_2_id_189["parent_name"] = "sends_1_id_187"
        self.send_3_id_190 = {}
        self.send_3_id_190["attached_to"] = "midi_cc_ch_2_val_21"
        self.send_3_id_190["track"] = self.track_num(2)
        self.send_3_id_190["module"] = "self.song().view.selected_track.mixer_device.sends[2]"
        self.send_3_id_190["element"] = "value"
        self.send_3_id_190["output_type"] = "val"
        self.send_3_id_190["minimum"] = round(0,3)
        self.send_3_id_190["maximum"] = round(100,3)
        self.send_3_id_190["decimal_places"] = 3
        self.send_3_id_190["ui_listener"] = "value"
        self.send_3_id_190["feedback_brain"] = "feedback_range"
        self.send_3_id_190["ctrl_type"] = "absolute"
        self.send_3_id_190["takeover_mode"] = "Value scaling"
        self.send_3_id_190["enc_first"] = 0
        self.send_3_id_190["enc_second"] = 127
        self.send_3_id_190["reverse_mode"] = False
        self.send_3_id_190["LED_mapping_type_needs_feedback"] = "1"
        self.send_3_id_190["LED_feedback"] = "default"
        self.send_3_id_190["LED_feedback_active"] = "1"
        self.send_3_id_190["LED_on"] = "127"
        self.send_3_id_190["LED_off"] = "0"
        self.send_3_id_190["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_21"]
        self.send_3_id_190["snap_to"] = True
        self.send_3_id_190["json_id"] = 190
        self.send_3_id_190["mapping_name"] = "Send 3"
        self.send_3_id_190["mapping_type"] = "Send"
        self.send_3_id_190["parent_json_id"] = 187
        self.send_3_id_190["parent_name"] = "sends_1_id_187"
        self.send_4_id_191 = {}
        self.send_4_id_191["attached_to"] = "midi_cc_ch_2_val_21"
        self.send_4_id_191["track"] = self.track_num(2)
        self.send_4_id_191["module"] = "self.song().view.selected_track.mixer_device.sends[3]"
        self.send_4_id_191["element"] = "value"
        self.send_4_id_191["output_type"] = "val"
        self.send_4_id_191["minimum"] = round(0,3)
        self.send_4_id_191["maximum"] = round(100,3)
        self.send_4_id_191["decimal_places"] = 3
        self.send_4_id_191["ui_listener"] = "value"
        self.send_4_id_191["feedback_brain"] = "feedback_range"
        self.send_4_id_191["ctrl_type"] = "absolute"
        self.send_4_id_191["takeover_mode"] = "Value scaling"
        self.send_4_id_191["enc_first"] = 0
        self.send_4_id_191["enc_second"] = 127
        self.send_4_id_191["reverse_mode"] = False
        self.send_4_id_191["LED_mapping_type_needs_feedback"] = "1"
        self.send_4_id_191["LED_feedback"] = "default"
        self.send_4_id_191["LED_feedback_active"] = "1"
        self.send_4_id_191["LED_on"] = "127"
        self.send_4_id_191["LED_off"] = "0"
        self.send_4_id_191["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_21"]
        self.send_4_id_191["snap_to"] = True
        self.send_4_id_191["json_id"] = 191
        self.send_4_id_191["mapping_name"] = "Send 4"
        self.send_4_id_191["mapping_type"] = "Send"
        self.send_4_id_191["parent_json_id"] = 187
        self.send_4_id_191["parent_name"] = "sends_1_id_187"
        self.send_5_id_192 = {}
        self.send_5_id_192["attached_to"] = "midi_cc_ch_2_val_21"
        self.send_5_id_192["track"] = self.track_num(2)
        self.send_5_id_192["module"] = "self.song().view.selected_track.mixer_device.sends[4]"
        self.send_5_id_192["element"] = "value"
        self.send_5_id_192["output_type"] = "val"
        self.send_5_id_192["minimum"] = round(0,3)
        self.send_5_id_192["maximum"] = round(100,3)
        self.send_5_id_192["decimal_places"] = 3
        self.send_5_id_192["ui_listener"] = "value"
        self.send_5_id_192["feedback_brain"] = "feedback_range"
        self.send_5_id_192["ctrl_type"] = "absolute"
        self.send_5_id_192["takeover_mode"] = "Value scaling"
        self.send_5_id_192["enc_first"] = 0
        self.send_5_id_192["enc_second"] = 127
        self.send_5_id_192["reverse_mode"] = False
        self.send_5_id_192["LED_mapping_type_needs_feedback"] = "1"
        self.send_5_id_192["LED_feedback"] = "default"
        self.send_5_id_192["LED_feedback_active"] = "1"
        self.send_5_id_192["LED_on"] = "127"
        self.send_5_id_192["LED_off"] = "0"
        self.send_5_id_192["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_21"]
        self.send_5_id_192["snap_to"] = True
        self.send_5_id_192["json_id"] = 192
        self.send_5_id_192["mapping_name"] = "Send 5"
        self.send_5_id_192["mapping_type"] = "Send"
        self.send_5_id_192["parent_json_id"] = 187
        self.send_5_id_192["parent_name"] = "sends_1_id_187"
        self.send_6_id_193 = {}
        self.send_6_id_193["attached_to"] = "midi_cc_ch_2_val_21"
        self.send_6_id_193["track"] = self.track_num(2)
        self.send_6_id_193["module"] = "self.song().view.selected_track.mixer_device.sends[5]"
        self.send_6_id_193["element"] = "value"
        self.send_6_id_193["output_type"] = "val"
        self.send_6_id_193["minimum"] = round(0,3)
        self.send_6_id_193["maximum"] = round(100,3)
        self.send_6_id_193["decimal_places"] = 3
        self.send_6_id_193["ui_listener"] = "value"
        self.send_6_id_193["feedback_brain"] = "feedback_range"
        self.send_6_id_193["ctrl_type"] = "absolute"
        self.send_6_id_193["takeover_mode"] = "Value scaling"
        self.send_6_id_193["enc_first"] = 0
        self.send_6_id_193["enc_second"] = 127
        self.send_6_id_193["reverse_mode"] = False
        self.send_6_id_193["LED_mapping_type_needs_feedback"] = "1"
        self.send_6_id_193["LED_feedback"] = "default"
        self.send_6_id_193["LED_feedback_active"] = "1"
        self.send_6_id_193["LED_on"] = "127"
        self.send_6_id_193["LED_off"] = "0"
        self.send_6_id_193["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_21"]
        self.send_6_id_193["snap_to"] = True
        self.send_6_id_193["json_id"] = 193
        self.send_6_id_193["mapping_name"] = "Send 6"
        self.send_6_id_193["mapping_type"] = "Send"
        self.send_6_id_193["parent_json_id"] = 187
        self.send_6_id_193["parent_name"] = "sends_1_id_187"
        self.send_1_id_233 = {}
        self.send_1_id_233["attached_to"] = "midi_cc_ch_2_val_25"
        self.send_1_id_233["track"] = self.track_num(2)
        self.send_1_id_233["module"] = "self.song().view.selected_track.mixer_device.sends[0]"
        self.send_1_id_233["element"] = "value"
        self.send_1_id_233["output_type"] = "val"
        self.send_1_id_233["minimum"] = round(0,3)
        self.send_1_id_233["maximum"] = round(100,3)
        self.send_1_id_233["decimal_places"] = 3
        self.send_1_id_233["ui_listener"] = "value"
        self.send_1_id_233["feedback_brain"] = "feedback_range"
        self.send_1_id_233["ctrl_type"] = "absolute"
        self.send_1_id_233["takeover_mode"] = "Value scaling"
        self.send_1_id_233["enc_first"] = 0
        self.send_1_id_233["enc_second"] = 127
        self.send_1_id_233["reverse_mode"] = False
        self.send_1_id_233["LED_mapping_type_needs_feedback"] = "1"
        self.send_1_id_233["LED_feedback"] = "default"
        self.send_1_id_233["LED_feedback_active"] = "1"
        self.send_1_id_233["LED_on"] = "127"
        self.send_1_id_233["LED_off"] = "0"
        self.send_1_id_233["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_25"]
        self.send_1_id_233["snap_to"] = True
        self.send_1_id_233["json_id"] = 233
        self.send_1_id_233["mapping_name"] = "Send 1"
        self.send_1_id_233["mapping_type"] = "Send"
        self.send_1_id_233["parent_json_id"] = 232
        self.send_1_id_233["parent_name"] = "sends_2_id_232"
        self.send_2_id_234 = {}
        self.send_2_id_234["attached_to"] = "midi_cc_ch_2_val_26"
        self.send_2_id_234["track"] = self.track_num(2)
        self.send_2_id_234["module"] = "self.song().view.selected_track.mixer_device.sends[1]"
        self.send_2_id_234["element"] = "value"
        self.send_2_id_234["output_type"] = "val"
        self.send_2_id_234["minimum"] = round(0,3)
        self.send_2_id_234["maximum"] = round(100,3)
        self.send_2_id_234["decimal_places"] = 3
        self.send_2_id_234["ui_listener"] = "value"
        self.send_2_id_234["feedback_brain"] = "feedback_range"
        self.send_2_id_234["ctrl_type"] = "absolute"
        self.send_2_id_234["takeover_mode"] = "Value scaling"
        self.send_2_id_234["enc_first"] = 0
        self.send_2_id_234["enc_second"] = 127
        self.send_2_id_234["reverse_mode"] = False
        self.send_2_id_234["LED_mapping_type_needs_feedback"] = "1"
        self.send_2_id_234["LED_feedback"] = "default"
        self.send_2_id_234["LED_feedback_active"] = "1"
        self.send_2_id_234["LED_on"] = "127"
        self.send_2_id_234["LED_off"] = "0"
        self.send_2_id_234["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_26"]
        self.send_2_id_234["snap_to"] = True
        self.send_2_id_234["json_id"] = 234
        self.send_2_id_234["mapping_name"] = "Send 2"
        self.send_2_id_234["mapping_type"] = "Send"
        self.send_2_id_234["parent_json_id"] = 232
        self.send_2_id_234["parent_name"] = "sends_2_id_232"
        self.send_3_id_235 = {}
        self.send_3_id_235["attached_to"] = "midi_cc_ch_2_val_27"
        self.send_3_id_235["track"] = self.track_num(2)
        self.send_3_id_235["module"] = "self.song().view.selected_track.mixer_device.sends[2]"
        self.send_3_id_235["element"] = "value"
        self.send_3_id_235["output_type"] = "val"
        self.send_3_id_235["minimum"] = round(0,3)
        self.send_3_id_235["maximum"] = round(100,3)
        self.send_3_id_235["decimal_places"] = 3
        self.send_3_id_235["ui_listener"] = "value"
        self.send_3_id_235["feedback_brain"] = "feedback_range"
        self.send_3_id_235["ctrl_type"] = "absolute"
        self.send_3_id_235["takeover_mode"] = "Value scaling"
        self.send_3_id_235["enc_first"] = 0
        self.send_3_id_235["enc_second"] = 127
        self.send_3_id_235["reverse_mode"] = False
        self.send_3_id_235["LED_mapping_type_needs_feedback"] = "1"
        self.send_3_id_235["LED_feedback"] = "default"
        self.send_3_id_235["LED_feedback_active"] = "1"
        self.send_3_id_235["LED_on"] = "127"
        self.send_3_id_235["LED_off"] = "0"
        self.send_3_id_235["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_27"]
        self.send_3_id_235["snap_to"] = True
        self.send_3_id_235["json_id"] = 235
        self.send_3_id_235["mapping_name"] = "Send 3"
        self.send_3_id_235["mapping_type"] = "Send"
        self.send_3_id_235["parent_json_id"] = 232
        self.send_3_id_235["parent_name"] = "sends_2_id_232"
        self.send_4_id_236 = {}
        self.send_4_id_236["attached_to"] = "midi_cc_ch_2_val_45"
        self.send_4_id_236["track"] = self.track_num(2)
        self.send_4_id_236["module"] = "self.song().view.selected_track.mixer_device.sends[3]"
        self.send_4_id_236["element"] = "value"
        self.send_4_id_236["output_type"] = "val"
        self.send_4_id_236["minimum"] = round(0,3)
        self.send_4_id_236["maximum"] = round(100,3)
        self.send_4_id_236["decimal_places"] = 3
        self.send_4_id_236["ui_listener"] = "value"
        self.send_4_id_236["feedback_brain"] = "feedback_range"
        self.send_4_id_236["ctrl_type"] = "absolute"
        self.send_4_id_236["takeover_mode"] = "Value scaling"
        self.send_4_id_236["enc_first"] = 0
        self.send_4_id_236["enc_second"] = 127
        self.send_4_id_236["reverse_mode"] = False
        self.send_4_id_236["LED_mapping_type_needs_feedback"] = "1"
        self.send_4_id_236["LED_feedback"] = "default"
        self.send_4_id_236["LED_feedback_active"] = "1"
        self.send_4_id_236["LED_on"] = "127"
        self.send_4_id_236["LED_off"] = "0"
        self.send_4_id_236["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_45"]
        self.send_4_id_236["snap_to"] = True
        self.send_4_id_236["json_id"] = 236
        self.send_4_id_236["mapping_name"] = "Send 4"
        self.send_4_id_236["mapping_type"] = "Send"
        self.send_4_id_236["parent_json_id"] = 232
        self.send_4_id_236["parent_name"] = "sends_2_id_232"
        self.send_5_id_237 = {}
        self.send_5_id_237["attached_to"] = "midi_cc_ch_2_val_46"
        self.send_5_id_237["track"] = self.track_num(2)
        self.send_5_id_237["module"] = "self.song().view.selected_track.mixer_device.sends[4]"
        self.send_5_id_237["element"] = "value"
        self.send_5_id_237["output_type"] = "val"
        self.send_5_id_237["minimum"] = round(0,3)
        self.send_5_id_237["maximum"] = round(100,3)
        self.send_5_id_237["decimal_places"] = 3
        self.send_5_id_237["ui_listener"] = "value"
        self.send_5_id_237["feedback_brain"] = "feedback_range"
        self.send_5_id_237["ctrl_type"] = "absolute"
        self.send_5_id_237["takeover_mode"] = "Value scaling"
        self.send_5_id_237["enc_first"] = 0
        self.send_5_id_237["enc_second"] = 127
        self.send_5_id_237["reverse_mode"] = False
        self.send_5_id_237["LED_mapping_type_needs_feedback"] = "1"
        self.send_5_id_237["LED_feedback"] = "default"
        self.send_5_id_237["LED_feedback_active"] = "1"
        self.send_5_id_237["LED_on"] = "127"
        self.send_5_id_237["LED_off"] = "0"
        self.send_5_id_237["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_46"]
        self.send_5_id_237["snap_to"] = True
        self.send_5_id_237["json_id"] = 237
        self.send_5_id_237["mapping_name"] = "Send 5"
        self.send_5_id_237["mapping_type"] = "Send"
        self.send_5_id_237["parent_json_id"] = 232
        self.send_5_id_237["parent_name"] = "sends_2_id_232"
        self.send_6_id_238 = {}
        self.send_6_id_238["attached_to"] = "midi_cc_ch_2_val_47"
        self.send_6_id_238["track"] = self.track_num(2)
        self.send_6_id_238["module"] = "self.song().view.selected_track.mixer_device.sends[5]"
        self.send_6_id_238["element"] = "value"
        self.send_6_id_238["output_type"] = "val"
        self.send_6_id_238["minimum"] = round(0,3)
        self.send_6_id_238["maximum"] = round(100,3)
        self.send_6_id_238["decimal_places"] = 3
        self.send_6_id_238["ui_listener"] = "value"
        self.send_6_id_238["feedback_brain"] = "feedback_range"
        self.send_6_id_238["ctrl_type"] = "absolute"
        self.send_6_id_238["takeover_mode"] = "Value scaling"
        self.send_6_id_238["enc_first"] = 0
        self.send_6_id_238["enc_second"] = 127
        self.send_6_id_238["reverse_mode"] = False
        self.send_6_id_238["LED_mapping_type_needs_feedback"] = "1"
        self.send_6_id_238["LED_feedback"] = "default"
        self.send_6_id_238["LED_feedback_active"] = "1"
        self.send_6_id_238["LED_on"] = "127"
        self.send_6_id_238["LED_off"] = "0"
        self.send_6_id_238["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_47"]
        self.send_6_id_238["snap_to"] = True
        self.send_6_id_238["json_id"] = 238
        self.send_6_id_238["mapping_name"] = "Send 6"
        self.send_6_id_238["mapping_type"] = "Send"
        self.send_6_id_238["parent_json_id"] = 232
        self.send_6_id_238["parent_name"] = "sends_2_id_232"
    def _mode268_configs(self):
        self.mode_268_configs_map = [
            "track_selector_id_270",
            "device_selector_id_271",
            "parameter_bank_id_272",
            "parameter_1___osc_1_transp_id_273",
            "parameter_2___osc_1_detune_id_274",
            "parameter_3___osc_1_pos_id_275",
            "parameter_4___osc_1_effect_1_id_276",
            "parameter_5___amp_attack_id_277",
            "parameter_6___amp_decay_id_278",
            "parameter_7___amp_sustain_id_279",
            "parameter_8___amp_release_id_280",
            "parameter_9___filter_1_freq_id_281",
            "parameter_10___filter_1_res_id_282",
            "parameter_11___filter_1_drive_id_283",
            "parameter_12___filter_2_freq_id_284",
            "parameter_13___transpose_id_285",
            "parameter_14___unison_amount_id_286",
            "parameter_15___glide_id_287",
            "parameter_16___volume_id_288",
            "track_nav_left_copy_id_289",
            "track_nav_right_copy_id_290"]
        self.track_selector_id_270 = {}
        self.track_selector_id_270["track"] = self.track_num(2)
        self.track_selector_id_270["module"] = "self.song().view.selected_track"
        self.track_selector_id_270["LED_mapping_type_needs_feedback"] = ""
        self.track_selector_id_270["LED_feedback"] = "custom"
        self.track_selector_id_270["LED_feedback_active"] = ""
        self.track_selector_id_270["LED_on"] = "127"
        self.track_selector_id_270["LED_off"] = "0"
        self.track_selector_id_270["LED_send_feedback_to_selected"] = []
        self.track_selector_id_270["json_id"] = 270
        self.track_selector_id_270["mapping_name"] = "Track Selector"
        self.track_selector_id_270["mapping_type"] = "Track"
        self.track_selector_id_270["parent_json_id"] = 268
        self.track_selector_id_270["parent_name"] = "device___wavetable_mode3_selfmodes4_id_268"
        self.device_selector_id_271 = {}
        self.device_selector_id_271["track"] = self.track_num(2)
        self.device_selector_id_271["module"] = "self.song().view.selected_track.view.selected_device"
        self.device_selector_id_271["LED_mapping_type_needs_feedback"] = ""
        self.device_selector_id_271["LED_feedback"] = "custom"
        self.device_selector_id_271["LED_feedback_active"] = ""
        self.device_selector_id_271["LED_on"] = "127"
        self.device_selector_id_271["LED_off"] = "0"
        self.device_selector_id_271["LED_send_feedback_to_selected"] = []
        self.device_selector_id_271["json_id"] = 271
        self.device_selector_id_271["mapping_name"] = "Device Selector"
        self.device_selector_id_271["mapping_type"] = "Device"
        self.device_selector_id_271["parent_json_id"] = 270
        self.device_selector_id_271["parent_name"] = "track_selector_id_270"
        self.parameter_bank_id_272 = {}
        self.parameter_bank_id_272["LED_mapping_type_needs_feedback"] = ""
        self.parameter_bank_id_272["LED_feedback"] = "custom"
        self.parameter_bank_id_272["LED_feedback_active"] = ""
        self.parameter_bank_id_272["LED_on"] = "127"
        self.parameter_bank_id_272["LED_off"] = "0"
        self.parameter_bank_id_272["LED_send_feedback_to_selected"] = []
        self.parameter_bank_id_272["json_id"] = 272
        self.parameter_bank_id_272["mapping_name"] = "Parameter Bank"
        self.parameter_bank_id_272["mapping_type"] = "Parameter Bank"
        self.parameter_bank_id_272["parent_json_id"] = 271
        self.parameter_bank_id_272["parent_name"] = "device_selector_id_271"
        self.parameter_1___osc_1_transp_id_273 = {}
        self.parameter_1___osc_1_transp_id_273["attached_to"] = "midi_cc_ch_2_val_21"
        self.parameter_1___osc_1_transp_id_273["track"] = self.track_num(2)
        self.parameter_1___osc_1_transp_id_273["module"] = "self.song().view.selected_track.view.selected_device.parameters[2]"
        self.parameter_1___osc_1_transp_id_273["element"] = "value"
        self.parameter_1___osc_1_transp_id_273["output_type"] = "val"
        self.parameter_1___osc_1_transp_id_273["minimum"] = round(0,2)
        self.parameter_1___osc_1_transp_id_273["maximum"] = round(100,2)
        self.parameter_1___osc_1_transp_id_273["decimal_places"] = 2
        self.parameter_1___osc_1_transp_id_273["ui_listener"] = "value"
        self.parameter_1___osc_1_transp_id_273["feedback_brain"] = "feedback_range"
        self.parameter_1___osc_1_transp_id_273["ctrl_type"] = "absolute"
        self.parameter_1___osc_1_transp_id_273["takeover_mode"] = "Value scaling"
        self.parameter_1___osc_1_transp_id_273["enc_first"] = 0
        self.parameter_1___osc_1_transp_id_273["enc_second"] = 127
        self.parameter_1___osc_1_transp_id_273["reverse_mode"] = False
        self.parameter_1___osc_1_transp_id_273["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_1___osc_1_transp_id_273["LED_feedback"] = "default"
        self.parameter_1___osc_1_transp_id_273["LED_feedback_active"] = "1"
        self.parameter_1___osc_1_transp_id_273["LED_on"] = "127"
        self.parameter_1___osc_1_transp_id_273["LED_off"] = "0"
        self.parameter_1___osc_1_transp_id_273["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_21"]
        self.parameter_1___osc_1_transp_id_273["snap_to"] = True
        self.parameter_1___osc_1_transp_id_273["json_id"] = 273
        self.parameter_1___osc_1_transp_id_273["mapping_name"] = "Parameter 1 - Osc 1 Transp"
        self.parameter_1___osc_1_transp_id_273["mapping_type"] = "Parameter"
        self.parameter_1___osc_1_transp_id_273["parent_json_id"] = 272
        self.parameter_1___osc_1_transp_id_273["parent_name"] = "parameter_bank_id_272"
        self.parameter_2___osc_1_detune_id_274 = {}
        self.parameter_2___osc_1_detune_id_274["attached_to"] = "midi_cc_ch_2_val_22"
        self.parameter_2___osc_1_detune_id_274["track"] = self.track_num(2)
        self.parameter_2___osc_1_detune_id_274["module"] = "self.song().view.selected_track.view.selected_device.parameters[3]"
        self.parameter_2___osc_1_detune_id_274["element"] = "value"
        self.parameter_2___osc_1_detune_id_274["output_type"] = "val"
        self.parameter_2___osc_1_detune_id_274["minimum"] = round(0,2)
        self.parameter_2___osc_1_detune_id_274["maximum"] = round(100,2)
        self.parameter_2___osc_1_detune_id_274["decimal_places"] = 2
        self.parameter_2___osc_1_detune_id_274["ui_listener"] = "value"
        self.parameter_2___osc_1_detune_id_274["feedback_brain"] = "feedback_range"
        self.parameter_2___osc_1_detune_id_274["ctrl_type"] = "absolute"
        self.parameter_2___osc_1_detune_id_274["takeover_mode"] = "Value scaling"
        self.parameter_2___osc_1_detune_id_274["enc_first"] = 0
        self.parameter_2___osc_1_detune_id_274["enc_second"] = 127
        self.parameter_2___osc_1_detune_id_274["reverse_mode"] = False
        self.parameter_2___osc_1_detune_id_274["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_2___osc_1_detune_id_274["LED_feedback"] = "default"
        self.parameter_2___osc_1_detune_id_274["LED_feedback_active"] = "1"
        self.parameter_2___osc_1_detune_id_274["LED_on"] = "127"
        self.parameter_2___osc_1_detune_id_274["LED_off"] = "0"
        self.parameter_2___osc_1_detune_id_274["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_22"]
        self.parameter_2___osc_1_detune_id_274["snap_to"] = True
        self.parameter_2___osc_1_detune_id_274["json_id"] = 274
        self.parameter_2___osc_1_detune_id_274["mapping_name"] = "Parameter 2 - Osc 1 Detune"
        self.parameter_2___osc_1_detune_id_274["mapping_type"] = "Parameter"
        self.parameter_2___osc_1_detune_id_274["parent_json_id"] = 272
        self.parameter_2___osc_1_detune_id_274["parent_name"] = "parameter_bank_id_272"
        self.parameter_3___osc_1_pos_id_275 = {}
        self.parameter_3___osc_1_pos_id_275["attached_to"] = "midi_cc_ch_2_val_23"
        self.parameter_3___osc_1_pos_id_275["track"] = self.track_num(2)
        self.parameter_3___osc_1_pos_id_275["module"] = "self.song().view.selected_track.view.selected_device.parameters[4]"
        self.parameter_3___osc_1_pos_id_275["element"] = "value"
        self.parameter_3___osc_1_pos_id_275["output_type"] = "val"
        self.parameter_3___osc_1_pos_id_275["minimum"] = round(0,2)
        self.parameter_3___osc_1_pos_id_275["maximum"] = round(100,2)
        self.parameter_3___osc_1_pos_id_275["decimal_places"] = 2
        self.parameter_3___osc_1_pos_id_275["ui_listener"] = "value"
        self.parameter_3___osc_1_pos_id_275["feedback_brain"] = "feedback_range"
        self.parameter_3___osc_1_pos_id_275["ctrl_type"] = "absolute"
        self.parameter_3___osc_1_pos_id_275["takeover_mode"] = "Value scaling"
        self.parameter_3___osc_1_pos_id_275["enc_first"] = 0
        self.parameter_3___osc_1_pos_id_275["enc_second"] = 127
        self.parameter_3___osc_1_pos_id_275["reverse_mode"] = False
        self.parameter_3___osc_1_pos_id_275["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_3___osc_1_pos_id_275["LED_feedback"] = "default"
        self.parameter_3___osc_1_pos_id_275["LED_feedback_active"] = "1"
        self.parameter_3___osc_1_pos_id_275["LED_on"] = "127"
        self.parameter_3___osc_1_pos_id_275["LED_off"] = "0"
        self.parameter_3___osc_1_pos_id_275["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_23"]
        self.parameter_3___osc_1_pos_id_275["snap_to"] = True
        self.parameter_3___osc_1_pos_id_275["json_id"] = 275
        self.parameter_3___osc_1_pos_id_275["mapping_name"] = "Parameter 3 - Osc 1 Pos"
        self.parameter_3___osc_1_pos_id_275["mapping_type"] = "Parameter"
        self.parameter_3___osc_1_pos_id_275["parent_json_id"] = 272
        self.parameter_3___osc_1_pos_id_275["parent_name"] = "parameter_bank_id_272"
        self.parameter_4___osc_1_effect_1_id_276 = {}
        self.parameter_4___osc_1_effect_1_id_276["attached_to"] = "midi_cc_ch_2_val_24"
        self.parameter_4___osc_1_effect_1_id_276["track"] = self.track_num(2)
        self.parameter_4___osc_1_effect_1_id_276["module"] = "self.song().view.selected_track.view.selected_device.parameters[5]"
        self.parameter_4___osc_1_effect_1_id_276["element"] = "value"
        self.parameter_4___osc_1_effect_1_id_276["output_type"] = "val"
        self.parameter_4___osc_1_effect_1_id_276["minimum"] = round(0,2)
        self.parameter_4___osc_1_effect_1_id_276["maximum"] = round(100,2)
        self.parameter_4___osc_1_effect_1_id_276["decimal_places"] = 2
        self.parameter_4___osc_1_effect_1_id_276["ui_listener"] = "value"
        self.parameter_4___osc_1_effect_1_id_276["feedback_brain"] = "feedback_range"
        self.parameter_4___osc_1_effect_1_id_276["ctrl_type"] = "absolute"
        self.parameter_4___osc_1_effect_1_id_276["takeover_mode"] = "Value scaling"
        self.parameter_4___osc_1_effect_1_id_276["enc_first"] = 0
        self.parameter_4___osc_1_effect_1_id_276["enc_second"] = 127
        self.parameter_4___osc_1_effect_1_id_276["reverse_mode"] = False
        self.parameter_4___osc_1_effect_1_id_276["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_4___osc_1_effect_1_id_276["LED_feedback"] = "default"
        self.parameter_4___osc_1_effect_1_id_276["LED_feedback_active"] = "1"
        self.parameter_4___osc_1_effect_1_id_276["LED_on"] = "127"
        self.parameter_4___osc_1_effect_1_id_276["LED_off"] = "0"
        self.parameter_4___osc_1_effect_1_id_276["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_24"]
        self.parameter_4___osc_1_effect_1_id_276["snap_to"] = True
        self.parameter_4___osc_1_effect_1_id_276["json_id"] = 276
        self.parameter_4___osc_1_effect_1_id_276["mapping_name"] = "Parameter 4 - Osc 1 Effect 1"
        self.parameter_4___osc_1_effect_1_id_276["mapping_type"] = "Parameter"
        self.parameter_4___osc_1_effect_1_id_276["parent_json_id"] = 272
        self.parameter_4___osc_1_effect_1_id_276["parent_name"] = "parameter_bank_id_272"
        self.parameter_5___amp_attack_id_277 = {}
        self.parameter_5___amp_attack_id_277["attached_to"] = "midi_cc_ch_2_val_25"
        self.parameter_5___amp_attack_id_277["track"] = self.track_num(2)
        self.parameter_5___amp_attack_id_277["module"] = "self.song().view.selected_track.view.selected_device.parameters[39]"
        self.parameter_5___amp_attack_id_277["element"] = "value"
        self.parameter_5___amp_attack_id_277["output_type"] = "val"
        self.parameter_5___amp_attack_id_277["minimum"] = round(0,2)
        self.parameter_5___amp_attack_id_277["maximum"] = round(100,2)
        self.parameter_5___amp_attack_id_277["decimal_places"] = 2
        self.parameter_5___amp_attack_id_277["ui_listener"] = "value"
        self.parameter_5___amp_attack_id_277["feedback_brain"] = "feedback_range"
        self.parameter_5___amp_attack_id_277["ctrl_type"] = "absolute"
        self.parameter_5___amp_attack_id_277["takeover_mode"] = "Value scaling"
        self.parameter_5___amp_attack_id_277["enc_first"] = 0
        self.parameter_5___amp_attack_id_277["enc_second"] = 127
        self.parameter_5___amp_attack_id_277["reverse_mode"] = False
        self.parameter_5___amp_attack_id_277["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_5___amp_attack_id_277["LED_feedback"] = "default"
        self.parameter_5___amp_attack_id_277["LED_feedback_active"] = "1"
        self.parameter_5___amp_attack_id_277["LED_on"] = "127"
        self.parameter_5___amp_attack_id_277["LED_off"] = "0"
        self.parameter_5___amp_attack_id_277["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_25"]
        self.parameter_5___amp_attack_id_277["snap_to"] = True
        self.parameter_5___amp_attack_id_277["json_id"] = 277
        self.parameter_5___amp_attack_id_277["mapping_name"] = "Parameter 5 - Amp Attack"
        self.parameter_5___amp_attack_id_277["mapping_type"] = "Parameter"
        self.parameter_5___amp_attack_id_277["parent_json_id"] = 272
        self.parameter_5___amp_attack_id_277["parent_name"] = "parameter_bank_id_272"
        self.parameter_6___amp_decay_id_278 = {}
        self.parameter_6___amp_decay_id_278["attached_to"] = "midi_cc_ch_2_val_26"
        self.parameter_6___amp_decay_id_278["track"] = self.track_num(2)
        self.parameter_6___amp_decay_id_278["module"] = "self.song().view.selected_track.view.selected_device.parameters[40]"
        self.parameter_6___amp_decay_id_278["element"] = "value"
        self.parameter_6___amp_decay_id_278["output_type"] = "val"
        self.parameter_6___amp_decay_id_278["minimum"] = round(0,2)
        self.parameter_6___amp_decay_id_278["maximum"] = round(100,2)
        self.parameter_6___amp_decay_id_278["decimal_places"] = 2
        self.parameter_6___amp_decay_id_278["ui_listener"] = "value"
        self.parameter_6___amp_decay_id_278["feedback_brain"] = "feedback_range"
        self.parameter_6___amp_decay_id_278["ctrl_type"] = "absolute"
        self.parameter_6___amp_decay_id_278["takeover_mode"] = "Value scaling"
        self.parameter_6___amp_decay_id_278["enc_first"] = 0
        self.parameter_6___amp_decay_id_278["enc_second"] = 127
        self.parameter_6___amp_decay_id_278["reverse_mode"] = False
        self.parameter_6___amp_decay_id_278["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_6___amp_decay_id_278["LED_feedback"] = "default"
        self.parameter_6___amp_decay_id_278["LED_feedback_active"] = "1"
        self.parameter_6___amp_decay_id_278["LED_on"] = "127"
        self.parameter_6___amp_decay_id_278["LED_off"] = "0"
        self.parameter_6___amp_decay_id_278["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_26"]
        self.parameter_6___amp_decay_id_278["snap_to"] = True
        self.parameter_6___amp_decay_id_278["json_id"] = 278
        self.parameter_6___amp_decay_id_278["mapping_name"] = "Parameter 6 - Amp Decay"
        self.parameter_6___amp_decay_id_278["mapping_type"] = "Parameter"
        self.parameter_6___amp_decay_id_278["parent_json_id"] = 272
        self.parameter_6___amp_decay_id_278["parent_name"] = "parameter_bank_id_272"
        self.parameter_7___amp_sustain_id_279 = {}
        self.parameter_7___amp_sustain_id_279["attached_to"] = "midi_cc_ch_2_val_27"
        self.parameter_7___amp_sustain_id_279["track"] = self.track_num(2)
        self.parameter_7___amp_sustain_id_279["module"] = "self.song().view.selected_track.view.selected_device.parameters[45]"
        self.parameter_7___amp_sustain_id_279["element"] = "value"
        self.parameter_7___amp_sustain_id_279["output_type"] = "val"
        self.parameter_7___amp_sustain_id_279["minimum"] = round(0,2)
        self.parameter_7___amp_sustain_id_279["maximum"] = round(100,2)
        self.parameter_7___amp_sustain_id_279["decimal_places"] = 2
        self.parameter_7___amp_sustain_id_279["ui_listener"] = "value"
        self.parameter_7___amp_sustain_id_279["feedback_brain"] = "feedback_range"
        self.parameter_7___amp_sustain_id_279["ctrl_type"] = "absolute"
        self.parameter_7___amp_sustain_id_279["takeover_mode"] = "Value scaling"
        self.parameter_7___amp_sustain_id_279["enc_first"] = 0
        self.parameter_7___amp_sustain_id_279["enc_second"] = 127
        self.parameter_7___amp_sustain_id_279["reverse_mode"] = False
        self.parameter_7___amp_sustain_id_279["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_7___amp_sustain_id_279["LED_feedback"] = "default"
        self.parameter_7___amp_sustain_id_279["LED_feedback_active"] = "1"
        self.parameter_7___amp_sustain_id_279["LED_on"] = "127"
        self.parameter_7___amp_sustain_id_279["LED_off"] = "0"
        self.parameter_7___amp_sustain_id_279["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_27"]
        self.parameter_7___amp_sustain_id_279["snap_to"] = True
        self.parameter_7___amp_sustain_id_279["json_id"] = 279
        self.parameter_7___amp_sustain_id_279["mapping_name"] = "Parameter 7 - Amp Sustain"
        self.parameter_7___amp_sustain_id_279["mapping_type"] = "Parameter"
        self.parameter_7___amp_sustain_id_279["parent_json_id"] = 272
        self.parameter_7___amp_sustain_id_279["parent_name"] = "parameter_bank_id_272"
        self.parameter_8___amp_release_id_280 = {}
        self.parameter_8___amp_release_id_280["attached_to"] = "midi_cc_ch_2_val_28"
        self.parameter_8___amp_release_id_280["track"] = self.track_num(2)
        self.parameter_8___amp_release_id_280["module"] = "self.song().view.selected_track.view.selected_device.parameters[41]"
        self.parameter_8___amp_release_id_280["element"] = "value"
        self.parameter_8___amp_release_id_280["output_type"] = "val"
        self.parameter_8___amp_release_id_280["minimum"] = round(0,2)
        self.parameter_8___amp_release_id_280["maximum"] = round(100,2)
        self.parameter_8___amp_release_id_280["decimal_places"] = 2
        self.parameter_8___amp_release_id_280["ui_listener"] = "value"
        self.parameter_8___amp_release_id_280["feedback_brain"] = "feedback_range"
        self.parameter_8___amp_release_id_280["ctrl_type"] = "absolute"
        self.parameter_8___amp_release_id_280["takeover_mode"] = "Value scaling"
        self.parameter_8___amp_release_id_280["enc_first"] = 0
        self.parameter_8___amp_release_id_280["enc_second"] = 127
        self.parameter_8___amp_release_id_280["reverse_mode"] = False
        self.parameter_8___amp_release_id_280["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_8___amp_release_id_280["LED_feedback"] = "default"
        self.parameter_8___amp_release_id_280["LED_feedback_active"] = "1"
        self.parameter_8___amp_release_id_280["LED_on"] = "127"
        self.parameter_8___amp_release_id_280["LED_off"] = "0"
        self.parameter_8___amp_release_id_280["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_28"]
        self.parameter_8___amp_release_id_280["snap_to"] = True
        self.parameter_8___amp_release_id_280["json_id"] = 280
        self.parameter_8___amp_release_id_280["mapping_name"] = "Parameter 8 - Amp Release"
        self.parameter_8___amp_release_id_280["mapping_type"] = "Parameter"
        self.parameter_8___amp_release_id_280["parent_json_id"] = 272
        self.parameter_8___amp_release_id_280["parent_name"] = "parameter_bank_id_272"
        self.parameter_9___filter_1_freq_id_281 = {}
        self.parameter_9___filter_1_freq_id_281["attached_to"] = "midi_cc_ch_2_val_29"
        self.parameter_9___filter_1_freq_id_281["track"] = self.track_num(2)
        self.parameter_9___filter_1_freq_id_281["module"] = "self.song().view.selected_track.view.selected_device.parameters[26]"
        self.parameter_9___filter_1_freq_id_281["element"] = "value"
        self.parameter_9___filter_1_freq_id_281["output_type"] = "val"
        self.parameter_9___filter_1_freq_id_281["minimum"] = round(0,2)
        self.parameter_9___filter_1_freq_id_281["maximum"] = round(100,2)
        self.parameter_9___filter_1_freq_id_281["decimal_places"] = 2
        self.parameter_9___filter_1_freq_id_281["ui_listener"] = "value"
        self.parameter_9___filter_1_freq_id_281["feedback_brain"] = "feedback_range"
        self.parameter_9___filter_1_freq_id_281["ctrl_type"] = "absolute"
        self.parameter_9___filter_1_freq_id_281["takeover_mode"] = "Value scaling"
        self.parameter_9___filter_1_freq_id_281["enc_first"] = 0
        self.parameter_9___filter_1_freq_id_281["enc_second"] = 127
        self.parameter_9___filter_1_freq_id_281["reverse_mode"] = False
        self.parameter_9___filter_1_freq_id_281["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_9___filter_1_freq_id_281["LED_feedback"] = "default"
        self.parameter_9___filter_1_freq_id_281["LED_feedback_active"] = "1"
        self.parameter_9___filter_1_freq_id_281["LED_on"] = "127"
        self.parameter_9___filter_1_freq_id_281["LED_off"] = "0"
        self.parameter_9___filter_1_freq_id_281["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_29"]
        self.parameter_9___filter_1_freq_id_281["snap_to"] = True
        self.parameter_9___filter_1_freq_id_281["json_id"] = 281
        self.parameter_9___filter_1_freq_id_281["mapping_name"] = "Parameter 9 - Filter 1 Freq"
        self.parameter_9___filter_1_freq_id_281["mapping_type"] = "Parameter"
        self.parameter_9___filter_1_freq_id_281["parent_json_id"] = 272
        self.parameter_9___filter_1_freq_id_281["parent_name"] = "parameter_bank_id_272"
        self.parameter_10___filter_1_res_id_282 = {}
        self.parameter_10___filter_1_res_id_282["attached_to"] = "midi_cc_ch_2_val_42"
        self.parameter_10___filter_1_res_id_282["track"] = self.track_num(2)
        self.parameter_10___filter_1_res_id_282["module"] = "self.song().view.selected_track.view.selected_device.parameters[27]"
        self.parameter_10___filter_1_res_id_282["element"] = "value"
        self.parameter_10___filter_1_res_id_282["output_type"] = "val"
        self.parameter_10___filter_1_res_id_282["minimum"] = round(0,2)
        self.parameter_10___filter_1_res_id_282["maximum"] = round(100,2)
        self.parameter_10___filter_1_res_id_282["decimal_places"] = 2
        self.parameter_10___filter_1_res_id_282["ui_listener"] = "value"
        self.parameter_10___filter_1_res_id_282["feedback_brain"] = "feedback_range"
        self.parameter_10___filter_1_res_id_282["ctrl_type"] = "absolute"
        self.parameter_10___filter_1_res_id_282["takeover_mode"] = "Value scaling"
        self.parameter_10___filter_1_res_id_282["enc_first"] = 0
        self.parameter_10___filter_1_res_id_282["enc_second"] = 127
        self.parameter_10___filter_1_res_id_282["reverse_mode"] = False
        self.parameter_10___filter_1_res_id_282["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_10___filter_1_res_id_282["LED_feedback"] = "default"
        self.parameter_10___filter_1_res_id_282["LED_feedback_active"] = "1"
        self.parameter_10___filter_1_res_id_282["LED_on"] = "127"
        self.parameter_10___filter_1_res_id_282["LED_off"] = "0"
        self.parameter_10___filter_1_res_id_282["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_42"]
        self.parameter_10___filter_1_res_id_282["snap_to"] = True
        self.parameter_10___filter_1_res_id_282["json_id"] = 282
        self.parameter_10___filter_1_res_id_282["mapping_name"] = "Parameter 10 - Filter 1 Res"
        self.parameter_10___filter_1_res_id_282["mapping_type"] = "Parameter"
        self.parameter_10___filter_1_res_id_282["parent_json_id"] = 272
        self.parameter_10___filter_1_res_id_282["parent_name"] = "parameter_bank_id_272"
        self.parameter_11___filter_1_drive_id_283 = {}
        self.parameter_11___filter_1_drive_id_283["attached_to"] = "midi_cc_ch_2_val_43"
        self.parameter_11___filter_1_drive_id_283["track"] = self.track_num(2)
        self.parameter_11___filter_1_drive_id_283["module"] = "self.song().view.selected_track.view.selected_device.parameters[28]"
        self.parameter_11___filter_1_drive_id_283["element"] = "value"
        self.parameter_11___filter_1_drive_id_283["output_type"] = "val"
        self.parameter_11___filter_1_drive_id_283["minimum"] = round(0,2)
        self.parameter_11___filter_1_drive_id_283["maximum"] = round(100,2)
        self.parameter_11___filter_1_drive_id_283["decimal_places"] = 2
        self.parameter_11___filter_1_drive_id_283["ui_listener"] = "value"
        self.parameter_11___filter_1_drive_id_283["feedback_brain"] = "feedback_range"
        self.parameter_11___filter_1_drive_id_283["ctrl_type"] = "absolute"
        self.parameter_11___filter_1_drive_id_283["takeover_mode"] = "Value scaling"
        self.parameter_11___filter_1_drive_id_283["enc_first"] = 0
        self.parameter_11___filter_1_drive_id_283["enc_second"] = 127
        self.parameter_11___filter_1_drive_id_283["reverse_mode"] = False
        self.parameter_11___filter_1_drive_id_283["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_11___filter_1_drive_id_283["LED_feedback"] = "default"
        self.parameter_11___filter_1_drive_id_283["LED_feedback_active"] = "1"
        self.parameter_11___filter_1_drive_id_283["LED_on"] = "127"
        self.parameter_11___filter_1_drive_id_283["LED_off"] = "0"
        self.parameter_11___filter_1_drive_id_283["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_43"]
        self.parameter_11___filter_1_drive_id_283["snap_to"] = True
        self.parameter_11___filter_1_drive_id_283["json_id"] = 283
        self.parameter_11___filter_1_drive_id_283["mapping_name"] = "Parameter 11 - Filter 1 Drive"
        self.parameter_11___filter_1_drive_id_283["mapping_type"] = "Parameter"
        self.parameter_11___filter_1_drive_id_283["parent_json_id"] = 272
        self.parameter_11___filter_1_drive_id_283["parent_name"] = "parameter_bank_id_272"
        self.parameter_12___filter_2_freq_id_284 = {}
        self.parameter_12___filter_2_freq_id_284["attached_to"] = "midi_cc_ch_2_val_44"
        self.parameter_12___filter_2_freq_id_284["track"] = self.track_num(2)
        self.parameter_12___filter_2_freq_id_284["module"] = "self.song().view.selected_track.view.selected_device.parameters[35]"
        self.parameter_12___filter_2_freq_id_284["element"] = "value"
        self.parameter_12___filter_2_freq_id_284["output_type"] = "val"
        self.parameter_12___filter_2_freq_id_284["minimum"] = round(0,2)
        self.parameter_12___filter_2_freq_id_284["maximum"] = round(100,2)
        self.parameter_12___filter_2_freq_id_284["decimal_places"] = 2
        self.parameter_12___filter_2_freq_id_284["ui_listener"] = "value"
        self.parameter_12___filter_2_freq_id_284["feedback_brain"] = "feedback_range"
        self.parameter_12___filter_2_freq_id_284["ctrl_type"] = "absolute"
        self.parameter_12___filter_2_freq_id_284["takeover_mode"] = "Value scaling"
        self.parameter_12___filter_2_freq_id_284["enc_first"] = 0
        self.parameter_12___filter_2_freq_id_284["enc_second"] = 127
        self.parameter_12___filter_2_freq_id_284["reverse_mode"] = False
        self.parameter_12___filter_2_freq_id_284["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_12___filter_2_freq_id_284["LED_feedback"] = "default"
        self.parameter_12___filter_2_freq_id_284["LED_feedback_active"] = "1"
        self.parameter_12___filter_2_freq_id_284["LED_on"] = "127"
        self.parameter_12___filter_2_freq_id_284["LED_off"] = "0"
        self.parameter_12___filter_2_freq_id_284["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_44"]
        self.parameter_12___filter_2_freq_id_284["snap_to"] = True
        self.parameter_12___filter_2_freq_id_284["json_id"] = 284
        self.parameter_12___filter_2_freq_id_284["mapping_name"] = "Parameter 12 - Filter 2 Freq"
        self.parameter_12___filter_2_freq_id_284["mapping_type"] = "Parameter"
        self.parameter_12___filter_2_freq_id_284["parent_json_id"] = 272
        self.parameter_12___filter_2_freq_id_284["parent_name"] = "parameter_bank_id_272"
        self.parameter_13___transpose_id_285 = {}
        self.parameter_13___transpose_id_285["attached_to"] = "midi_cc_ch_2_val_45"
        self.parameter_13___transpose_id_285["track"] = self.track_num(2)
        self.parameter_13___transpose_id_285["module"] = "self.song().view.selected_track.view.selected_device.parameters[90]"
        self.parameter_13___transpose_id_285["element"] = "value"
        self.parameter_13___transpose_id_285["output_type"] = "val"
        self.parameter_13___transpose_id_285["minimum"] = round(0,2)
        self.parameter_13___transpose_id_285["maximum"] = round(100,2)
        self.parameter_13___transpose_id_285["decimal_places"] = 2
        self.parameter_13___transpose_id_285["ui_listener"] = "value"
        self.parameter_13___transpose_id_285["feedback_brain"] = "feedback_range"
        self.parameter_13___transpose_id_285["ctrl_type"] = "absolute"
        self.parameter_13___transpose_id_285["takeover_mode"] = "Value scaling"
        self.parameter_13___transpose_id_285["enc_first"] = 0
        self.parameter_13___transpose_id_285["enc_second"] = 127
        self.parameter_13___transpose_id_285["reverse_mode"] = False
        self.parameter_13___transpose_id_285["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_13___transpose_id_285["LED_feedback"] = "default"
        self.parameter_13___transpose_id_285["LED_feedback_active"] = "1"
        self.parameter_13___transpose_id_285["LED_on"] = "127"
        self.parameter_13___transpose_id_285["LED_off"] = "0"
        self.parameter_13___transpose_id_285["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_45"]
        self.parameter_13___transpose_id_285["snap_to"] = True
        self.parameter_13___transpose_id_285["json_id"] = 285
        self.parameter_13___transpose_id_285["mapping_name"] = "Parameter 13 - Transpose"
        self.parameter_13___transpose_id_285["mapping_type"] = "Parameter"
        self.parameter_13___transpose_id_285["parent_json_id"] = 272
        self.parameter_13___transpose_id_285["parent_name"] = "parameter_bank_id_272"
        self.parameter_14___unison_amount_id_286 = {}
        self.parameter_14___unison_amount_id_286["attached_to"] = "midi_cc_ch_2_val_46"
        self.parameter_14___unison_amount_id_286["track"] = self.track_num(2)
        self.parameter_14___unison_amount_id_286["module"] = "self.song().view.selected_track.view.selected_device.parameters[89]"
        self.parameter_14___unison_amount_id_286["element"] = "value"
        self.parameter_14___unison_amount_id_286["output_type"] = "val"
        self.parameter_14___unison_amount_id_286["minimum"] = round(0,2)
        self.parameter_14___unison_amount_id_286["maximum"] = round(100,2)
        self.parameter_14___unison_amount_id_286["decimal_places"] = 2
        self.parameter_14___unison_amount_id_286["ui_listener"] = "value"
        self.parameter_14___unison_amount_id_286["feedback_brain"] = "feedback_range"
        self.parameter_14___unison_amount_id_286["ctrl_type"] = "absolute"
        self.parameter_14___unison_amount_id_286["takeover_mode"] = "Value scaling"
        self.parameter_14___unison_amount_id_286["enc_first"] = 0
        self.parameter_14___unison_amount_id_286["enc_second"] = 127
        self.parameter_14___unison_amount_id_286["reverse_mode"] = False
        self.parameter_14___unison_amount_id_286["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_14___unison_amount_id_286["LED_feedback"] = "default"
        self.parameter_14___unison_amount_id_286["LED_feedback_active"] = "1"
        self.parameter_14___unison_amount_id_286["LED_on"] = "127"
        self.parameter_14___unison_amount_id_286["LED_off"] = "0"
        self.parameter_14___unison_amount_id_286["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_46"]
        self.parameter_14___unison_amount_id_286["snap_to"] = True
        self.parameter_14___unison_amount_id_286["json_id"] = 286
        self.parameter_14___unison_amount_id_286["mapping_name"] = "Parameter 14 - Unison Amount"
        self.parameter_14___unison_amount_id_286["mapping_type"] = "Parameter"
        self.parameter_14___unison_amount_id_286["parent_json_id"] = 272
        self.parameter_14___unison_amount_id_286["parent_name"] = "parameter_bank_id_272"
        self.parameter_15___glide_id_287 = {}
        self.parameter_15___glide_id_287["attached_to"] = "midi_cc_ch_2_val_47"
        self.parameter_15___glide_id_287["track"] = self.track_num(2)
        self.parameter_15___glide_id_287["module"] = "self.song().view.selected_track.view.selected_device.parameters[91]"
        self.parameter_15___glide_id_287["element"] = "value"
        self.parameter_15___glide_id_287["output_type"] = "val"
        self.parameter_15___glide_id_287["minimum"] = round(0,2)
        self.parameter_15___glide_id_287["maximum"] = round(100,2)
        self.parameter_15___glide_id_287["decimal_places"] = 2
        self.parameter_15___glide_id_287["ui_listener"] = "value"
        self.parameter_15___glide_id_287["feedback_brain"] = "feedback_range"
        self.parameter_15___glide_id_287["ctrl_type"] = "absolute"
        self.parameter_15___glide_id_287["takeover_mode"] = "Value scaling"
        self.parameter_15___glide_id_287["enc_first"] = 0
        self.parameter_15___glide_id_287["enc_second"] = 127
        self.parameter_15___glide_id_287["reverse_mode"] = False
        self.parameter_15___glide_id_287["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_15___glide_id_287["LED_feedback"] = "default"
        self.parameter_15___glide_id_287["LED_feedback_active"] = "1"
        self.parameter_15___glide_id_287["LED_on"] = "127"
        self.parameter_15___glide_id_287["LED_off"] = "0"
        self.parameter_15___glide_id_287["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_47"]
        self.parameter_15___glide_id_287["snap_to"] = True
        self.parameter_15___glide_id_287["json_id"] = 287
        self.parameter_15___glide_id_287["mapping_name"] = "Parameter 15 - Glide"
        self.parameter_15___glide_id_287["mapping_type"] = "Parameter"
        self.parameter_15___glide_id_287["parent_json_id"] = 272
        self.parameter_15___glide_id_287["parent_name"] = "parameter_bank_id_272"
        self.parameter_16___volume_id_288 = {}
        self.parameter_16___volume_id_288["attached_to"] = "midi_cc_ch_2_val_48"
        self.parameter_16___volume_id_288["track"] = self.track_num(2)
        self.parameter_16___volume_id_288["module"] = "self.song().view.selected_track.view.selected_device.parameters[92]"
        self.parameter_16___volume_id_288["element"] = "value"
        self.parameter_16___volume_id_288["output_type"] = "val"
        self.parameter_16___volume_id_288["minimum"] = round(0,2)
        self.parameter_16___volume_id_288["maximum"] = round(100,2)
        self.parameter_16___volume_id_288["decimal_places"] = 2
        self.parameter_16___volume_id_288["ui_listener"] = "value"
        self.parameter_16___volume_id_288["feedback_brain"] = "feedback_range"
        self.parameter_16___volume_id_288["ctrl_type"] = "absolute"
        self.parameter_16___volume_id_288["takeover_mode"] = "Value scaling"
        self.parameter_16___volume_id_288["enc_first"] = 0
        self.parameter_16___volume_id_288["enc_second"] = 127
        self.parameter_16___volume_id_288["reverse_mode"] = False
        self.parameter_16___volume_id_288["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_16___volume_id_288["LED_feedback"] = "default"
        self.parameter_16___volume_id_288["LED_feedback_active"] = "1"
        self.parameter_16___volume_id_288["LED_on"] = "127"
        self.parameter_16___volume_id_288["LED_off"] = "0"
        self.parameter_16___volume_id_288["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_48"]
        self.parameter_16___volume_id_288["snap_to"] = True
        self.parameter_16___volume_id_288["json_id"] = 288
        self.parameter_16___volume_id_288["mapping_name"] = "Parameter 16 - Volume"
        self.parameter_16___volume_id_288["mapping_type"] = "Parameter"
        self.parameter_16___volume_id_288["parent_json_id"] = 272
        self.parameter_16___volume_id_288["parent_name"] = "parameter_bank_id_272"
        self.track_nav_left_copy_id_289 = {}
        self.track_nav_left_copy_id_289["attached_to"] = "midi_cc_ch_2_val_114"
        self.track_nav_left_copy_id_289["module"] = "self"
        self.track_nav_left_copy_id_289["element"] = "scroll_highlight"
        self.track_nav_left_copy_id_289["output_type"] = "func"
        self.track_nav_left_copy_id_289["func_arg"] = "cnfg"
        self.track_nav_left_copy_id_289["tracks_scenes"] = "tracks"
        self.track_nav_left_copy_id_289["ui_listener"] = "tracks"
        self.track_nav_left_copy_id_289["feedback_brain"] = "feedback_highlight_nav"
        self.track_nav_left_copy_id_289["ctrl_type"] = "decrement"
        self.track_nav_left_copy_id_289["enc_first"] = 127
        self.track_nav_left_copy_id_289["enc_second"] = 0
        self.track_nav_left_copy_id_289["steps"] = 1
        self.track_nav_left_copy_id_289["switch_type"] = "toggle"
        self.track_nav_left_copy_id_289["LED_mapping_type_needs_feedback"] = "1"
        self.track_nav_left_copy_id_289["LED_feedback"] = "default"
        self.track_nav_left_copy_id_289["LED_feedback_active"] = "1"
        self.track_nav_left_copy_id_289["LED_on"] = "127"
        self.track_nav_left_copy_id_289["LED_off"] = "0"
        self.track_nav_left_copy_id_289["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_114"]
        self.track_nav_left_copy_id_289["json_id"] = 289
        self.track_nav_left_copy_id_289["mapping_name"] = "Track Nav Left copy"
        self.track_nav_left_copy_id_289["mapping_type"] = "Highlight Navigation"
        self.track_nav_left_copy_id_289["parent_json_id"] = 268
        self.track_nav_left_copy_id_289["parent_name"] = "device___wavetable_mode3_selfmodes4_id_268"
        self.track_nav_right_copy_id_290 = {}
        self.track_nav_right_copy_id_290["attached_to"] = "midi_cc_ch_2_val_115"
        self.track_nav_right_copy_id_290["module"] = "self"
        self.track_nav_right_copy_id_290["element"] = "scroll_highlight"
        self.track_nav_right_copy_id_290["output_type"] = "func"
        self.track_nav_right_copy_id_290["func_arg"] = "cnfg"
        self.track_nav_right_copy_id_290["tracks_scenes"] = "tracks"
        self.track_nav_right_copy_id_290["ui_listener"] = "tracks"
        self.track_nav_right_copy_id_290["feedback_brain"] = "feedback_highlight_nav"
        self.track_nav_right_copy_id_290["ctrl_type"] = "increment"
        self.track_nav_right_copy_id_290["enc_first"] = 127
        self.track_nav_right_copy_id_290["enc_second"] = 0
        self.track_nav_right_copy_id_290["steps"] = 1
        self.track_nav_right_copy_id_290["switch_type"] = "toggle"
        self.track_nav_right_copy_id_290["LED_mapping_type_needs_feedback"] = "1"
        self.track_nav_right_copy_id_290["LED_feedback"] = "default"
        self.track_nav_right_copy_id_290["LED_feedback_active"] = "1"
        self.track_nav_right_copy_id_290["LED_on"] = "127"
        self.track_nav_right_copy_id_290["LED_off"] = "0"
        self.track_nav_right_copy_id_290["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_115"]
        self.track_nav_right_copy_id_290["json_id"] = 290
        self.track_nav_right_copy_id_290["mapping_name"] = "Track Nav Right copy"
        self.track_nav_right_copy_id_290["mapping_type"] = "Highlight Navigation"
        self.track_nav_right_copy_id_290["parent_json_id"] = 268
        self.track_nav_right_copy_id_290["parent_name"] = "device___wavetable_mode3_selfmodes4_id_268"
    def _mode298_configs(self):
        self.mode_298_configs_map = [
            "track_selector_id_300",
            "device_selector_id_301",
            "parameter_bank_id_302",
            "parameter_1___s_start_id_303",
            "parameter_2___s_length_id_304",
            "parameter_3___transpose_id_305",
            "parameter_4___detune_id_306",
            "parameter_5___filter_type_id_307",
            "parameter_6___filter_circuit___lphp_id_308",
            "parameter_7___filter_freq_id_309",
            "parameter_8___filter_res_id_310",
            "parameter_9___ve_attack_id_311",
            "parameter_10___ve_decay_id_312",
            "parameter_11___ve_sustain_id_313",
            "parameter_12___ve_release_id_314",
            "parameter_13___vol_vel_id_315",
            "parameter_14___trigger_mode_id_316",
            "parameter_15___fade_in_id_317",
            "parameter_16___fade_out_id_318",
            "track_nav_left_copy_id_319",
            "track_nav_right_copy_id_320"]
        self.track_selector_id_300 = {}
        self.track_selector_id_300["track"] = self.track_num(2)
        self.track_selector_id_300["module"] = "self.song().view.selected_track"
        self.track_selector_id_300["LED_mapping_type_needs_feedback"] = ""
        self.track_selector_id_300["LED_feedback"] = "custom"
        self.track_selector_id_300["LED_feedback_active"] = ""
        self.track_selector_id_300["LED_on"] = "127"
        self.track_selector_id_300["LED_off"] = "0"
        self.track_selector_id_300["LED_send_feedback_to_selected"] = []
        self.track_selector_id_300["json_id"] = 300
        self.track_selector_id_300["mapping_name"] = "Track Selector"
        self.track_selector_id_300["mapping_type"] = "Track"
        self.track_selector_id_300["parent_json_id"] = 298
        self.track_selector_id_300["parent_name"] = "device___simpler_mode4_selfmodes5_id_298"
        self.device_selector_id_301 = {}
        self.device_selector_id_301["track"] = self.track_num(2)
        self.device_selector_id_301["module"] = "self.song().view.selected_track.view.selected_device"
        self.device_selector_id_301["LED_mapping_type_needs_feedback"] = ""
        self.device_selector_id_301["LED_feedback"] = "custom"
        self.device_selector_id_301["LED_feedback_active"] = ""
        self.device_selector_id_301["LED_on"] = "127"
        self.device_selector_id_301["LED_off"] = "0"
        self.device_selector_id_301["LED_send_feedback_to_selected"] = []
        self.device_selector_id_301["json_id"] = 301
        self.device_selector_id_301["mapping_name"] = "Device Selector"
        self.device_selector_id_301["mapping_type"] = "Device"
        self.device_selector_id_301["parent_json_id"] = 300
        self.device_selector_id_301["parent_name"] = "track_selector_id_300"
        self.parameter_bank_id_302 = {}
        self.parameter_bank_id_302["LED_mapping_type_needs_feedback"] = ""
        self.parameter_bank_id_302["LED_feedback"] = "custom"
        self.parameter_bank_id_302["LED_feedback_active"] = ""
        self.parameter_bank_id_302["LED_on"] = "127"
        self.parameter_bank_id_302["LED_off"] = "0"
        self.parameter_bank_id_302["LED_send_feedback_to_selected"] = []
        self.parameter_bank_id_302["json_id"] = 302
        self.parameter_bank_id_302["mapping_name"] = "Parameter Bank"
        self.parameter_bank_id_302["mapping_type"] = "Parameter Bank"
        self.parameter_bank_id_302["parent_json_id"] = 301
        self.parameter_bank_id_302["parent_name"] = "device_selector_id_301"
        self.parameter_1___s_start_id_303 = {}
        self.parameter_1___s_start_id_303["attached_to"] = "midi_cc_ch_2_val_21"
        self.parameter_1___s_start_id_303["track"] = self.track_num(2)
        self.parameter_1___s_start_id_303["module"] = "self.song().view.selected_track.view.selected_device.parameters[3]"
        self.parameter_1___s_start_id_303["element"] = "value"
        self.parameter_1___s_start_id_303["output_type"] = "val"
        self.parameter_1___s_start_id_303["minimum"] = round(0,2)
        self.parameter_1___s_start_id_303["maximum"] = round(100,2)
        self.parameter_1___s_start_id_303["decimal_places"] = 2
        self.parameter_1___s_start_id_303["ui_listener"] = "value"
        self.parameter_1___s_start_id_303["feedback_brain"] = "feedback_range"
        self.parameter_1___s_start_id_303["ctrl_type"] = "absolute"
        self.parameter_1___s_start_id_303["takeover_mode"] = "Value scaling"
        self.parameter_1___s_start_id_303["enc_first"] = 0
        self.parameter_1___s_start_id_303["enc_second"] = 127
        self.parameter_1___s_start_id_303["reverse_mode"] = False
        self.parameter_1___s_start_id_303["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_1___s_start_id_303["LED_feedback"] = "default"
        self.parameter_1___s_start_id_303["LED_feedback_active"] = "1"
        self.parameter_1___s_start_id_303["LED_on"] = "127"
        self.parameter_1___s_start_id_303["LED_off"] = "0"
        self.parameter_1___s_start_id_303["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_21"]
        self.parameter_1___s_start_id_303["snap_to"] = True
        self.parameter_1___s_start_id_303["json_id"] = 303
        self.parameter_1___s_start_id_303["mapping_name"] = "Parameter 1 - S Start"
        self.parameter_1___s_start_id_303["mapping_type"] = "Parameter"
        self.parameter_1___s_start_id_303["parent_json_id"] = 302
        self.parameter_1___s_start_id_303["parent_name"] = "parameter_bank_id_302"
        self.parameter_2___s_length_id_304 = {}
        self.parameter_2___s_length_id_304["attached_to"] = "midi_cc_ch_2_val_22"
        self.parameter_2___s_length_id_304["track"] = self.track_num(2)
        self.parameter_2___s_length_id_304["module"] = "self.song().view.selected_track.view.selected_device.parameters[4]"
        self.parameter_2___s_length_id_304["element"] = "value"
        self.parameter_2___s_length_id_304["output_type"] = "val"
        self.parameter_2___s_length_id_304["minimum"] = round(0,2)
        self.parameter_2___s_length_id_304["maximum"] = round(100,2)
        self.parameter_2___s_length_id_304["decimal_places"] = 2
        self.parameter_2___s_length_id_304["ui_listener"] = "value"
        self.parameter_2___s_length_id_304["feedback_brain"] = "feedback_range"
        self.parameter_2___s_length_id_304["ctrl_type"] = "absolute"
        self.parameter_2___s_length_id_304["takeover_mode"] = "Value scaling"
        self.parameter_2___s_length_id_304["enc_first"] = 0
        self.parameter_2___s_length_id_304["enc_second"] = 127
        self.parameter_2___s_length_id_304["reverse_mode"] = False
        self.parameter_2___s_length_id_304["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_2___s_length_id_304["LED_feedback"] = "default"
        self.parameter_2___s_length_id_304["LED_feedback_active"] = "1"
        self.parameter_2___s_length_id_304["LED_on"] = "127"
        self.parameter_2___s_length_id_304["LED_off"] = "0"
        self.parameter_2___s_length_id_304["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_22"]
        self.parameter_2___s_length_id_304["snap_to"] = True
        self.parameter_2___s_length_id_304["json_id"] = 304
        self.parameter_2___s_length_id_304["mapping_name"] = "Parameter 2 - S Length"
        self.parameter_2___s_length_id_304["mapping_type"] = "Parameter"
        self.parameter_2___s_length_id_304["parent_json_id"] = 302
        self.parameter_2___s_length_id_304["parent_name"] = "parameter_bank_id_302"
        self.parameter_3___transpose_id_305 = {}
        self.parameter_3___transpose_id_305["attached_to"] = "midi_cc_ch_2_val_23"
        self.parameter_3___transpose_id_305["track"] = self.track_num(2)
        self.parameter_3___transpose_id_305["module"] = "self.song().view.selected_track.view.selected_device.parameters[11]"
        self.parameter_3___transpose_id_305["element"] = "value"
        self.parameter_3___transpose_id_305["output_type"] = "val"
        self.parameter_3___transpose_id_305["minimum"] = round(0,2)
        self.parameter_3___transpose_id_305["maximum"] = round(100,2)
        self.parameter_3___transpose_id_305["decimal_places"] = 2
        self.parameter_3___transpose_id_305["ui_listener"] = "value"
        self.parameter_3___transpose_id_305["feedback_brain"] = "feedback_range"
        self.parameter_3___transpose_id_305["ctrl_type"] = "absolute"
        self.parameter_3___transpose_id_305["takeover_mode"] = "Value scaling"
        self.parameter_3___transpose_id_305["enc_first"] = 0
        self.parameter_3___transpose_id_305["enc_second"] = 127
        self.parameter_3___transpose_id_305["reverse_mode"] = False
        self.parameter_3___transpose_id_305["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_3___transpose_id_305["LED_feedback"] = "default"
        self.parameter_3___transpose_id_305["LED_feedback_active"] = "1"
        self.parameter_3___transpose_id_305["LED_on"] = "127"
        self.parameter_3___transpose_id_305["LED_off"] = "0"
        self.parameter_3___transpose_id_305["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_23"]
        self.parameter_3___transpose_id_305["snap_to"] = True
        self.parameter_3___transpose_id_305["json_id"] = 305
        self.parameter_3___transpose_id_305["mapping_name"] = "Parameter 3 - Transpose"
        self.parameter_3___transpose_id_305["mapping_type"] = "Parameter"
        self.parameter_3___transpose_id_305["parent_json_id"] = 302
        self.parameter_3___transpose_id_305["parent_name"] = "parameter_bank_id_302"
        self.parameter_4___detune_id_306 = {}
        self.parameter_4___detune_id_306["attached_to"] = "midi_cc_ch_2_val_24"
        self.parameter_4___detune_id_306["track"] = self.track_num(2)
        self.parameter_4___detune_id_306["module"] = "self.song().view.selected_track.view.selected_device.parameters[12]"
        self.parameter_4___detune_id_306["element"] = "value"
        self.parameter_4___detune_id_306["output_type"] = "val"
        self.parameter_4___detune_id_306["minimum"] = round(0,2)
        self.parameter_4___detune_id_306["maximum"] = round(100,2)
        self.parameter_4___detune_id_306["decimal_places"] = 2
        self.parameter_4___detune_id_306["ui_listener"] = "value"
        self.parameter_4___detune_id_306["feedback_brain"] = "feedback_range"
        self.parameter_4___detune_id_306["ctrl_type"] = "absolute"
        self.parameter_4___detune_id_306["takeover_mode"] = "Value scaling"
        self.parameter_4___detune_id_306["enc_first"] = 0
        self.parameter_4___detune_id_306["enc_second"] = 127
        self.parameter_4___detune_id_306["reverse_mode"] = False
        self.parameter_4___detune_id_306["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_4___detune_id_306["LED_feedback"] = "default"
        self.parameter_4___detune_id_306["LED_feedback_active"] = "1"
        self.parameter_4___detune_id_306["LED_on"] = "127"
        self.parameter_4___detune_id_306["LED_off"] = "0"
        self.parameter_4___detune_id_306["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_24"]
        self.parameter_4___detune_id_306["snap_to"] = True
        self.parameter_4___detune_id_306["json_id"] = 306
        self.parameter_4___detune_id_306["mapping_name"] = "Parameter 4 - Detune"
        self.parameter_4___detune_id_306["mapping_type"] = "Parameter"
        self.parameter_4___detune_id_306["parent_json_id"] = 302
        self.parameter_4___detune_id_306["parent_name"] = "parameter_bank_id_302"
        self.parameter_5___filter_type_id_307 = {}
        self.parameter_5___filter_type_id_307["attached_to"] = "midi_cc_ch_2_val_25"
        self.parameter_5___filter_type_id_307["track"] = self.track_num(2)
        self.parameter_5___filter_type_id_307["module"] = "self.song().view.selected_track.view.selected_device.parameters[37]"
        self.parameter_5___filter_type_id_307["element"] = "value"
        self.parameter_5___filter_type_id_307["output_type"] = "val"
        self.parameter_5___filter_type_id_307["minimum"] = round(0,2)
        self.parameter_5___filter_type_id_307["maximum"] = round(100,2)
        self.parameter_5___filter_type_id_307["decimal_places"] = 2
        self.parameter_5___filter_type_id_307["ui_listener"] = "value"
        self.parameter_5___filter_type_id_307["feedback_brain"] = "feedback_range"
        self.parameter_5___filter_type_id_307["ctrl_type"] = "absolute"
        self.parameter_5___filter_type_id_307["takeover_mode"] = "Value scaling"
        self.parameter_5___filter_type_id_307["enc_first"] = 0
        self.parameter_5___filter_type_id_307["enc_second"] = 127
        self.parameter_5___filter_type_id_307["reverse_mode"] = False
        self.parameter_5___filter_type_id_307["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_5___filter_type_id_307["LED_feedback"] = "default"
        self.parameter_5___filter_type_id_307["LED_feedback_active"] = "1"
        self.parameter_5___filter_type_id_307["LED_on"] = "127"
        self.parameter_5___filter_type_id_307["LED_off"] = "0"
        self.parameter_5___filter_type_id_307["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_25"]
        self.parameter_5___filter_type_id_307["snap_to"] = True
        self.parameter_5___filter_type_id_307["json_id"] = 307
        self.parameter_5___filter_type_id_307["mapping_name"] = "Parameter 5 - Filter Type"
        self.parameter_5___filter_type_id_307["mapping_type"] = "Parameter"
        self.parameter_5___filter_type_id_307["parent_json_id"] = 302
        self.parameter_5___filter_type_id_307["parent_name"] = "parameter_bank_id_302"
        self.parameter_6___filter_circuit___lphp_id_308 = {}
        self.parameter_6___filter_circuit___lphp_id_308["attached_to"] = "midi_cc_ch_2_val_26"
        self.parameter_6___filter_circuit___lphp_id_308["track"] = self.track_num(2)
        self.parameter_6___filter_circuit___lphp_id_308["module"] = "self.song().view.selected_track.view.selected_device.parameters[38]"
        self.parameter_6___filter_circuit___lphp_id_308["element"] = "value"
        self.parameter_6___filter_circuit___lphp_id_308["output_type"] = "val"
        self.parameter_6___filter_circuit___lphp_id_308["minimum"] = round(0,2)
        self.parameter_6___filter_circuit___lphp_id_308["maximum"] = round(100,2)
        self.parameter_6___filter_circuit___lphp_id_308["decimal_places"] = 2
        self.parameter_6___filter_circuit___lphp_id_308["ui_listener"] = "value"
        self.parameter_6___filter_circuit___lphp_id_308["feedback_brain"] = "feedback_range"
        self.parameter_6___filter_circuit___lphp_id_308["ctrl_type"] = "absolute"
        self.parameter_6___filter_circuit___lphp_id_308["takeover_mode"] = "Value scaling"
        self.parameter_6___filter_circuit___lphp_id_308["enc_first"] = 0
        self.parameter_6___filter_circuit___lphp_id_308["enc_second"] = 127
        self.parameter_6___filter_circuit___lphp_id_308["reverse_mode"] = False
        self.parameter_6___filter_circuit___lphp_id_308["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_6___filter_circuit___lphp_id_308["LED_feedback"] = "default"
        self.parameter_6___filter_circuit___lphp_id_308["LED_feedback_active"] = "1"
        self.parameter_6___filter_circuit___lphp_id_308["LED_on"] = "127"
        self.parameter_6___filter_circuit___lphp_id_308["LED_off"] = "0"
        self.parameter_6___filter_circuit___lphp_id_308["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_26"]
        self.parameter_6___filter_circuit___lphp_id_308["snap_to"] = True
        self.parameter_6___filter_circuit___lphp_id_308["json_id"] = 308
        self.parameter_6___filter_circuit___lphp_id_308["mapping_name"] = "Parameter 6 - Filter Circuit - LP/HP"
        self.parameter_6___filter_circuit___lphp_id_308["mapping_type"] = "Parameter"
        self.parameter_6___filter_circuit___lphp_id_308["parent_json_id"] = 302
        self.parameter_6___filter_circuit___lphp_id_308["parent_name"] = "parameter_bank_id_302"
        self.parameter_7___filter_freq_id_309 = {}
        self.parameter_7___filter_freq_id_309["attached_to"] = "midi_cc_ch_2_val_27"
        self.parameter_7___filter_freq_id_309["track"] = self.track_num(2)
        self.parameter_7___filter_freq_id_309["module"] = "self.song().view.selected_track.view.selected_device.parameters[41]"
        self.parameter_7___filter_freq_id_309["element"] = "value"
        self.parameter_7___filter_freq_id_309["output_type"] = "val"
        self.parameter_7___filter_freq_id_309["minimum"] = round(0,2)
        self.parameter_7___filter_freq_id_309["maximum"] = round(100,2)
        self.parameter_7___filter_freq_id_309["decimal_places"] = 2
        self.parameter_7___filter_freq_id_309["ui_listener"] = "value"
        self.parameter_7___filter_freq_id_309["feedback_brain"] = "feedback_range"
        self.parameter_7___filter_freq_id_309["ctrl_type"] = "absolute"
        self.parameter_7___filter_freq_id_309["takeover_mode"] = "Value scaling"
        self.parameter_7___filter_freq_id_309["enc_first"] = 0
        self.parameter_7___filter_freq_id_309["enc_second"] = 127
        self.parameter_7___filter_freq_id_309["reverse_mode"] = False
        self.parameter_7___filter_freq_id_309["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_7___filter_freq_id_309["LED_feedback"] = "default"
        self.parameter_7___filter_freq_id_309["LED_feedback_active"] = "1"
        self.parameter_7___filter_freq_id_309["LED_on"] = "127"
        self.parameter_7___filter_freq_id_309["LED_off"] = "0"
        self.parameter_7___filter_freq_id_309["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_27"]
        self.parameter_7___filter_freq_id_309["snap_to"] = True
        self.parameter_7___filter_freq_id_309["json_id"] = 309
        self.parameter_7___filter_freq_id_309["mapping_name"] = "Parameter 7 - Filter Freq"
        self.parameter_7___filter_freq_id_309["mapping_type"] = "Parameter"
        self.parameter_7___filter_freq_id_309["parent_json_id"] = 302
        self.parameter_7___filter_freq_id_309["parent_name"] = "parameter_bank_id_302"
        self.parameter_8___filter_res_id_310 = {}
        self.parameter_8___filter_res_id_310["attached_to"] = "midi_cc_ch_2_val_28"
        self.parameter_8___filter_res_id_310["track"] = self.track_num(2)
        self.parameter_8___filter_res_id_310["module"] = "self.song().view.selected_track.view.selected_device.parameters[42]"
        self.parameter_8___filter_res_id_310["element"] = "value"
        self.parameter_8___filter_res_id_310["output_type"] = "val"
        self.parameter_8___filter_res_id_310["minimum"] = round(0,2)
        self.parameter_8___filter_res_id_310["maximum"] = round(100,2)
        self.parameter_8___filter_res_id_310["decimal_places"] = 2
        self.parameter_8___filter_res_id_310["ui_listener"] = "value"
        self.parameter_8___filter_res_id_310["feedback_brain"] = "feedback_range"
        self.parameter_8___filter_res_id_310["ctrl_type"] = "absolute"
        self.parameter_8___filter_res_id_310["takeover_mode"] = "Value scaling"
        self.parameter_8___filter_res_id_310["enc_first"] = 0
        self.parameter_8___filter_res_id_310["enc_second"] = 127
        self.parameter_8___filter_res_id_310["reverse_mode"] = False
        self.parameter_8___filter_res_id_310["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_8___filter_res_id_310["LED_feedback"] = "default"
        self.parameter_8___filter_res_id_310["LED_feedback_active"] = "1"
        self.parameter_8___filter_res_id_310["LED_on"] = "127"
        self.parameter_8___filter_res_id_310["LED_off"] = "0"
        self.parameter_8___filter_res_id_310["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_28"]
        self.parameter_8___filter_res_id_310["snap_to"] = True
        self.parameter_8___filter_res_id_310["json_id"] = 310
        self.parameter_8___filter_res_id_310["mapping_name"] = "Parameter 8 - Filter Res"
        self.parameter_8___filter_res_id_310["mapping_type"] = "Parameter"
        self.parameter_8___filter_res_id_310["parent_json_id"] = 302
        self.parameter_8___filter_res_id_310["parent_name"] = "parameter_bank_id_302"
        self.parameter_9___ve_attack_id_311 = {}
        self.parameter_9___ve_attack_id_311["attached_to"] = "midi_cc_ch_2_val_29"
        self.parameter_9___ve_attack_id_311["track"] = self.track_num(2)
        self.parameter_9___ve_attack_id_311["module"] = "self.song().view.selected_track.view.selected_device.parameters[26]"
        self.parameter_9___ve_attack_id_311["element"] = "value"
        self.parameter_9___ve_attack_id_311["output_type"] = "val"
        self.parameter_9___ve_attack_id_311["minimum"] = round(0,2)
        self.parameter_9___ve_attack_id_311["maximum"] = round(100,2)
        self.parameter_9___ve_attack_id_311["decimal_places"] = 2
        self.parameter_9___ve_attack_id_311["ui_listener"] = "value"
        self.parameter_9___ve_attack_id_311["feedback_brain"] = "feedback_range"
        self.parameter_9___ve_attack_id_311["ctrl_type"] = "absolute"
        self.parameter_9___ve_attack_id_311["takeover_mode"] = "Value scaling"
        self.parameter_9___ve_attack_id_311["enc_first"] = 0
        self.parameter_9___ve_attack_id_311["enc_second"] = 127
        self.parameter_9___ve_attack_id_311["reverse_mode"] = False
        self.parameter_9___ve_attack_id_311["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_9___ve_attack_id_311["LED_feedback"] = "default"
        self.parameter_9___ve_attack_id_311["LED_feedback_active"] = "1"
        self.parameter_9___ve_attack_id_311["LED_on"] = "127"
        self.parameter_9___ve_attack_id_311["LED_off"] = "0"
        self.parameter_9___ve_attack_id_311["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_29"]
        self.parameter_9___ve_attack_id_311["snap_to"] = True
        self.parameter_9___ve_attack_id_311["json_id"] = 311
        self.parameter_9___ve_attack_id_311["mapping_name"] = "Parameter 9 - Ve Attack"
        self.parameter_9___ve_attack_id_311["mapping_type"] = "Parameter"
        self.parameter_9___ve_attack_id_311["parent_json_id"] = 302
        self.parameter_9___ve_attack_id_311["parent_name"] = "parameter_bank_id_302"
        self.parameter_10___ve_decay_id_312 = {}
        self.parameter_10___ve_decay_id_312["attached_to"] = "midi_cc_ch_2_val_42"
        self.parameter_10___ve_decay_id_312["track"] = self.track_num(2)
        self.parameter_10___ve_decay_id_312["module"] = "self.song().view.selected_track.view.selected_device.parameters[27]"
        self.parameter_10___ve_decay_id_312["element"] = "value"
        self.parameter_10___ve_decay_id_312["output_type"] = "val"
        self.parameter_10___ve_decay_id_312["minimum"] = round(0,2)
        self.parameter_10___ve_decay_id_312["maximum"] = round(100,2)
        self.parameter_10___ve_decay_id_312["decimal_places"] = 2
        self.parameter_10___ve_decay_id_312["ui_listener"] = "value"
        self.parameter_10___ve_decay_id_312["feedback_brain"] = "feedback_range"
        self.parameter_10___ve_decay_id_312["ctrl_type"] = "absolute"
        self.parameter_10___ve_decay_id_312["takeover_mode"] = "Value scaling"
        self.parameter_10___ve_decay_id_312["enc_first"] = 0
        self.parameter_10___ve_decay_id_312["enc_second"] = 127
        self.parameter_10___ve_decay_id_312["reverse_mode"] = False
        self.parameter_10___ve_decay_id_312["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_10___ve_decay_id_312["LED_feedback"] = "default"
        self.parameter_10___ve_decay_id_312["LED_feedback_active"] = "1"
        self.parameter_10___ve_decay_id_312["LED_on"] = "127"
        self.parameter_10___ve_decay_id_312["LED_off"] = "0"
        self.parameter_10___ve_decay_id_312["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_42"]
        self.parameter_10___ve_decay_id_312["snap_to"] = True
        self.parameter_10___ve_decay_id_312["json_id"] = 312
        self.parameter_10___ve_decay_id_312["mapping_name"] = "Parameter 10 - Ve Decay"
        self.parameter_10___ve_decay_id_312["mapping_type"] = "Parameter"
        self.parameter_10___ve_decay_id_312["parent_json_id"] = 302
        self.parameter_10___ve_decay_id_312["parent_name"] = "parameter_bank_id_302"
        self.parameter_11___ve_sustain_id_313 = {}
        self.parameter_11___ve_sustain_id_313["attached_to"] = "midi_cc_ch_2_val_43"
        self.parameter_11___ve_sustain_id_313["track"] = self.track_num(2)
        self.parameter_11___ve_sustain_id_313["module"] = "self.song().view.selected_track.view.selected_device.parameters[28]"
        self.parameter_11___ve_sustain_id_313["element"] = "value"
        self.parameter_11___ve_sustain_id_313["output_type"] = "val"
        self.parameter_11___ve_sustain_id_313["minimum"] = round(0,2)
        self.parameter_11___ve_sustain_id_313["maximum"] = round(100,2)
        self.parameter_11___ve_sustain_id_313["decimal_places"] = 2
        self.parameter_11___ve_sustain_id_313["ui_listener"] = "value"
        self.parameter_11___ve_sustain_id_313["feedback_brain"] = "feedback_range"
        self.parameter_11___ve_sustain_id_313["ctrl_type"] = "absolute"
        self.parameter_11___ve_sustain_id_313["takeover_mode"] = "Value scaling"
        self.parameter_11___ve_sustain_id_313["enc_first"] = 0
        self.parameter_11___ve_sustain_id_313["enc_second"] = 127
        self.parameter_11___ve_sustain_id_313["reverse_mode"] = False
        self.parameter_11___ve_sustain_id_313["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_11___ve_sustain_id_313["LED_feedback"] = "default"
        self.parameter_11___ve_sustain_id_313["LED_feedback_active"] = "1"
        self.parameter_11___ve_sustain_id_313["LED_on"] = "127"
        self.parameter_11___ve_sustain_id_313["LED_off"] = "0"
        self.parameter_11___ve_sustain_id_313["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_43"]
        self.parameter_11___ve_sustain_id_313["snap_to"] = True
        self.parameter_11___ve_sustain_id_313["json_id"] = 313
        self.parameter_11___ve_sustain_id_313["mapping_name"] = "Parameter 11 - Ve Sustain"
        self.parameter_11___ve_sustain_id_313["mapping_type"] = "Parameter"
        self.parameter_11___ve_sustain_id_313["parent_json_id"] = 302
        self.parameter_11___ve_sustain_id_313["parent_name"] = "parameter_bank_id_302"
        self.parameter_12___ve_release_id_314 = {}
        self.parameter_12___ve_release_id_314["attached_to"] = "midi_cc_ch_2_val_44"
        self.parameter_12___ve_release_id_314["track"] = self.track_num(2)
        self.parameter_12___ve_release_id_314["module"] = "self.song().view.selected_track.view.selected_device.parameters[29]"
        self.parameter_12___ve_release_id_314["element"] = "value"
        self.parameter_12___ve_release_id_314["output_type"] = "val"
        self.parameter_12___ve_release_id_314["minimum"] = round(0,2)
        self.parameter_12___ve_release_id_314["maximum"] = round(100,2)
        self.parameter_12___ve_release_id_314["decimal_places"] = 2
        self.parameter_12___ve_release_id_314["ui_listener"] = "value"
        self.parameter_12___ve_release_id_314["feedback_brain"] = "feedback_range"
        self.parameter_12___ve_release_id_314["ctrl_type"] = "absolute"
        self.parameter_12___ve_release_id_314["takeover_mode"] = "Value scaling"
        self.parameter_12___ve_release_id_314["enc_first"] = 0
        self.parameter_12___ve_release_id_314["enc_second"] = 127
        self.parameter_12___ve_release_id_314["reverse_mode"] = False
        self.parameter_12___ve_release_id_314["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_12___ve_release_id_314["LED_feedback"] = "default"
        self.parameter_12___ve_release_id_314["LED_feedback_active"] = "1"
        self.parameter_12___ve_release_id_314["LED_on"] = "127"
        self.parameter_12___ve_release_id_314["LED_off"] = "0"
        self.parameter_12___ve_release_id_314["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_44"]
        self.parameter_12___ve_release_id_314["snap_to"] = True
        self.parameter_12___ve_release_id_314["json_id"] = 314
        self.parameter_12___ve_release_id_314["mapping_name"] = "Parameter 12 - Ve Release"
        self.parameter_12___ve_release_id_314["mapping_type"] = "Parameter"
        self.parameter_12___ve_release_id_314["parent_json_id"] = 302
        self.parameter_12___ve_release_id_314["parent_name"] = "parameter_bank_id_302"
        self.parameter_13___vol_vel_id_315 = {}
        self.parameter_13___vol_vel_id_315["attached_to"] = "midi_cc_ch_2_val_45"
        self.parameter_13___vol_vel_id_315["track"] = self.track_num(2)
        self.parameter_13___vol_vel_id_315["module"] = "self.song().view.selected_track.view.selected_device.parameters[21]"
        self.parameter_13___vol_vel_id_315["element"] = "value"
        self.parameter_13___vol_vel_id_315["output_type"] = "val"
        self.parameter_13___vol_vel_id_315["minimum"] = round(0,2)
        self.parameter_13___vol_vel_id_315["maximum"] = round(100,2)
        self.parameter_13___vol_vel_id_315["decimal_places"] = 2
        self.parameter_13___vol_vel_id_315["ui_listener"] = "value"
        self.parameter_13___vol_vel_id_315["feedback_brain"] = "feedback_range"
        self.parameter_13___vol_vel_id_315["ctrl_type"] = "absolute"
        self.parameter_13___vol_vel_id_315["takeover_mode"] = "Value scaling"
        self.parameter_13___vol_vel_id_315["enc_first"] = 0
        self.parameter_13___vol_vel_id_315["enc_second"] = 127
        self.parameter_13___vol_vel_id_315["reverse_mode"] = False
        self.parameter_13___vol_vel_id_315["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_13___vol_vel_id_315["LED_feedback"] = "default"
        self.parameter_13___vol_vel_id_315["LED_feedback_active"] = "1"
        self.parameter_13___vol_vel_id_315["LED_on"] = "127"
        self.parameter_13___vol_vel_id_315["LED_off"] = "0"
        self.parameter_13___vol_vel_id_315["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_45"]
        self.parameter_13___vol_vel_id_315["snap_to"] = True
        self.parameter_13___vol_vel_id_315["json_id"] = 315
        self.parameter_13___vol_vel_id_315["mapping_name"] = "Parameter 13 - Vol < Vel"
        self.parameter_13___vol_vel_id_315["mapping_type"] = "Parameter"
        self.parameter_13___vol_vel_id_315["parent_json_id"] = 302
        self.parameter_13___vol_vel_id_315["parent_name"] = "parameter_bank_id_302"
        self.parameter_14___trigger_mode_id_316 = {}
        self.parameter_14___trigger_mode_id_316["attached_to"] = "midi_cc_ch_2_val_46"
        self.parameter_14___trigger_mode_id_316["track"] = self.track_num(2)
        self.parameter_14___trigger_mode_id_316["module"] = "self.song().view.selected_track.view.selected_device.parameters[34]"
        self.parameter_14___trigger_mode_id_316["element"] = "value"
        self.parameter_14___trigger_mode_id_316["output_type"] = "val"
        self.parameter_14___trigger_mode_id_316["minimum"] = round(0,2)
        self.parameter_14___trigger_mode_id_316["maximum"] = round(100,2)
        self.parameter_14___trigger_mode_id_316["decimal_places"] = 2
        self.parameter_14___trigger_mode_id_316["ui_listener"] = "value"
        self.parameter_14___trigger_mode_id_316["feedback_brain"] = "feedback_range"
        self.parameter_14___trigger_mode_id_316["ctrl_type"] = "absolute"
        self.parameter_14___trigger_mode_id_316["takeover_mode"] = "Value scaling"
        self.parameter_14___trigger_mode_id_316["enc_first"] = 0
        self.parameter_14___trigger_mode_id_316["enc_second"] = 127
        self.parameter_14___trigger_mode_id_316["reverse_mode"] = False
        self.parameter_14___trigger_mode_id_316["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_14___trigger_mode_id_316["LED_feedback"] = "default"
        self.parameter_14___trigger_mode_id_316["LED_feedback_active"] = "1"
        self.parameter_14___trigger_mode_id_316["LED_on"] = "127"
        self.parameter_14___trigger_mode_id_316["LED_off"] = "0"
        self.parameter_14___trigger_mode_id_316["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_46"]
        self.parameter_14___trigger_mode_id_316["snap_to"] = True
        self.parameter_14___trigger_mode_id_316["json_id"] = 316
        self.parameter_14___trigger_mode_id_316["mapping_name"] = "Parameter 14 - Trigger Mode"
        self.parameter_14___trigger_mode_id_316["mapping_type"] = "Parameter"
        self.parameter_14___trigger_mode_id_316["parent_json_id"] = 302
        self.parameter_14___trigger_mode_id_316["parent_name"] = "parameter_bank_id_302"
        self.parameter_15___fade_in_id_317 = {}
        self.parameter_15___fade_in_id_317["attached_to"] = "midi_cc_ch_2_val_47"
        self.parameter_15___fade_in_id_317["track"] = self.track_num(2)
        self.parameter_15___fade_in_id_317["module"] = "self.song().view.selected_track.view.selected_device.parameters[33]"
        self.parameter_15___fade_in_id_317["element"] = "value"
        self.parameter_15___fade_in_id_317["output_type"] = "val"
        self.parameter_15___fade_in_id_317["minimum"] = round(0,2)
        self.parameter_15___fade_in_id_317["maximum"] = round(100,2)
        self.parameter_15___fade_in_id_317["decimal_places"] = 2
        self.parameter_15___fade_in_id_317["ui_listener"] = "value"
        self.parameter_15___fade_in_id_317["feedback_brain"] = "feedback_range"
        self.parameter_15___fade_in_id_317["ctrl_type"] = "absolute"
        self.parameter_15___fade_in_id_317["takeover_mode"] = "Value scaling"
        self.parameter_15___fade_in_id_317["enc_first"] = 0
        self.parameter_15___fade_in_id_317["enc_second"] = 127
        self.parameter_15___fade_in_id_317["reverse_mode"] = False
        self.parameter_15___fade_in_id_317["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_15___fade_in_id_317["LED_feedback"] = "default"
        self.parameter_15___fade_in_id_317["LED_feedback_active"] = "1"
        self.parameter_15___fade_in_id_317["LED_on"] = "127"
        self.parameter_15___fade_in_id_317["LED_off"] = "0"
        self.parameter_15___fade_in_id_317["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_47"]
        self.parameter_15___fade_in_id_317["snap_to"] = True
        self.parameter_15___fade_in_id_317["json_id"] = 317
        self.parameter_15___fade_in_id_317["mapping_name"] = "Parameter 15 - Fade In"
        self.parameter_15___fade_in_id_317["mapping_type"] = "Parameter"
        self.parameter_15___fade_in_id_317["parent_json_id"] = 302
        self.parameter_15___fade_in_id_317["parent_name"] = "parameter_bank_id_302"
        self.parameter_16___fade_out_id_318 = {}
        self.parameter_16___fade_out_id_318["attached_to"] = "midi_cc_ch_2_val_48"
        self.parameter_16___fade_out_id_318["track"] = self.track_num(2)
        self.parameter_16___fade_out_id_318["module"] = "self.song().view.selected_track.view.selected_device.parameters[35]"
        self.parameter_16___fade_out_id_318["element"] = "value"
        self.parameter_16___fade_out_id_318["output_type"] = "val"
        self.parameter_16___fade_out_id_318["minimum"] = round(0,2)
        self.parameter_16___fade_out_id_318["maximum"] = round(100,2)
        self.parameter_16___fade_out_id_318["decimal_places"] = 2
        self.parameter_16___fade_out_id_318["ui_listener"] = "value"
        self.parameter_16___fade_out_id_318["feedback_brain"] = "feedback_range"
        self.parameter_16___fade_out_id_318["ctrl_type"] = "absolute"
        self.parameter_16___fade_out_id_318["takeover_mode"] = "Value scaling"
        self.parameter_16___fade_out_id_318["enc_first"] = 0
        self.parameter_16___fade_out_id_318["enc_second"] = 127
        self.parameter_16___fade_out_id_318["reverse_mode"] = False
        self.parameter_16___fade_out_id_318["LED_mapping_type_needs_feedback"] = "1"
        self.parameter_16___fade_out_id_318["LED_feedback"] = "default"
        self.parameter_16___fade_out_id_318["LED_feedback_active"] = "1"
        self.parameter_16___fade_out_id_318["LED_on"] = "127"
        self.parameter_16___fade_out_id_318["LED_off"] = "0"
        self.parameter_16___fade_out_id_318["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_48"]
        self.parameter_16___fade_out_id_318["snap_to"] = True
        self.parameter_16___fade_out_id_318["json_id"] = 318
        self.parameter_16___fade_out_id_318["mapping_name"] = "Parameter 16 - Fade Out"
        self.parameter_16___fade_out_id_318["mapping_type"] = "Parameter"
        self.parameter_16___fade_out_id_318["parent_json_id"] = 302
        self.parameter_16___fade_out_id_318["parent_name"] = "parameter_bank_id_302"
        self.track_nav_left_copy_id_319 = {}
        self.track_nav_left_copy_id_319["attached_to"] = "midi_cc_ch_2_val_114"
        self.track_nav_left_copy_id_319["module"] = "self"
        self.track_nav_left_copy_id_319["element"] = "scroll_highlight"
        self.track_nav_left_copy_id_319["output_type"] = "func"
        self.track_nav_left_copy_id_319["func_arg"] = "cnfg"
        self.track_nav_left_copy_id_319["tracks_scenes"] = "tracks"
        self.track_nav_left_copy_id_319["ui_listener"] = "tracks"
        self.track_nav_left_copy_id_319["feedback_brain"] = "feedback_highlight_nav"
        self.track_nav_left_copy_id_319["ctrl_type"] = "decrement"
        self.track_nav_left_copy_id_319["enc_first"] = 127
        self.track_nav_left_copy_id_319["enc_second"] = 0
        self.track_nav_left_copy_id_319["steps"] = 1
        self.track_nav_left_copy_id_319["switch_type"] = "toggle"
        self.track_nav_left_copy_id_319["LED_mapping_type_needs_feedback"] = "1"
        self.track_nav_left_copy_id_319["LED_feedback"] = "default"
        self.track_nav_left_copy_id_319["LED_feedback_active"] = "1"
        self.track_nav_left_copy_id_319["LED_on"] = "127"
        self.track_nav_left_copy_id_319["LED_off"] = "0"
        self.track_nav_left_copy_id_319["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_114"]
        self.track_nav_left_copy_id_319["json_id"] = 319
        self.track_nav_left_copy_id_319["mapping_name"] = "Track Nav Left copy"
        self.track_nav_left_copy_id_319["mapping_type"] = "Highlight Navigation"
        self.track_nav_left_copy_id_319["parent_json_id"] = 298
        self.track_nav_left_copy_id_319["parent_name"] = "device___simpler_mode4_selfmodes5_id_298"
        self.track_nav_right_copy_id_320 = {}
        self.track_nav_right_copy_id_320["attached_to"] = "midi_cc_ch_2_val_115"
        self.track_nav_right_copy_id_320["module"] = "self"
        self.track_nav_right_copy_id_320["element"] = "scroll_highlight"
        self.track_nav_right_copy_id_320["output_type"] = "func"
        self.track_nav_right_copy_id_320["func_arg"] = "cnfg"
        self.track_nav_right_copy_id_320["tracks_scenes"] = "tracks"
        self.track_nav_right_copy_id_320["ui_listener"] = "tracks"
        self.track_nav_right_copy_id_320["feedback_brain"] = "feedback_highlight_nav"
        self.track_nav_right_copy_id_320["ctrl_type"] = "increment"
        self.track_nav_right_copy_id_320["enc_first"] = 127
        self.track_nav_right_copy_id_320["enc_second"] = 0
        self.track_nav_right_copy_id_320["steps"] = 1
        self.track_nav_right_copy_id_320["switch_type"] = "toggle"
        self.track_nav_right_copy_id_320["LED_mapping_type_needs_feedback"] = "1"
        self.track_nav_right_copy_id_320["LED_feedback"] = "default"
        self.track_nav_right_copy_id_320["LED_feedback_active"] = "1"
        self.track_nav_right_copy_id_320["LED_on"] = "127"
        self.track_nav_right_copy_id_320["LED_off"] = "0"
        self.track_nav_right_copy_id_320["LED_send_feedback_to_selected"] = ["midi_cc_ch_2_val_115"]
        self.track_nav_right_copy_id_320["json_id"] = 320
        self.track_nav_right_copy_id_320["mapping_name"] = "Track Nav Right copy"
        self.track_nav_right_copy_id_320["mapping_type"] = "Highlight Navigation"
        self.track_nav_right_copy_id_320["parent_json_id"] = 298
        self.track_nav_right_copy_id_320["parent_name"] = "device___simpler_mode4_selfmodes5_id_298"
    def _mode1_self_song_add_record_mode_listener_id_186(self):
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.record_mode_changed()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction '-> Recording stopped' (from 'Song - record mode' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
    def _mode1_self_song_add_is_playing_listener_id_186(self):
        try:
            reaction_listener_number = 2
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.record_mode_changed()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction '-> Recording stopped' (from 'Song - is playing' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
    def _mode1_self_song_view_add_selected_track_listener_id_203(self):
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.new_track_selected()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Selected track changed' (from 'Song - selected track' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
    def _mode1_self_song_view_add_selected_track_listener_id_206(self):
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.log_message("csslog:selected device:  " + str(self.song().view.selected_track.view.selected_device.class_display_name ))
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Selected track or device changed copy' (from 'Song - selected track' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            if self.user.is_selected_device_custom_mapped():
                self.set_active_mode(self.modes[self.user.mode_for_selected_device()])
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 2' in reaction 'Selected track or device changed copy' (from 'Song - selected track' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
    def _mode1_self_song_view_selected_track_view_add_selected_device_listener_id_206(self):
        try:
            reaction_listener_number = 2
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.log_message("csslog:selected device:  " + str(self.song().view.selected_track.view.selected_device.class_display_name ))
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Selected track or device changed copy' (from 'Track - selected device' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
        try:
            reaction_listener_number = 2
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            if self.user.is_selected_device_custom_mapped():
                self.set_active_mode(self.modes[self.user.mode_for_selected_device()])
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 2' in reaction 'Selected track or device changed copy' (from 'Track - selected device' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
    def _mode240_self_song_view_add_selected_track_listener_id_248(self):
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.new_track_selected()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Selected track changed' (from 'Song - selected track' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
    def _mode268_self_song_view_add_selected_track_listener_id_295(self):
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.new_track_selected()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Selected track changed' (from 'Song - selected track' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
    def _mode298_self_song_view_add_selected_track_listener_id_325(self):
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.user.new_track_selected()
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Selected track changed' (from 'Song - selected track' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
    def _mode_240_mode_is_activated(self):
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.show_message(str("Wave table mode active"))
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Mode Active' (from 'mode is activated' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
    def _mode_268_mode_is_activated(self):
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.show_message(str("Wave table mode active"))
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Mode Active' (from 'mode is activated' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
    def _mode_298_mode_is_activated(self):
        try:
            reaction_listener_number = 1
            loop_is_active = False
            loop_number = 0
            loop_result_count = 0
            self.show_message(str("Wave table mode active"))
        except Exception as e:
            self.log_message("csslog:(CK LC16 - Generated) There's a problem with 'Action Block 1' in reaction 'Mode Active' (from 'mode is activated' listener) >> ")
            self.log_message("csslog: >> " + str(e) )
    def _mode1_led_listeners(self):
        try:
            self._mode1_fire_all_feedback()
        except:
            self.log("_mode1_led_listeners tried to call _mode1_fire_all_feedback but it does not exist")
        try:
            self.song().add_tracks_listener(self._all_tracks_listener)
        except:
            self.log("_mode1_led_listeners tried to call add_tracks_listener but it does not exist")
        try:
            self.all_track_device_listeners()
        except:
            self.log("_mode1_led_listeners tried to call all_track_device_listeners but it does not exist")
        try:
            self._mode1_ui_listeners()
        except:
            self.log("_mode1_led_listeners tried to call _mode1_ui_listeners but it does not exist")
        self.track_feedback(1)
        self.device_feedback(1)
        self.mode_device_bank_leds(1)
        self.midi_note_ch_8_val_9.send_value(52)
    def _mode240_led_listeners(self):
        try:
            self._mode240_fire_all_feedback()
        except:
            self.log("_mode240_led_listeners tried to call _mode240_fire_all_feedback but it does not exist")
        try:
            self.song().add_tracks_listener(self._all_tracks_listener)
        except:
            self.log("_mode240_led_listeners tried to call add_tracks_listener but it does not exist")
        try:
            self.all_track_device_listeners()
        except:
            self.log("_mode240_led_listeners tried to call all_track_device_listeners but it does not exist")
        try:
            self._mode240_ui_listeners()
        except:
            self.log("_mode240_led_listeners tried to call _mode240_ui_listeners but it does not exist")
        self.track_feedback(240)
        self.device_feedback(240)
        self.mode_device_bank_leds(240)
        self.midi_note_ch_8_val_9.send_value(127)
    def _mode87_led_listeners(self):
        try:
            self._mode87_fire_all_feedback()
        except:
            self.log("_mode87_led_listeners tried to call _mode87_fire_all_feedback but it does not exist")
        try:
            self.song().add_tracks_listener(self._all_tracks_listener)
        except:
            self.log("_mode87_led_listeners tried to call add_tracks_listener but it does not exist")
        try:
            self.all_track_device_listeners()
        except:
            self.log("_mode87_led_listeners tried to call all_track_device_listeners but it does not exist")
        try:
            self._mode87_ui_listeners()
        except:
            self.log("_mode87_led_listeners tried to call _mode87_ui_listeners but it does not exist")
        self.track_feedback(87)
        self.device_feedback(87)
        self.mode_device_bank_leds(87)
        self.midi_note_ch_8_val_9.send_value(55)
    def _mode268_led_listeners(self):
        try:
            self._mode268_fire_all_feedback()
        except:
            self.log("_mode268_led_listeners tried to call _mode268_fire_all_feedback but it does not exist")
        try:
            self.song().add_tracks_listener(self._all_tracks_listener)
        except:
            self.log("_mode268_led_listeners tried to call add_tracks_listener but it does not exist")
        try:
            self.all_track_device_listeners()
        except:
            self.log("_mode268_led_listeners tried to call all_track_device_listeners but it does not exist")
        try:
            self._mode268_ui_listeners()
        except:
            self.log("_mode268_led_listeners tried to call _mode268_ui_listeners but it does not exist")
        self.track_feedback(268)
        self.device_feedback(268)
        self.mode_device_bank_leds(268)
        self.midi_note_ch_8_val_9.send_value(127)
    def _mode298_led_listeners(self):
        try:
            self._mode298_fire_all_feedback()
        except:
            self.log("_mode298_led_listeners tried to call _mode298_fire_all_feedback but it does not exist")
        try:
            self.song().add_tracks_listener(self._all_tracks_listener)
        except:
            self.log("_mode298_led_listeners tried to call add_tracks_listener but it does not exist")
        try:
            self.all_track_device_listeners()
        except:
            self.log("_mode298_led_listeners tried to call all_track_device_listeners but it does not exist")
        try:
            self._mode298_ui_listeners()
        except:
            self.log("_mode298_led_listeners tried to call _mode298_ui_listeners but it does not exist")
        self.track_feedback(298)
        self.device_feedback(298)
        self.mode_device_bank_leds(298)
        self.midi_note_ch_8_val_9.send_value(127)
    def _remove_mode1_led_listeners(self):
        try:
            self.song().remove_tracks_listener(self._all_tracks_listener)
        except:
            self.log("_remove_mode1_led_listeners tried to call remove_tracks_listener but it does not exist")
        try:
            self._remove_all_track_device_listeners()
        except:
            self.log("_remove_mode1_led_listeners tried to call _remove_all_track_device_listeners but it does not exist")
        try:
            self._remove_mode1_ui_listeners()
        except:
            self.log("_remove_mode1_led_listeners tried to call _remove_mode1_ui_listeners but it does not exist")
        self.midi_note_ch_8_val_9.send_value(0)
    def _remove_mode240_led_listeners(self):
        try:
            self.song().remove_tracks_listener(self._all_tracks_listener)
        except:
            self.log("_remove_mode240_led_listeners tried to call remove_tracks_listener but it does not exist")
        try:
            self._remove_all_track_device_listeners()
        except:
            self.log("_remove_mode240_led_listeners tried to call _remove_all_track_device_listeners but it does not exist")
        try:
            self._remove_mode240_ui_listeners()
        except:
            self.log("_remove_mode240_led_listeners tried to call _remove_mode240_ui_listeners but it does not exist")
        self.midi_note_ch_8_val_9.send_value(0)
    def _remove_mode87_led_listeners(self):
        try:
            self.song().remove_tracks_listener(self._all_tracks_listener)
        except:
            self.log("_remove_mode87_led_listeners tried to call remove_tracks_listener but it does not exist")
        try:
            self._remove_all_track_device_listeners()
        except:
            self.log("_remove_mode87_led_listeners tried to call _remove_all_track_device_listeners but it does not exist")
        try:
            self._remove_mode87_ui_listeners()
        except:
            self.log("_remove_mode87_led_listeners tried to call _remove_mode87_ui_listeners but it does not exist")
        self.midi_note_ch_8_val_9.send_value(0)
    def _remove_mode268_led_listeners(self):
        try:
            self.song().remove_tracks_listener(self._all_tracks_listener)
        except:
            self.log("_remove_mode268_led_listeners tried to call remove_tracks_listener but it does not exist")
        try:
            self._remove_all_track_device_listeners()
        except:
            self.log("_remove_mode268_led_listeners tried to call _remove_all_track_device_listeners but it does not exist")
        try:
            self._remove_mode268_ui_listeners()
        except:
            self.log("_remove_mode268_led_listeners tried to call _remove_mode268_ui_listeners but it does not exist")
        self.midi_note_ch_8_val_9.send_value(0)
    def _remove_mode298_led_listeners(self):
        try:
            self.song().remove_tracks_listener(self._all_tracks_listener)
        except:
            self.log("_remove_mode298_led_listeners tried to call remove_tracks_listener but it does not exist")
        try:
            self._remove_all_track_device_listeners()
        except:
            self.log("_remove_mode298_led_listeners tried to call _remove_all_track_device_listeners but it does not exist")
        try:
            self._remove_mode298_ui_listeners()
        except:
            self.log("_remove_mode298_led_listeners tried to call _remove_mode298_ui_listeners but it does not exist")
        self.midi_note_ch_8_val_9.send_value(0)
    def _mode240_ui_listeners(self):
        try:
            self.parameter_1___osc_1_detune_id_251_led = eval(self.parameter_1___osc_1_detune_id_251["module"])
            self.parameter_1___osc_1_detune_id_251_led.add_value_listener(self.parameter_1___osc_1_detune_id_251_led_listener)
        except:
            self.log("_mode240_ui_listeners: " + str(self.parameter_1___osc_1_detune_id_251["element"]) + " does not exist")
        try:
            self.parameter_2___osc_1_pos_id_252_led = eval(self.parameter_2___osc_1_pos_id_252["module"])
            self.parameter_2___osc_1_pos_id_252_led.add_value_listener(self.parameter_2___osc_1_pos_id_252_led_listener)
        except:
            self.log("_mode240_ui_listeners: " + str(self.parameter_2___osc_1_pos_id_252["element"]) + " does not exist")
        try:
            self.parameter_3___osc_1_effect_1_id_253_led = eval(self.parameter_3___osc_1_effect_1_id_253["module"])
            self.parameter_3___osc_1_effect_1_id_253_led.add_value_listener(self.parameter_3___osc_1_effect_1_id_253_led_listener)
        except:
            self.log("_mode240_ui_listeners: " + str(self.parameter_3___osc_1_effect_1_id_253["element"]) + " does not exist")
        try:
            self.parameter_4___osc_1_effect_2_id_254_led = eval(self.parameter_4___osc_1_effect_2_id_254["module"])
            self.parameter_4___osc_1_effect_2_id_254_led.add_value_listener(self.parameter_4___osc_1_effect_2_id_254_led_listener)
        except:
            self.log("_mode240_ui_listeners: " + str(self.parameter_4___osc_1_effect_2_id_254["element"]) + " does not exist")
        try:
            self.parameter_5___filter_1_type_id_255_led = eval(self.parameter_5___filter_1_type_id_255["module"])
            self.parameter_5___filter_1_type_id_255_led.add_value_listener(self.parameter_5___filter_1_type_id_255_led_listener)
        except:
            self.log("_mode240_ui_listeners: " + str(self.parameter_5___filter_1_type_id_255["element"]) + " does not exist")
        try:
            self.parameter_6___filter_1_lphp_id_256_led = eval(self.parameter_6___filter_1_lphp_id_256["module"])
            self.parameter_6___filter_1_lphp_id_256_led.add_value_listener(self.parameter_6___filter_1_lphp_id_256_led_listener)
        except:
            self.log("_mode240_ui_listeners: " + str(self.parameter_6___filter_1_lphp_id_256["element"]) + " does not exist")
        try:
            self.parameter_7___filter_1_freq_id_257_led = eval(self.parameter_7___filter_1_freq_id_257["module"])
            self.parameter_7___filter_1_freq_id_257_led.add_value_listener(self.parameter_7___filter_1_freq_id_257_led_listener)
        except:
            self.log("_mode240_ui_listeners: " + str(self.parameter_7___filter_1_freq_id_257["element"]) + " does not exist")
        try:
            self.parameter_8___filter_1_res_id_258_led = eval(self.parameter_8___filter_1_res_id_258["module"])
            self.parameter_8___filter_1_res_id_258_led.add_value_listener(self.parameter_8___filter_1_res_id_258_led_listener)
        except:
            self.log("_mode240_ui_listeners: " + str(self.parameter_8___filter_1_res_id_258["element"]) + " does not exist")
        try:
            self.parameter_9___amp_attack_id_259_led = eval(self.parameter_9___amp_attack_id_259["module"])
            self.parameter_9___amp_attack_id_259_led.add_value_listener(self.parameter_9___amp_attack_id_259_led_listener)
        except:
            self.log("_mode240_ui_listeners: " + str(self.parameter_9___amp_attack_id_259["element"]) + " does not exist")
        try:
            self.parameter_10___amp_decay_id_260_led = eval(self.parameter_10___amp_decay_id_260["module"])
            self.parameter_10___amp_decay_id_260_led.add_value_listener(self.parameter_10___amp_decay_id_260_led_listener)
        except:
            self.log("_mode240_ui_listeners: " + str(self.parameter_10___amp_decay_id_260["element"]) + " does not exist")
        try:
            self.parameter_11___amp_release_id_261_led = eval(self.parameter_11___amp_release_id_261["module"])
            self.parameter_11___amp_release_id_261_led.add_value_listener(self.parameter_11___amp_release_id_261_led_listener)
        except:
            self.log("_mode240_ui_listeners: " + str(self.parameter_11___amp_release_id_261["element"]) + " does not exist")
        try:
            self.parameter_12___amp_sustain_id_262_led = eval(self.parameter_12___amp_sustain_id_262["module"])
            self.parameter_12___amp_sustain_id_262_led.add_value_listener(self.parameter_12___amp_sustain_id_262_led_listener)
        except:
            self.log("_mode240_ui_listeners: " + str(self.parameter_12___amp_sustain_id_262["element"]) + " does not exist")
        try:
            self.parameter_13___unison_amount_id_263_led = eval(self.parameter_13___unison_amount_id_263["module"])
            self.parameter_13___unison_amount_id_263_led.add_value_listener(self.parameter_13___unison_amount_id_263_led_listener)
        except:
            self.log("_mode240_ui_listeners: " + str(self.parameter_13___unison_amount_id_263["element"]) + " does not exist")
        try:
            self.parameter_14___transpose_id_264_led = eval(self.parameter_14___transpose_id_264["module"])
            self.parameter_14___transpose_id_264_led.add_value_listener(self.parameter_14___transpose_id_264_led_listener)
        except:
            self.log("_mode240_ui_listeners: " + str(self.parameter_14___transpose_id_264["element"]) + " does not exist")
        try:
            self.parameter_15___glide_id_265_led = eval(self.parameter_15___glide_id_265["module"])
            self.parameter_15___glide_id_265_led.add_value_listener(self.parameter_15___glide_id_265_led_listener)
        except:
            self.log("_mode240_ui_listeners: " + str(self.parameter_15___glide_id_265["element"]) + " does not exist")
        try:
            self.parameter_16___volume_id_266_led = eval(self.parameter_16___volume_id_266["module"])
            self.parameter_16___volume_id_266_led.add_value_listener(self.parameter_16___volume_id_266_led_listener)
        except:
            self.log("_mode240_ui_listeners: " + str(self.parameter_16___volume_id_266["element"]) + " does not exist")
        try:
            self.song().add_tracks_listener(self.track_nav_left_copy_id_242_led_listener)
        except:
            self.log("_mode240_ui_listeners: self.song().add_track_listener does not exist")
        try:
            self.song().add_tracks_listener(self.track_nav_right_copy_id_243_led_listener)
        except:
            self.log("_mode240_ui_listeners: self.song().add_track_listener does not exist")
    def _mode1_ui_listeners(self):
        try:
            self.pad_3___track_mute_id_21_led = eval(self.pad_3___track_mute_id_21["module"])
            self.pad_3___track_mute_id_21_led.add_mute_listener(self.pad_3___track_mute_id_21_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.pad_3___track_mute_id_21["element"]) + " does not exist")
        try:
            self.pad_4___device_onoff_id_25_led = eval(self.pad_4___device_onoff_id_25["module"])
            self.pad_4___device_onoff_id_25_led.add_value_listener(self.pad_4___device_onoff_id_25_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.pad_4___device_onoff_id_25["element"]) + " does not exist")
        try:
            self.parameter_1_id_60_led = eval(self.parameter_1_id_60["module"])
            self.parameter_1_id_60_led.add_value_listener(self.parameter_1_id_60_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.parameter_1_id_60["element"]) + " does not exist")
        try:
            self.parameter_2_id_61_led = eval(self.parameter_2_id_61["module"])
            self.parameter_2_id_61_led.add_value_listener(self.parameter_2_id_61_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.parameter_2_id_61["element"]) + " does not exist")
        try:
            self.parameter_3_id_62_led = eval(self.parameter_3_id_62["module"])
            self.parameter_3_id_62_led.add_value_listener(self.parameter_3_id_62_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.parameter_3_id_62["element"]) + " does not exist")
        try:
            self.parameter_4_id_63_led = eval(self.parameter_4_id_63["module"])
            self.parameter_4_id_63_led.add_value_listener(self.parameter_4_id_63_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.parameter_4_id_63["element"]) + " does not exist")
        try:
            self.parameter_5_id_64_led = eval(self.parameter_5_id_64["module"])
            self.parameter_5_id_64_led.add_value_listener(self.parameter_5_id_64_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.parameter_5_id_64["element"]) + " does not exist")
        try:
            self.parameter_6_id_65_led = eval(self.parameter_6_id_65["module"])
            self.parameter_6_id_65_led.add_value_listener(self.parameter_6_id_65_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.parameter_6_id_65["element"]) + " does not exist")
        try:
            self.parameter_7_id_66_led = eval(self.parameter_7_id_66["module"])
            self.parameter_7_id_66_led.add_value_listener(self.parameter_7_id_66_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.parameter_7_id_66["element"]) + " does not exist")
        try:
            self.parameter_8_id_67_led = eval(self.parameter_8_id_67["module"])
            self.parameter_8_id_67_led.add_value_listener(self.parameter_8_id_67_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.parameter_8_id_67["element"]) + " does not exist")
        try:
            self.song().add_tracks_listener(self.track_nav_left_id_83_led_listener)
        except:
            self.log("_mode1_ui_listeners: self.song().add_track_listener does not exist")
        try:
            self.parameter_9_id_100_led = eval(self.parameter_9_id_100["module"])
            self.parameter_9_id_100_led.add_value_listener(self.parameter_9_id_100_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.parameter_9_id_100["element"]) + " does not exist")
        try:
            self.parameter_10_id_101_led = eval(self.parameter_10_id_101["module"])
            self.parameter_10_id_101_led.add_value_listener(self.parameter_10_id_101_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.parameter_10_id_101["element"]) + " does not exist")
        try:
            self.parameter_11_id_102_led = eval(self.parameter_11_id_102["module"])
            self.parameter_11_id_102_led.add_value_listener(self.parameter_11_id_102_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.parameter_11_id_102["element"]) + " does not exist")
        try:
            self.parameter_12_id_103_led = eval(self.parameter_12_id_103["module"])
            self.parameter_12_id_103_led.add_value_listener(self.parameter_12_id_103_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.parameter_12_id_103["element"]) + " does not exist")
        try:
            self.parameter_13_id_104_led = eval(self.parameter_13_id_104["module"])
            self.parameter_13_id_104_led.add_value_listener(self.parameter_13_id_104_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.parameter_13_id_104["element"]) + " does not exist")
        try:
            self.parameter_14_id_105_led = eval(self.parameter_14_id_105["module"])
            self.parameter_14_id_105_led.add_value_listener(self.parameter_14_id_105_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.parameter_14_id_105["element"]) + " does not exist")
        try:
            self.parameter_15_id_106_led = eval(self.parameter_15_id_106["module"])
            self.parameter_15_id_106_led.add_value_listener(self.parameter_15_id_106_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.parameter_15_id_106["element"]) + " does not exist")
        try:
            self.parameter_16_id_107_led = eval(self.parameter_16_id_107["module"])
            self.parameter_16_id_107_led.add_value_listener(self.parameter_16_id_107_led_listener)
        except:
            self.log("_mode1_ui_listeners: " + str(self.parameter_16_id_107["element"]) + " does not exist")
        try:
            self.song().add_tracks_listener(self.track_nav_right_id_134_led_listener)
        except:
            self.log("_mode1_ui_listeners: self.song().add_track_listener does not exist")
    def _mode87_ui_listeners(self):
        try:
            self.parameter_1_id_73_led = eval(self.parameter_1_id_73["module"])
            self.parameter_1_id_73_led.add_value_listener(self.parameter_1_id_73_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.parameter_1_id_73["element"]) + " does not exist")
        try:
            self.parameter_2_id_74_led = eval(self.parameter_2_id_74["module"])
            self.parameter_2_id_74_led.add_value_listener(self.parameter_2_id_74_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.parameter_2_id_74["element"]) + " does not exist")
        try:
            self.parameter_3_id_75_led = eval(self.parameter_3_id_75["module"])
            self.parameter_3_id_75_led.add_value_listener(self.parameter_3_id_75_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.parameter_3_id_75["element"]) + " does not exist")
        try:
            self.parameter_4_id_76_led = eval(self.parameter_4_id_76["module"])
            self.parameter_4_id_76_led.add_value_listener(self.parameter_4_id_76_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.parameter_4_id_76["element"]) + " does not exist")
        try:
            self.parameter_5_id_77_led = eval(self.parameter_5_id_77["module"])
            self.parameter_5_id_77_led.add_value_listener(self.parameter_5_id_77_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.parameter_5_id_77["element"]) + " does not exist")
        try:
            self.parameter_6_id_78_led = eval(self.parameter_6_id_78["module"])
            self.parameter_6_id_78_led.add_value_listener(self.parameter_6_id_78_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.parameter_6_id_78["element"]) + " does not exist")
        try:
            self.parameter_7_id_79_led = eval(self.parameter_7_id_79["module"])
            self.parameter_7_id_79_led.add_value_listener(self.parameter_7_id_79_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.parameter_7_id_79["element"]) + " does not exist")
        try:
            self.parameter_8_id_80_led = eval(self.parameter_8_id_80["module"])
            self.parameter_8_id_80_led.add_value_listener(self.parameter_8_id_80_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.parameter_8_id_80["element"]) + " does not exist")
        try:
            self.volume_1_id_108_led = eval(self.volume_1_id_108["module"])
            self.volume_1_id_108_led.add_value_listener(self.volume_1_id_108_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.volume_1_id_108["element"]) + " does not exist")
        try:
            self.pan_1_id_109_led = eval(self.pan_1_id_109["module"])
            self.pan_1_id_109_led.add_value_listener(self.pan_1_id_109_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.pan_1_id_109["element"]) + " does not exist")
        try:
            self.send_1_id_188_led = eval(self.send_1_id_188["module"])
            self.send_1_id_188_led.add_value_listener(self.send_1_id_188_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.send_1_id_188["element"]) + " does not exist")
        try:
            self.send_2_id_189_led = eval(self.send_2_id_189["module"])
            self.send_2_id_189_led.add_value_listener(self.send_2_id_189_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.send_2_id_189["element"]) + " does not exist")
        try:
            self.send_3_id_190_led = eval(self.send_3_id_190["module"])
            self.send_3_id_190_led.add_value_listener(self.send_3_id_190_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.send_3_id_190["element"]) + " does not exist")
        try:
            self.send_4_id_191_led = eval(self.send_4_id_191["module"])
            self.send_4_id_191_led.add_value_listener(self.send_4_id_191_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.send_4_id_191["element"]) + " does not exist")
        try:
            self.send_5_id_192_led = eval(self.send_5_id_192["module"])
            self.send_5_id_192_led.add_value_listener(self.send_5_id_192_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.send_5_id_192["element"]) + " does not exist")
        try:
            self.send_6_id_193_led = eval(self.send_6_id_193["module"])
            self.send_6_id_193_led.add_value_listener(self.send_6_id_193_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.send_6_id_193["element"]) + " does not exist")
        try:
            self.send_1_id_233_led = eval(self.send_1_id_233["module"])
            self.send_1_id_233_led.add_value_listener(self.send_1_id_233_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.send_1_id_233["element"]) + " does not exist")
        try:
            self.send_2_id_234_led = eval(self.send_2_id_234["module"])
            self.send_2_id_234_led.add_value_listener(self.send_2_id_234_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.send_2_id_234["element"]) + " does not exist")
        try:
            self.send_3_id_235_led = eval(self.send_3_id_235["module"])
            self.send_3_id_235_led.add_value_listener(self.send_3_id_235_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.send_3_id_235["element"]) + " does not exist")
        try:
            self.send_4_id_236_led = eval(self.send_4_id_236["module"])
            self.send_4_id_236_led.add_value_listener(self.send_4_id_236_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.send_4_id_236["element"]) + " does not exist")
        try:
            self.send_5_id_237_led = eval(self.send_5_id_237["module"])
            self.send_5_id_237_led.add_value_listener(self.send_5_id_237_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.send_5_id_237["element"]) + " does not exist")
        try:
            self.send_6_id_238_led = eval(self.send_6_id_238["module"])
            self.send_6_id_238_led.add_value_listener(self.send_6_id_238_led_listener)
        except:
            self.log("_mode87_ui_listeners: " + str(self.send_6_id_238["element"]) + " does not exist")
    def _mode268_ui_listeners(self):
        try:
            self.parameter_1___osc_1_transp_id_273_led = eval(self.parameter_1___osc_1_transp_id_273["module"])
            self.parameter_1___osc_1_transp_id_273_led.add_value_listener(self.parameter_1___osc_1_transp_id_273_led_listener)
        except:
            self.log("_mode268_ui_listeners: " + str(self.parameter_1___osc_1_transp_id_273["element"]) + " does not exist")
        try:
            self.parameter_2___osc_1_detune_id_274_led = eval(self.parameter_2___osc_1_detune_id_274["module"])
            self.parameter_2___osc_1_detune_id_274_led.add_value_listener(self.parameter_2___osc_1_detune_id_274_led_listener)
        except:
            self.log("_mode268_ui_listeners: " + str(self.parameter_2___osc_1_detune_id_274["element"]) + " does not exist")
        try:
            self.parameter_3___osc_1_pos_id_275_led = eval(self.parameter_3___osc_1_pos_id_275["module"])
            self.parameter_3___osc_1_pos_id_275_led.add_value_listener(self.parameter_3___osc_1_pos_id_275_led_listener)
        except:
            self.log("_mode268_ui_listeners: " + str(self.parameter_3___osc_1_pos_id_275["element"]) + " does not exist")
        try:
            self.parameter_4___osc_1_effect_1_id_276_led = eval(self.parameter_4___osc_1_effect_1_id_276["module"])
            self.parameter_4___osc_1_effect_1_id_276_led.add_value_listener(self.parameter_4___osc_1_effect_1_id_276_led_listener)
        except:
            self.log("_mode268_ui_listeners: " + str(self.parameter_4___osc_1_effect_1_id_276["element"]) + " does not exist")
        try:
            self.parameter_5___amp_attack_id_277_led = eval(self.parameter_5___amp_attack_id_277["module"])
            self.parameter_5___amp_attack_id_277_led.add_value_listener(self.parameter_5___amp_attack_id_277_led_listener)
        except:
            self.log("_mode268_ui_listeners: " + str(self.parameter_5___amp_attack_id_277["element"]) + " does not exist")
        try:
            self.parameter_6___amp_decay_id_278_led = eval(self.parameter_6___amp_decay_id_278["module"])
            self.parameter_6___amp_decay_id_278_led.add_value_listener(self.parameter_6___amp_decay_id_278_led_listener)
        except:
            self.log("_mode268_ui_listeners: " + str(self.parameter_6___amp_decay_id_278["element"]) + " does not exist")
        try:
            self.parameter_7___amp_sustain_id_279_led = eval(self.parameter_7___amp_sustain_id_279["module"])
            self.parameter_7___amp_sustain_id_279_led.add_value_listener(self.parameter_7___amp_sustain_id_279_led_listener)
        except:
            self.log("_mode268_ui_listeners: " + str(self.parameter_7___amp_sustain_id_279["element"]) + " does not exist")
        try:
            self.parameter_8___amp_release_id_280_led = eval(self.parameter_8___amp_release_id_280["module"])
            self.parameter_8___amp_release_id_280_led.add_value_listener(self.parameter_8___amp_release_id_280_led_listener)
        except:
            self.log("_mode268_ui_listeners: " + str(self.parameter_8___amp_release_id_280["element"]) + " does not exist")
        try:
            self.parameter_9___filter_1_freq_id_281_led = eval(self.parameter_9___filter_1_freq_id_281["module"])
            self.parameter_9___filter_1_freq_id_281_led.add_value_listener(self.parameter_9___filter_1_freq_id_281_led_listener)
        except:
            self.log("_mode268_ui_listeners: " + str(self.parameter_9___filter_1_freq_id_281["element"]) + " does not exist")
        try:
            self.parameter_10___filter_1_res_id_282_led = eval(self.parameter_10___filter_1_res_id_282["module"])
            self.parameter_10___filter_1_res_id_282_led.add_value_listener(self.parameter_10___filter_1_res_id_282_led_listener)
        except:
            self.log("_mode268_ui_listeners: " + str(self.parameter_10___filter_1_res_id_282["element"]) + " does not exist")
        try:
            self.parameter_11___filter_1_drive_id_283_led = eval(self.parameter_11___filter_1_drive_id_283["module"])
            self.parameter_11___filter_1_drive_id_283_led.add_value_listener(self.parameter_11___filter_1_drive_id_283_led_listener)
        except:
            self.log("_mode268_ui_listeners: " + str(self.parameter_11___filter_1_drive_id_283["element"]) + " does not exist")
        try:
            self.parameter_12___filter_2_freq_id_284_led = eval(self.parameter_12___filter_2_freq_id_284["module"])
            self.parameter_12___filter_2_freq_id_284_led.add_value_listener(self.parameter_12___filter_2_freq_id_284_led_listener)
        except:
            self.log("_mode268_ui_listeners: " + str(self.parameter_12___filter_2_freq_id_284["element"]) + " does not exist")
        try:
            self.parameter_13___transpose_id_285_led = eval(self.parameter_13___transpose_id_285["module"])
            self.parameter_13___transpose_id_285_led.add_value_listener(self.parameter_13___transpose_id_285_led_listener)
        except:
            self.log("_mode268_ui_listeners: " + str(self.parameter_13___transpose_id_285["element"]) + " does not exist")
        try:
            self.parameter_14___unison_amount_id_286_led = eval(self.parameter_14___unison_amount_id_286["module"])
            self.parameter_14___unison_amount_id_286_led.add_value_listener(self.parameter_14___unison_amount_id_286_led_listener)
        except:
            self.log("_mode268_ui_listeners: " + str(self.parameter_14___unison_amount_id_286["element"]) + " does not exist")
        try:
            self.parameter_15___glide_id_287_led = eval(self.parameter_15___glide_id_287["module"])
            self.parameter_15___glide_id_287_led.add_value_listener(self.parameter_15___glide_id_287_led_listener)
        except:
            self.log("_mode268_ui_listeners: " + str(self.parameter_15___glide_id_287["element"]) + " does not exist")
        try:
            self.parameter_16___volume_id_288_led = eval(self.parameter_16___volume_id_288["module"])
            self.parameter_16___volume_id_288_led.add_value_listener(self.parameter_16___volume_id_288_led_listener)
        except:
            self.log("_mode268_ui_listeners: " + str(self.parameter_16___volume_id_288["element"]) + " does not exist")
        try:
            self.song().add_tracks_listener(self.track_nav_left_copy_id_289_led_listener)
        except:
            self.log("_mode268_ui_listeners: self.song().add_track_listener does not exist")
        try:
            self.song().add_tracks_listener(self.track_nav_right_copy_id_290_led_listener)
        except:
            self.log("_mode268_ui_listeners: self.song().add_track_listener does not exist")
    def _mode298_ui_listeners(self):
        try:
            self.parameter_1___s_start_id_303_led = eval(self.parameter_1___s_start_id_303["module"])
            self.parameter_1___s_start_id_303_led.add_value_listener(self.parameter_1___s_start_id_303_led_listener)
        except:
            self.log("_mode298_ui_listeners: " + str(self.parameter_1___s_start_id_303["element"]) + " does not exist")
        try:
            self.parameter_2___s_length_id_304_led = eval(self.parameter_2___s_length_id_304["module"])
            self.parameter_2___s_length_id_304_led.add_value_listener(self.parameter_2___s_length_id_304_led_listener)
        except:
            self.log("_mode298_ui_listeners: " + str(self.parameter_2___s_length_id_304["element"]) + " does not exist")
        try:
            self.parameter_3___transpose_id_305_led = eval(self.parameter_3___transpose_id_305["module"])
            self.parameter_3___transpose_id_305_led.add_value_listener(self.parameter_3___transpose_id_305_led_listener)
        except:
            self.log("_mode298_ui_listeners: " + str(self.parameter_3___transpose_id_305["element"]) + " does not exist")
        try:
            self.parameter_4___detune_id_306_led = eval(self.parameter_4___detune_id_306["module"])
            self.parameter_4___detune_id_306_led.add_value_listener(self.parameter_4___detune_id_306_led_listener)
        except:
            self.log("_mode298_ui_listeners: " + str(self.parameter_4___detune_id_306["element"]) + " does not exist")
        try:
            self.parameter_5___filter_type_id_307_led = eval(self.parameter_5___filter_type_id_307["module"])
            self.parameter_5___filter_type_id_307_led.add_value_listener(self.parameter_5___filter_type_id_307_led_listener)
        except:
            self.log("_mode298_ui_listeners: " + str(self.parameter_5___filter_type_id_307["element"]) + " does not exist")
        try:
            self.parameter_6___filter_circuit___lphp_id_308_led = eval(self.parameter_6___filter_circuit___lphp_id_308["module"])
            self.parameter_6___filter_circuit___lphp_id_308_led.add_value_listener(self.parameter_6___filter_circuit___lphp_id_308_led_listener)
        except:
            self.log("_mode298_ui_listeners: " + str(self.parameter_6___filter_circuit___lphp_id_308["element"]) + " does not exist")
        try:
            self.parameter_7___filter_freq_id_309_led = eval(self.parameter_7___filter_freq_id_309["module"])
            self.parameter_7___filter_freq_id_309_led.add_value_listener(self.parameter_7___filter_freq_id_309_led_listener)
        except:
            self.log("_mode298_ui_listeners: " + str(self.parameter_7___filter_freq_id_309["element"]) + " does not exist")
        try:
            self.parameter_8___filter_res_id_310_led = eval(self.parameter_8___filter_res_id_310["module"])
            self.parameter_8___filter_res_id_310_led.add_value_listener(self.parameter_8___filter_res_id_310_led_listener)
        except:
            self.log("_mode298_ui_listeners: " + str(self.parameter_8___filter_res_id_310["element"]) + " does not exist")
        try:
            self.parameter_9___ve_attack_id_311_led = eval(self.parameter_9___ve_attack_id_311["module"])
            self.parameter_9___ve_attack_id_311_led.add_value_listener(self.parameter_9___ve_attack_id_311_led_listener)
        except:
            self.log("_mode298_ui_listeners: " + str(self.parameter_9___ve_attack_id_311["element"]) + " does not exist")
        try:
            self.parameter_10___ve_decay_id_312_led = eval(self.parameter_10___ve_decay_id_312["module"])
            self.parameter_10___ve_decay_id_312_led.add_value_listener(self.parameter_10___ve_decay_id_312_led_listener)
        except:
            self.log("_mode298_ui_listeners: " + str(self.parameter_10___ve_decay_id_312["element"]) + " does not exist")
        try:
            self.parameter_11___ve_sustain_id_313_led = eval(self.parameter_11___ve_sustain_id_313["module"])
            self.parameter_11___ve_sustain_id_313_led.add_value_listener(self.parameter_11___ve_sustain_id_313_led_listener)
        except:
            self.log("_mode298_ui_listeners: " + str(self.parameter_11___ve_sustain_id_313["element"]) + " does not exist")
        try:
            self.parameter_12___ve_release_id_314_led = eval(self.parameter_12___ve_release_id_314["module"])
            self.parameter_12___ve_release_id_314_led.add_value_listener(self.parameter_12___ve_release_id_314_led_listener)
        except:
            self.log("_mode298_ui_listeners: " + str(self.parameter_12___ve_release_id_314["element"]) + " does not exist")
        try:
            self.parameter_13___vol_vel_id_315_led = eval(self.parameter_13___vol_vel_id_315["module"])
            self.parameter_13___vol_vel_id_315_led.add_value_listener(self.parameter_13___vol_vel_id_315_led_listener)
        except:
            self.log("_mode298_ui_listeners: " + str(self.parameter_13___vol_vel_id_315["element"]) + " does not exist")
        try:
            self.parameter_14___trigger_mode_id_316_led = eval(self.parameter_14___trigger_mode_id_316["module"])
            self.parameter_14___trigger_mode_id_316_led.add_value_listener(self.parameter_14___trigger_mode_id_316_led_listener)
        except:
            self.log("_mode298_ui_listeners: " + str(self.parameter_14___trigger_mode_id_316["element"]) + " does not exist")
        try:
            self.parameter_15___fade_in_id_317_led = eval(self.parameter_15___fade_in_id_317["module"])
            self.parameter_15___fade_in_id_317_led.add_value_listener(self.parameter_15___fade_in_id_317_led_listener)
        except:
            self.log("_mode298_ui_listeners: " + str(self.parameter_15___fade_in_id_317["element"]) + " does not exist")
        try:
            self.parameter_16___fade_out_id_318_led = eval(self.parameter_16___fade_out_id_318["module"])
            self.parameter_16___fade_out_id_318_led.add_value_listener(self.parameter_16___fade_out_id_318_led_listener)
        except:
            self.log("_mode298_ui_listeners: " + str(self.parameter_16___fade_out_id_318["element"]) + " does not exist")
        try:
            self.song().add_tracks_listener(self.track_nav_left_copy_id_319_led_listener)
        except:
            self.log("_mode298_ui_listeners: self.song().add_track_listener does not exist")
        try:
            self.song().add_tracks_listener(self.track_nav_right_copy_id_320_led_listener)
        except:
            self.log("_mode298_ui_listeners: self.song().add_track_listener does not exist")
    def _remove_mode240_ui_listeners(self):
        try:
            self.parameter_1___osc_1_detune_id_251_led.remove_value_listener(self.parameter_1___osc_1_detune_id_251_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: " + str(self.parameter_1___osc_1_detune_id_251["element"]) + " does not exist")
        try:
            self.parameter_2___osc_1_pos_id_252_led.remove_value_listener(self.parameter_2___osc_1_pos_id_252_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: " + str(self.parameter_2___osc_1_pos_id_252["element"]) + " does not exist")
        try:
            self.parameter_3___osc_1_effect_1_id_253_led.remove_value_listener(self.parameter_3___osc_1_effect_1_id_253_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: " + str(self.parameter_3___osc_1_effect_1_id_253["element"]) + " does not exist")
        try:
            self.parameter_4___osc_1_effect_2_id_254_led.remove_value_listener(self.parameter_4___osc_1_effect_2_id_254_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: " + str(self.parameter_4___osc_1_effect_2_id_254["element"]) + " does not exist")
        try:
            self.parameter_5___filter_1_type_id_255_led.remove_value_listener(self.parameter_5___filter_1_type_id_255_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: " + str(self.parameter_5___filter_1_type_id_255["element"]) + " does not exist")
        try:
            self.parameter_6___filter_1_lphp_id_256_led.remove_value_listener(self.parameter_6___filter_1_lphp_id_256_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: " + str(self.parameter_6___filter_1_lphp_id_256["element"]) + " does not exist")
        try:
            self.parameter_7___filter_1_freq_id_257_led.remove_value_listener(self.parameter_7___filter_1_freq_id_257_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: " + str(self.parameter_7___filter_1_freq_id_257["element"]) + " does not exist")
        try:
            self.parameter_8___filter_1_res_id_258_led.remove_value_listener(self.parameter_8___filter_1_res_id_258_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: " + str(self.parameter_8___filter_1_res_id_258["element"]) + " does not exist")
        try:
            self.parameter_9___amp_attack_id_259_led.remove_value_listener(self.parameter_9___amp_attack_id_259_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: " + str(self.parameter_9___amp_attack_id_259["element"]) + " does not exist")
        try:
            self.parameter_10___amp_decay_id_260_led.remove_value_listener(self.parameter_10___amp_decay_id_260_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: " + str(self.parameter_10___amp_decay_id_260["element"]) + " does not exist")
        try:
            self.parameter_11___amp_release_id_261_led.remove_value_listener(self.parameter_11___amp_release_id_261_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: " + str(self.parameter_11___amp_release_id_261["element"]) + " does not exist")
        try:
            self.parameter_12___amp_sustain_id_262_led.remove_value_listener(self.parameter_12___amp_sustain_id_262_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: " + str(self.parameter_12___amp_sustain_id_262["element"]) + " does not exist")
        try:
            self.parameter_13___unison_amount_id_263_led.remove_value_listener(self.parameter_13___unison_amount_id_263_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: " + str(self.parameter_13___unison_amount_id_263["element"]) + " does not exist")
        try:
            self.parameter_14___transpose_id_264_led.remove_value_listener(self.parameter_14___transpose_id_264_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: " + str(self.parameter_14___transpose_id_264["element"]) + " does not exist")
        try:
            self.parameter_15___glide_id_265_led.remove_value_listener(self.parameter_15___glide_id_265_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: " + str(self.parameter_15___glide_id_265["element"]) + " does not exist")
        try:
            self.parameter_16___volume_id_266_led.remove_value_listener(self.parameter_16___volume_id_266_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: " + str(self.parameter_16___volume_id_266["element"]) + " does not exist")
        try:
            self.song().remove_tracks_listener(self.track_nav_left_copy_id_242_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: self.song() does not exist for highlight nav feedback")
        try:
            self.song().remove_tracks_listener(self.track_nav_right_copy_id_243_led_listener)
        except:
            self.log("remove__mode240_ui_listeners: self.song() does not exist for highlight nav feedback")
    def _remove_mode1_ui_listeners(self):
        try:
            self.pad_3___track_mute_id_21_led.remove_mute_listener(self.pad_3___track_mute_id_21_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.pad_3___track_mute_id_21["element"]) + " does not exist")
        try:
            self.pad_4___device_onoff_id_25_led.remove_value_listener(self.pad_4___device_onoff_id_25_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.pad_4___device_onoff_id_25["element"]) + " does not exist")
        try:
            self.parameter_1_id_60_led.remove_value_listener(self.parameter_1_id_60_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.parameter_1_id_60["element"]) + " does not exist")
        try:
            self.parameter_2_id_61_led.remove_value_listener(self.parameter_2_id_61_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.parameter_2_id_61["element"]) + " does not exist")
        try:
            self.parameter_3_id_62_led.remove_value_listener(self.parameter_3_id_62_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.parameter_3_id_62["element"]) + " does not exist")
        try:
            self.parameter_4_id_63_led.remove_value_listener(self.parameter_4_id_63_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.parameter_4_id_63["element"]) + " does not exist")
        try:
            self.parameter_5_id_64_led.remove_value_listener(self.parameter_5_id_64_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.parameter_5_id_64["element"]) + " does not exist")
        try:
            self.parameter_6_id_65_led.remove_value_listener(self.parameter_6_id_65_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.parameter_6_id_65["element"]) + " does not exist")
        try:
            self.parameter_7_id_66_led.remove_value_listener(self.parameter_7_id_66_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.parameter_7_id_66["element"]) + " does not exist")
        try:
            self.parameter_8_id_67_led.remove_value_listener(self.parameter_8_id_67_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.parameter_8_id_67["element"]) + " does not exist")
        try:
            self.song().remove_tracks_listener(self.track_nav_left_id_83_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: self.song() does not exist for highlight nav feedback")
        try:
            self.parameter_9_id_100_led.remove_value_listener(self.parameter_9_id_100_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.parameter_9_id_100["element"]) + " does not exist")
        try:
            self.parameter_10_id_101_led.remove_value_listener(self.parameter_10_id_101_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.parameter_10_id_101["element"]) + " does not exist")
        try:
            self.parameter_11_id_102_led.remove_value_listener(self.parameter_11_id_102_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.parameter_11_id_102["element"]) + " does not exist")
        try:
            self.parameter_12_id_103_led.remove_value_listener(self.parameter_12_id_103_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.parameter_12_id_103["element"]) + " does not exist")
        try:
            self.parameter_13_id_104_led.remove_value_listener(self.parameter_13_id_104_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.parameter_13_id_104["element"]) + " does not exist")
        try:
            self.parameter_14_id_105_led.remove_value_listener(self.parameter_14_id_105_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.parameter_14_id_105["element"]) + " does not exist")
        try:
            self.parameter_15_id_106_led.remove_value_listener(self.parameter_15_id_106_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.parameter_15_id_106["element"]) + " does not exist")
        try:
            self.parameter_16_id_107_led.remove_value_listener(self.parameter_16_id_107_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: " + str(self.parameter_16_id_107["element"]) + " does not exist")
        try:
            self.song().remove_tracks_listener(self.track_nav_right_id_134_led_listener)
        except:
            self.log("remove__mode1_ui_listeners: self.song() does not exist for highlight nav feedback")
    def _remove_mode87_ui_listeners(self):
        try:
            self.parameter_1_id_73_led.remove_value_listener(self.parameter_1_id_73_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.parameter_1_id_73["element"]) + " does not exist")
        try:
            self.parameter_2_id_74_led.remove_value_listener(self.parameter_2_id_74_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.parameter_2_id_74["element"]) + " does not exist")
        try:
            self.parameter_3_id_75_led.remove_value_listener(self.parameter_3_id_75_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.parameter_3_id_75["element"]) + " does not exist")
        try:
            self.parameter_4_id_76_led.remove_value_listener(self.parameter_4_id_76_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.parameter_4_id_76["element"]) + " does not exist")
        try:
            self.parameter_5_id_77_led.remove_value_listener(self.parameter_5_id_77_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.parameter_5_id_77["element"]) + " does not exist")
        try:
            self.parameter_6_id_78_led.remove_value_listener(self.parameter_6_id_78_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.parameter_6_id_78["element"]) + " does not exist")
        try:
            self.parameter_7_id_79_led.remove_value_listener(self.parameter_7_id_79_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.parameter_7_id_79["element"]) + " does not exist")
        try:
            self.parameter_8_id_80_led.remove_value_listener(self.parameter_8_id_80_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.parameter_8_id_80["element"]) + " does not exist")
        try:
            self.volume_1_id_108_led.remove_value_listener(self.volume_1_id_108_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.volume_1_id_108["element"]) + " does not exist")
        try:
            self.pan_1_id_109_led.remove_value_listener(self.pan_1_id_109_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.pan_1_id_109["element"]) + " does not exist")
        try:
            self.send_1_id_188_led.remove_value_listener(self.send_1_id_188_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.send_1_id_188["element"]) + " does not exist")
        try:
            self.send_2_id_189_led.remove_value_listener(self.send_2_id_189_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.send_2_id_189["element"]) + " does not exist")
        try:
            self.send_3_id_190_led.remove_value_listener(self.send_3_id_190_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.send_3_id_190["element"]) + " does not exist")
        try:
            self.send_4_id_191_led.remove_value_listener(self.send_4_id_191_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.send_4_id_191["element"]) + " does not exist")
        try:
            self.send_5_id_192_led.remove_value_listener(self.send_5_id_192_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.send_5_id_192["element"]) + " does not exist")
        try:
            self.send_6_id_193_led.remove_value_listener(self.send_6_id_193_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.send_6_id_193["element"]) + " does not exist")
        try:
            self.send_1_id_233_led.remove_value_listener(self.send_1_id_233_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.send_1_id_233["element"]) + " does not exist")
        try:
            self.send_2_id_234_led.remove_value_listener(self.send_2_id_234_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.send_2_id_234["element"]) + " does not exist")
        try:
            self.send_3_id_235_led.remove_value_listener(self.send_3_id_235_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.send_3_id_235["element"]) + " does not exist")
        try:
            self.send_4_id_236_led.remove_value_listener(self.send_4_id_236_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.send_4_id_236["element"]) + " does not exist")
        try:
            self.send_5_id_237_led.remove_value_listener(self.send_5_id_237_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.send_5_id_237["element"]) + " does not exist")
        try:
            self.send_6_id_238_led.remove_value_listener(self.send_6_id_238_led_listener)
        except:
            self.log("remove__mode87_ui_listeners: " + str(self.send_6_id_238["element"]) + " does not exist")
    def _remove_mode268_ui_listeners(self):
        try:
            self.parameter_1___osc_1_transp_id_273_led.remove_value_listener(self.parameter_1___osc_1_transp_id_273_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: " + str(self.parameter_1___osc_1_transp_id_273["element"]) + " does not exist")
        try:
            self.parameter_2___osc_1_detune_id_274_led.remove_value_listener(self.parameter_2___osc_1_detune_id_274_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: " + str(self.parameter_2___osc_1_detune_id_274["element"]) + " does not exist")
        try:
            self.parameter_3___osc_1_pos_id_275_led.remove_value_listener(self.parameter_3___osc_1_pos_id_275_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: " + str(self.parameter_3___osc_1_pos_id_275["element"]) + " does not exist")
        try:
            self.parameter_4___osc_1_effect_1_id_276_led.remove_value_listener(self.parameter_4___osc_1_effect_1_id_276_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: " + str(self.parameter_4___osc_1_effect_1_id_276["element"]) + " does not exist")
        try:
            self.parameter_5___amp_attack_id_277_led.remove_value_listener(self.parameter_5___amp_attack_id_277_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: " + str(self.parameter_5___amp_attack_id_277["element"]) + " does not exist")
        try:
            self.parameter_6___amp_decay_id_278_led.remove_value_listener(self.parameter_6___amp_decay_id_278_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: " + str(self.parameter_6___amp_decay_id_278["element"]) + " does not exist")
        try:
            self.parameter_7___amp_sustain_id_279_led.remove_value_listener(self.parameter_7___amp_sustain_id_279_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: " + str(self.parameter_7___amp_sustain_id_279["element"]) + " does not exist")
        try:
            self.parameter_8___amp_release_id_280_led.remove_value_listener(self.parameter_8___amp_release_id_280_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: " + str(self.parameter_8___amp_release_id_280["element"]) + " does not exist")
        try:
            self.parameter_9___filter_1_freq_id_281_led.remove_value_listener(self.parameter_9___filter_1_freq_id_281_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: " + str(self.parameter_9___filter_1_freq_id_281["element"]) + " does not exist")
        try:
            self.parameter_10___filter_1_res_id_282_led.remove_value_listener(self.parameter_10___filter_1_res_id_282_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: " + str(self.parameter_10___filter_1_res_id_282["element"]) + " does not exist")
        try:
            self.parameter_11___filter_1_drive_id_283_led.remove_value_listener(self.parameter_11___filter_1_drive_id_283_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: " + str(self.parameter_11___filter_1_drive_id_283["element"]) + " does not exist")
        try:
            self.parameter_12___filter_2_freq_id_284_led.remove_value_listener(self.parameter_12___filter_2_freq_id_284_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: " + str(self.parameter_12___filter_2_freq_id_284["element"]) + " does not exist")
        try:
            self.parameter_13___transpose_id_285_led.remove_value_listener(self.parameter_13___transpose_id_285_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: " + str(self.parameter_13___transpose_id_285["element"]) + " does not exist")
        try:
            self.parameter_14___unison_amount_id_286_led.remove_value_listener(self.parameter_14___unison_amount_id_286_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: " + str(self.parameter_14___unison_amount_id_286["element"]) + " does not exist")
        try:
            self.parameter_15___glide_id_287_led.remove_value_listener(self.parameter_15___glide_id_287_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: " + str(self.parameter_15___glide_id_287["element"]) + " does not exist")
        try:
            self.parameter_16___volume_id_288_led.remove_value_listener(self.parameter_16___volume_id_288_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: " + str(self.parameter_16___volume_id_288["element"]) + " does not exist")
        try:
            self.song().remove_tracks_listener(self.track_nav_left_copy_id_289_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: self.song() does not exist for highlight nav feedback")
        try:
            self.song().remove_tracks_listener(self.track_nav_right_copy_id_290_led_listener)
        except:
            self.log("remove__mode268_ui_listeners: self.song() does not exist for highlight nav feedback")
    def _remove_mode298_ui_listeners(self):
        try:
            self.parameter_1___s_start_id_303_led.remove_value_listener(self.parameter_1___s_start_id_303_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: " + str(self.parameter_1___s_start_id_303["element"]) + " does not exist")
        try:
            self.parameter_2___s_length_id_304_led.remove_value_listener(self.parameter_2___s_length_id_304_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: " + str(self.parameter_2___s_length_id_304["element"]) + " does not exist")
        try:
            self.parameter_3___transpose_id_305_led.remove_value_listener(self.parameter_3___transpose_id_305_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: " + str(self.parameter_3___transpose_id_305["element"]) + " does not exist")
        try:
            self.parameter_4___detune_id_306_led.remove_value_listener(self.parameter_4___detune_id_306_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: " + str(self.parameter_4___detune_id_306["element"]) + " does not exist")
        try:
            self.parameter_5___filter_type_id_307_led.remove_value_listener(self.parameter_5___filter_type_id_307_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: " + str(self.parameter_5___filter_type_id_307["element"]) + " does not exist")
        try:
            self.parameter_6___filter_circuit___lphp_id_308_led.remove_value_listener(self.parameter_6___filter_circuit___lphp_id_308_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: " + str(self.parameter_6___filter_circuit___lphp_id_308["element"]) + " does not exist")
        try:
            self.parameter_7___filter_freq_id_309_led.remove_value_listener(self.parameter_7___filter_freq_id_309_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: " + str(self.parameter_7___filter_freq_id_309["element"]) + " does not exist")
        try:
            self.parameter_8___filter_res_id_310_led.remove_value_listener(self.parameter_8___filter_res_id_310_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: " + str(self.parameter_8___filter_res_id_310["element"]) + " does not exist")
        try:
            self.parameter_9___ve_attack_id_311_led.remove_value_listener(self.parameter_9___ve_attack_id_311_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: " + str(self.parameter_9___ve_attack_id_311["element"]) + " does not exist")
        try:
            self.parameter_10___ve_decay_id_312_led.remove_value_listener(self.parameter_10___ve_decay_id_312_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: " + str(self.parameter_10___ve_decay_id_312["element"]) + " does not exist")
        try:
            self.parameter_11___ve_sustain_id_313_led.remove_value_listener(self.parameter_11___ve_sustain_id_313_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: " + str(self.parameter_11___ve_sustain_id_313["element"]) + " does not exist")
        try:
            self.parameter_12___ve_release_id_314_led.remove_value_listener(self.parameter_12___ve_release_id_314_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: " + str(self.parameter_12___ve_release_id_314["element"]) + " does not exist")
        try:
            self.parameter_13___vol_vel_id_315_led.remove_value_listener(self.parameter_13___vol_vel_id_315_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: " + str(self.parameter_13___vol_vel_id_315["element"]) + " does not exist")
        try:
            self.parameter_14___trigger_mode_id_316_led.remove_value_listener(self.parameter_14___trigger_mode_id_316_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: " + str(self.parameter_14___trigger_mode_id_316["element"]) + " does not exist")
        try:
            self.parameter_15___fade_in_id_317_led.remove_value_listener(self.parameter_15___fade_in_id_317_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: " + str(self.parameter_15___fade_in_id_317["element"]) + " does not exist")
        try:
            self.parameter_16___fade_out_id_318_led.remove_value_listener(self.parameter_16___fade_out_id_318_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: " + str(self.parameter_16___fade_out_id_318["element"]) + " does not exist")
        try:
            self.song().remove_tracks_listener(self.track_nav_left_copy_id_319_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: self.song() does not exist for highlight nav feedback")
        try:
            self.song().remove_tracks_listener(self.track_nav_right_copy_id_320_led_listener)
        except:
            self.log("remove__mode298_ui_listeners: self.song() does not exist for highlight nav feedback")
    def _mode240_fire_all_feedback(self):
        self.parameter_1___osc_1_detune_id_251_led_listener()
        self.parameter_2___osc_1_pos_id_252_led_listener()
        self.parameter_3___osc_1_effect_1_id_253_led_listener()
        self.parameter_4___osc_1_effect_2_id_254_led_listener()
        self.parameter_5___filter_1_type_id_255_led_listener()
        self.parameter_6___filter_1_lphp_id_256_led_listener()
        self.parameter_7___filter_1_freq_id_257_led_listener()
        self.parameter_8___filter_1_res_id_258_led_listener()
        self.parameter_9___amp_attack_id_259_led_listener()
        self.parameter_10___amp_decay_id_260_led_listener()
        self.parameter_11___amp_release_id_261_led_listener()
        self.parameter_12___amp_sustain_id_262_led_listener()
        self.parameter_13___unison_amount_id_263_led_listener()
        self.parameter_14___transpose_id_264_led_listener()
        self.parameter_15___glide_id_265_led_listener()
        self.parameter_16___volume_id_266_led_listener()
        self.track_nav_left_copy_id_242_led_listener()
        self.track_nav_right_copy_id_243_led_listener()
    def _mode1_fire_all_feedback(self):
        self.pad_3___track_mute_id_21_led_listener()
        self.pad_4___device_onoff_id_25_led_listener()
        self.mode_selector_1_id_40_led_listener()
        self.parameter_1_id_60_led_listener()
        self.parameter_2_id_61_led_listener()
        self.parameter_3_id_62_led_listener()
        self.parameter_4_id_63_led_listener()
        self.parameter_5_id_64_led_listener()
        self.parameter_6_id_65_led_listener()
        self.parameter_7_id_66_led_listener()
        self.parameter_8_id_67_led_listener()
        self.track_nav_left_id_83_led_listener()
        self.parameter_9_id_100_led_listener()
        self.parameter_10_id_101_led_listener()
        self.parameter_11_id_102_led_listener()
        self.parameter_12_id_103_led_listener()
        self.parameter_13_id_104_led_listener()
        self.parameter_14_id_105_led_listener()
        self.parameter_15_id_106_led_listener()
        self.parameter_16_id_107_led_listener()
        self.track_nav_right_id_134_led_listener()
    def _mode87_fire_all_feedback(self):
        self.parameter_1_id_73_led_listener()
        self.parameter_2_id_74_led_listener()
        self.parameter_3_id_75_led_listener()
        self.parameter_4_id_76_led_listener()
        self.parameter_5_id_77_led_listener()
        self.parameter_6_id_78_led_listener()
        self.parameter_7_id_79_led_listener()
        self.parameter_8_id_80_led_listener()
        self.mode_selector_shift_id_88_led_listener()
        self.volume_1_id_108_led_listener()
        self.pan_1_id_109_led_listener()
        self.send_1_id_188_led_listener()
        self.send_2_id_189_led_listener()
        self.send_3_id_190_led_listener()
        self.send_4_id_191_led_listener()
        self.send_5_id_192_led_listener()
        self.send_6_id_193_led_listener()
        self.send_1_id_233_led_listener()
        self.send_2_id_234_led_listener()
        self.send_3_id_235_led_listener()
        self.send_4_id_236_led_listener()
        self.send_5_id_237_led_listener()
        self.send_6_id_238_led_listener()
    def _mode268_fire_all_feedback(self):
        self.parameter_1___osc_1_transp_id_273_led_listener()
        self.parameter_2___osc_1_detune_id_274_led_listener()
        self.parameter_3___osc_1_pos_id_275_led_listener()
        self.parameter_4___osc_1_effect_1_id_276_led_listener()
        self.parameter_5___amp_attack_id_277_led_listener()
        self.parameter_6___amp_decay_id_278_led_listener()
        self.parameter_7___amp_sustain_id_279_led_listener()
        self.parameter_8___amp_release_id_280_led_listener()
        self.parameter_9___filter_1_freq_id_281_led_listener()
        self.parameter_10___filter_1_res_id_282_led_listener()
        self.parameter_11___filter_1_drive_id_283_led_listener()
        self.parameter_12___filter_2_freq_id_284_led_listener()
        self.parameter_13___transpose_id_285_led_listener()
        self.parameter_14___unison_amount_id_286_led_listener()
        self.parameter_15___glide_id_287_led_listener()
        self.parameter_16___volume_id_288_led_listener()
        self.track_nav_left_copy_id_289_led_listener()
        self.track_nav_right_copy_id_290_led_listener()
    def _mode298_fire_all_feedback(self):
        self.parameter_1___s_start_id_303_led_listener()
        self.parameter_2___s_length_id_304_led_listener()
        self.parameter_3___transpose_id_305_led_listener()
        self.parameter_4___detune_id_306_led_listener()
        self.parameter_5___filter_type_id_307_led_listener()
        self.parameter_6___filter_circuit___lphp_id_308_led_listener()
        self.parameter_7___filter_freq_id_309_led_listener()
        self.parameter_8___filter_res_id_310_led_listener()
        self.parameter_9___ve_attack_id_311_led_listener()
        self.parameter_10___ve_decay_id_312_led_listener()
        self.parameter_11___ve_sustain_id_313_led_listener()
        self.parameter_12___ve_release_id_314_led_listener()
        self.parameter_13___vol_vel_id_315_led_listener()
        self.parameter_14___trigger_mode_id_316_led_listener()
        self.parameter_15___fade_in_id_317_led_listener()
        self.parameter_16___fade_out_id_318_led_listener()
        self.track_nav_left_copy_id_319_led_listener()
        self.track_nav_right_copy_id_320_led_listener()
    def parameter_1___osc_1_detune_id_251_led_listener(self):
        self.feedback_brain(self.parameter_1___osc_1_detune_id_251)
    def parameter_2___osc_1_pos_id_252_led_listener(self):
        self.feedback_brain(self.parameter_2___osc_1_pos_id_252)
    def parameter_3___osc_1_effect_1_id_253_led_listener(self):
        self.feedback_brain(self.parameter_3___osc_1_effect_1_id_253)
    def parameter_4___osc_1_effect_2_id_254_led_listener(self):
        self.feedback_brain(self.parameter_4___osc_1_effect_2_id_254)
    def parameter_5___filter_1_type_id_255_led_listener(self):
        self.feedback_brain(self.parameter_5___filter_1_type_id_255)
    def parameter_6___filter_1_lphp_id_256_led_listener(self):
        self.feedback_brain(self.parameter_6___filter_1_lphp_id_256)
    def parameter_7___filter_1_freq_id_257_led_listener(self):
        self.feedback_brain(self.parameter_7___filter_1_freq_id_257)
    def parameter_8___filter_1_res_id_258_led_listener(self):
        self.feedback_brain(self.parameter_8___filter_1_res_id_258)
    def parameter_9___amp_attack_id_259_led_listener(self):
        self.feedback_brain(self.parameter_9___amp_attack_id_259)
    def parameter_10___amp_decay_id_260_led_listener(self):
        self.feedback_brain(self.parameter_10___amp_decay_id_260)
    def parameter_11___amp_release_id_261_led_listener(self):
        self.feedback_brain(self.parameter_11___amp_release_id_261)
    def parameter_12___amp_sustain_id_262_led_listener(self):
        self.feedback_brain(self.parameter_12___amp_sustain_id_262)
    def parameter_13___unison_amount_id_263_led_listener(self):
        self.feedback_brain(self.parameter_13___unison_amount_id_263)
    def parameter_14___transpose_id_264_led_listener(self):
        self.feedback_brain(self.parameter_14___transpose_id_264)
    def parameter_15___glide_id_265_led_listener(self):
        self.feedback_brain(self.parameter_15___glide_id_265)
    def parameter_16___volume_id_266_led_listener(self):
        self.feedback_brain(self.parameter_16___volume_id_266)
    def pad_3___track_mute_id_21_led_listener(self):
        self.feedback_brain(self.pad_3___track_mute_id_21)
    def pad_4___device_onoff_id_25_led_listener(self):
        self.feedback_brain(self.pad_4___device_onoff_id_25)
    def mode_selector_1_id_40_led_listener(self):
        self.feedback_brain(self.mode_selector_1_id_40)
    def parameter_1_id_60_led_listener(self):
        self.feedback_brain(self.parameter_1_id_60)
    def parameter_2_id_61_led_listener(self):
        self.feedback_brain(self.parameter_2_id_61)
    def parameter_3_id_62_led_listener(self):
        self.feedback_brain(self.parameter_3_id_62)
    def parameter_4_id_63_led_listener(self):
        self.feedback_brain(self.parameter_4_id_63)
    def parameter_5_id_64_led_listener(self):
        self.feedback_brain(self.parameter_5_id_64)
    def parameter_6_id_65_led_listener(self):
        self.feedback_brain(self.parameter_6_id_65)
    def parameter_7_id_66_led_listener(self):
        self.feedback_brain(self.parameter_7_id_66)
    def parameter_8_id_67_led_listener(self):
        self.feedback_brain(self.parameter_8_id_67)
    def parameter_1_id_73_led_listener(self):
        self.feedback_brain(self.parameter_1_id_73)
    def parameter_2_id_74_led_listener(self):
        self.feedback_brain(self.parameter_2_id_74)
    def parameter_3_id_75_led_listener(self):
        self.feedback_brain(self.parameter_3_id_75)
    def parameter_4_id_76_led_listener(self):
        self.feedback_brain(self.parameter_4_id_76)
    def parameter_5_id_77_led_listener(self):
        self.feedback_brain(self.parameter_5_id_77)
    def parameter_6_id_78_led_listener(self):
        self.feedback_brain(self.parameter_6_id_78)
    def parameter_7_id_79_led_listener(self):
        self.feedback_brain(self.parameter_7_id_79)
    def parameter_8_id_80_led_listener(self):
        self.feedback_brain(self.parameter_8_id_80)
    def track_nav_left_id_83_led_listener(self):
        self.feedback_brain(self.track_nav_left_id_83)
    def mode_selector_shift_id_88_led_listener(self):
        self.feedback_brain(self.mode_selector_shift_id_88)
    def parameter_9_id_100_led_listener(self):
        self.feedback_brain(self.parameter_9_id_100)
    def parameter_10_id_101_led_listener(self):
        self.feedback_brain(self.parameter_10_id_101)
    def parameter_11_id_102_led_listener(self):
        self.feedback_brain(self.parameter_11_id_102)
    def parameter_12_id_103_led_listener(self):
        self.feedback_brain(self.parameter_12_id_103)
    def parameter_13_id_104_led_listener(self):
        self.feedback_brain(self.parameter_13_id_104)
    def parameter_14_id_105_led_listener(self):
        self.feedback_brain(self.parameter_14_id_105)
    def parameter_15_id_106_led_listener(self):
        self.feedback_brain(self.parameter_15_id_106)
    def parameter_16_id_107_led_listener(self):
        self.feedback_brain(self.parameter_16_id_107)
    def volume_1_id_108_led_listener(self):
        self.feedback_brain(self.volume_1_id_108)
    def pan_1_id_109_led_listener(self):
        self.feedback_brain(self.pan_1_id_109)
    def track_nav_right_id_134_led_listener(self):
        self.feedback_brain(self.track_nav_right_id_134)
    def send_1_id_188_led_listener(self):
        self.feedback_brain(self.send_1_id_188)
    def send_2_id_189_led_listener(self):
        self.feedback_brain(self.send_2_id_189)
    def send_3_id_190_led_listener(self):
        self.feedback_brain(self.send_3_id_190)
    def send_4_id_191_led_listener(self):
        self.feedback_brain(self.send_4_id_191)
    def send_5_id_192_led_listener(self):
        self.feedback_brain(self.send_5_id_192)
    def send_6_id_193_led_listener(self):
        self.feedback_brain(self.send_6_id_193)
    def send_1_id_233_led_listener(self):
        self.feedback_brain(self.send_1_id_233)
    def send_2_id_234_led_listener(self):
        self.feedback_brain(self.send_2_id_234)
    def send_3_id_235_led_listener(self):
        self.feedback_brain(self.send_3_id_235)
    def send_4_id_236_led_listener(self):
        self.feedback_brain(self.send_4_id_236)
    def send_5_id_237_led_listener(self):
        self.feedback_brain(self.send_5_id_237)
    def send_6_id_238_led_listener(self):
        self.feedback_brain(self.send_6_id_238)
    def track_nav_left_copy_id_242_led_listener(self):
        self.feedback_brain(self.track_nav_left_copy_id_242)
    def track_nav_right_copy_id_243_led_listener(self):
        self.feedback_brain(self.track_nav_right_copy_id_243)
    def parameter_1___osc_1_transp_id_273_led_listener(self):
        self.feedback_brain(self.parameter_1___osc_1_transp_id_273)
    def parameter_2___osc_1_detune_id_274_led_listener(self):
        self.feedback_brain(self.parameter_2___osc_1_detune_id_274)
    def parameter_3___osc_1_pos_id_275_led_listener(self):
        self.feedback_brain(self.parameter_3___osc_1_pos_id_275)
    def parameter_4___osc_1_effect_1_id_276_led_listener(self):
        self.feedback_brain(self.parameter_4___osc_1_effect_1_id_276)
    def parameter_5___amp_attack_id_277_led_listener(self):
        self.feedback_brain(self.parameter_5___amp_attack_id_277)
    def parameter_6___amp_decay_id_278_led_listener(self):
        self.feedback_brain(self.parameter_6___amp_decay_id_278)
    def parameter_7___amp_sustain_id_279_led_listener(self):
        self.feedback_brain(self.parameter_7___amp_sustain_id_279)
    def parameter_8___amp_release_id_280_led_listener(self):
        self.feedback_brain(self.parameter_8___amp_release_id_280)
    def parameter_9___filter_1_freq_id_281_led_listener(self):
        self.feedback_brain(self.parameter_9___filter_1_freq_id_281)
    def parameter_10___filter_1_res_id_282_led_listener(self):
        self.feedback_brain(self.parameter_10___filter_1_res_id_282)
    def parameter_11___filter_1_drive_id_283_led_listener(self):
        self.feedback_brain(self.parameter_11___filter_1_drive_id_283)
    def parameter_12___filter_2_freq_id_284_led_listener(self):
        self.feedback_brain(self.parameter_12___filter_2_freq_id_284)
    def parameter_13___transpose_id_285_led_listener(self):
        self.feedback_brain(self.parameter_13___transpose_id_285)
    def parameter_14___unison_amount_id_286_led_listener(self):
        self.feedback_brain(self.parameter_14___unison_amount_id_286)
    def parameter_15___glide_id_287_led_listener(self):
        self.feedback_brain(self.parameter_15___glide_id_287)
    def parameter_16___volume_id_288_led_listener(self):
        self.feedback_brain(self.parameter_16___volume_id_288)
    def track_nav_left_copy_id_289_led_listener(self):
        self.feedback_brain(self.track_nav_left_copy_id_289)
    def track_nav_right_copy_id_290_led_listener(self):
        self.feedback_brain(self.track_nav_right_copy_id_290)
    def parameter_1___s_start_id_303_led_listener(self):
        self.feedback_brain(self.parameter_1___s_start_id_303)
    def parameter_2___s_length_id_304_led_listener(self):
        self.feedback_brain(self.parameter_2___s_length_id_304)
    def parameter_3___transpose_id_305_led_listener(self):
        self.feedback_brain(self.parameter_3___transpose_id_305)
    def parameter_4___detune_id_306_led_listener(self):
        self.feedback_brain(self.parameter_4___detune_id_306)
    def parameter_5___filter_type_id_307_led_listener(self):
        self.feedback_brain(self.parameter_5___filter_type_id_307)
    def parameter_6___filter_circuit___lphp_id_308_led_listener(self):
        self.feedback_brain(self.parameter_6___filter_circuit___lphp_id_308)
    def parameter_7___filter_freq_id_309_led_listener(self):
        self.feedback_brain(self.parameter_7___filter_freq_id_309)
    def parameter_8___filter_res_id_310_led_listener(self):
        self.feedback_brain(self.parameter_8___filter_res_id_310)
    def parameter_9___ve_attack_id_311_led_listener(self):
        self.feedback_brain(self.parameter_9___ve_attack_id_311)
    def parameter_10___ve_decay_id_312_led_listener(self):
        self.feedback_brain(self.parameter_10___ve_decay_id_312)
    def parameter_11___ve_sustain_id_313_led_listener(self):
        self.feedback_brain(self.parameter_11___ve_sustain_id_313)
    def parameter_12___ve_release_id_314_led_listener(self):
        self.feedback_brain(self.parameter_12___ve_release_id_314)
    def parameter_13___vol_vel_id_315_led_listener(self):
        self.feedback_brain(self.parameter_13___vol_vel_id_315)
    def parameter_14___trigger_mode_id_316_led_listener(self):
        self.feedback_brain(self.parameter_14___trigger_mode_id_316)
    def parameter_15___fade_in_id_317_led_listener(self):
        self.feedback_brain(self.parameter_15___fade_in_id_317)
    def parameter_16___fade_out_id_318_led_listener(self):
        self.feedback_brain(self.parameter_16___fade_out_id_318)
    def track_nav_left_copy_id_319_led_listener(self):
        self.feedback_brain(self.track_nav_left_copy_id_319)
    def track_nav_right_copy_id_320_led_listener(self):
        self.feedback_brain(self.track_nav_right_copy_id_320)
    ################## CORE: Python 3 #################
    def get_value_from_ranges(self, a1, b2, c3, d4, e5, f6, g7, h8, i9, j10, k11):
        logging = a1
        steps = b2
        round_down = c3
        current_input_value = d4
        i = {}
        i["minimum"] = e5
        i["maximum"] = f6
        i["decimal_places"] = g7
        i["steps"] = steps
        i["distance"] = i["maximum"] - i["minimum"]
        i["speed"] = i["distance"] / i["steps"]
        inn = self.step_values(i)
        o = {}
        o["minimum"] = h8
        o["maximum"] = i9
        o["decimal_places"] = j10
        o["reverse_mode"] = k11
        o["steps"] = steps
        o["distance"] = o["maximum"] - o["minimum"]
        o["speed"] = o["distance"] / o["steps"]
        out = self.step_values(o)
        closest_inn = self.f_n(inn, current_input_value, round_down)
        relative_out_value = out[closest_inn['index']]
        ret = {}
        ret['in'] = inn
        ret['selected_in'] = closest_inn
        ret['out'] = out
        ret["selected_out"] = relative_out_value
        if(logging == True):
            if(round_down == False):
                rounding = "up"
                rou_symb = str(">")
            else:
                rounding = "down"
                rou_symb = str("<")
            log_arr = []
            log_arr.append("In: " + str(current_input_value) )
            log_arr.append("Out: " + str(ret["selected_out"]) )
            log_arr.append("Steps: " + str(steps) )
            log_arr.append("Rounding: " + str(rounding) )
            log_arr.append("Rev: " + str(o["reverse_mode"]) )
            log_str = ' '.join(log_arr)
            table_arr = []
            table_arr.append(str("<table class='rangeValueTable'>") )
            step_arr = []
            count = 0
            for item in ret['in']:
                if(count==ret['selected_in']['index']):
                    td = "<td class='slctd'>"
                else:
                    td = "<td>"
                step_arr.append(td + str(count) + "</td>")
                count = count + 1
            step_str = ''.join(step_arr)
            in_arr = []
            count = 0
            for item in ret['in']:
                td = "<td>"
                if(count==ret['selected_in']['index']):
                    td = "<td class='slctd'>"
                in_arr.append(td + str(item) + "</td>")
                count = count + 1
            in_str = ''.join(in_arr)

            out_arr = []
            count = 0
            for item in ret['out']:
                td = "<td>"
                if(count==ret['selected_in']['index']):
                    td = "<td class='slctd'>"
                out_arr.append(td + str(item) + "</td>")
                count = count + 1
            out_str = ''.join(out_arr)
            rev = ""
            if o["reverse_mode"] == True:
                rev = "(Rev)"

            table_arr.append(str("<tr><td class='hd'>Steps</td>" + step_str + "</tr>") )
            table_arr.append(str("<tr><td class='hd'>In (" + rou_symb + str(current_input_value) + ")</td>" + in_str + "</tr>") )
            table_arr.append(str("<tr><td class='hd'>Out " + rev + "</td>" + out_str + "</tr>") )
            table_arr.append(str("</table>") )
            table_str = ''.join(table_arr)
            self.log_message("csslog: " + str(table_str) )
        return ret["selected_out"]

    def f_n(self, array, current_val, round_down = True):
        i = 0
        nearest = {}
        nearest['index'] = None
        nearest['value'] = None
        prev_idx = i
        prev_val = array[0]
        for array_val in array:
            if array_val == current_val:
                nearest['index'] = i
                nearest['value'] = array_val
                break
            elif current_val > prev_val and current_val < array_val:
                if round_down is True:
                    nearest['index'] = prev_idx
                    nearest['value'] = prev_val
                else:
                    nearest['index'] = i
                    nearest['value'] = array_val
                break
            else:
                prev_val = array_val
                prev_idx = i
                i = i + 1
        return nearest;
    def placehold_listener(self, value):
        return
    def pick_brain(self, obj):
        cnfg = obj.copy()
        if cnfg["output_type"] == "val":
            self.val_brain(cnfg)
        elif cnfg["output_type"] == "func":
            self.func_brain(cnfg)
        elif cnfg["output_type"] == "bool":
            self.bool_brain(cnfg)
    def should_it_fire(self, cnfg):
        controller = getattr(self, cnfg["attached_to"])
        cnfg["value"] = controller.cur_val
        cnfg["pre_val"] = controller.pre_val
        cnfg["prev_press_time"] = controller.prev_press_time
        timenow = time.time()
        fire = 0;
        if (cnfg["ctrl_type"] == "on/off" or cnfg["ctrl_type"] == "increment" or cnfg["ctrl_type"] == "decrement"):
            if(cnfg["switch_type"] == "delay"):
                if((cnfg["value"] == cnfg["enc_second"]) and (timenow - cnfg["prev_press_time"]) > cnfg["delay_amount"]):
                    fire = 1;
            elif(cnfg["switch_type"] == "toggle"):
                if cnfg["value"] == cnfg["enc_first"] or cnfg["value"] == cnfg["enc_second"]:
                    fire = 1;
            elif (cnfg["switch_type"] == "momentary" and cnfg["value"] == cnfg["enc_first"]):
                fire = 1;
        elif cnfg["ctrl_type"] == "absolute":
            if cnfg["value"] >= cnfg["enc_first"] and cnfg["value"] <= cnfg["enc_second"]:
                fire = 1;
        elif cnfg["ctrl_type"] == "relative":
            if cnfg["value"] == cnfg["enc_first"] or cnfg["value"] == cnfg["enc_second"]:
                fire = 1;
        return fire
    def bool_brain(self, cnfg):
        method_to_call = getattr(eval(cnfg["module"]), cnfg["element"])
        fire = self.should_it_fire(cnfg)
        if fire == 1:
            if cnfg["element"] == "solo" and self.song().exclusive_solo:
                for index in range(len(self.song().tracks)):
                    self.song().tracks[index].solo = False
                for index in range(len(self.song().return_tracks)):
                    self.song().return_tracks[index].solo = False
            if cnfg["element"] == "arm" and self.song().exclusive_arm:
                for index in range(len(self.song().tracks)):
                    try:
                        self.song().tracks[index].arm = False
                    except Exception as e:
                        continue
            if method_to_call is False:
                try:
                    setattr(eval(cnfg["module"]), cnfg["element"], True)
                except Exception as e:
                    self.show_message("Unable to set " + str(cnfg["element"]) + " to True")
            else:
                try:
                    setattr(eval(cnfg["module"]), cnfg["element"], False)
                except Exception as e:
                    self.show_message("Unable to set " + str(cnfg["element"]) + " to False")
    def func_brain(self, cnfg):
        fire = self.should_it_fire(cnfg)
        if fire == 1:
            method_to_call = getattr(eval(cnfg["module"]), cnfg["element"])
            if cnfg["func_arg"] != "" and cnfg["func_arg"] != "cnfg":
                method_to_call(cnfg["func_arg"])
            elif cnfg["func_arg"] == "cnfg":
                method_to_call(cnfg)
            else:
                method_to_call()
    def val_brain(self, cnfg):
        try:
            cnfg["current_position"] = getattr(eval(cnfg["module"]), cnfg["element"])
        except:
            self.show_message("This control does not exist in your session")
            return
        self._parameter_to_map_to = eval(cnfg["module"])
        if cnfg["ctrl_type"] != "on/off" and hasattr(self._parameter_to_map_to, "max") and hasattr(self._parameter_to_map_to, "min"):
            param_range = self._parameter_to_map_to.max - self._parameter_to_map_to.min
            if "minimum" in cnfg:
                usermin = cnfg["minimum"] / 100.;
                min_value = float(usermin * param_range)
                cnfg["minimum"] = min_value + self._parameter_to_map_to.min
            if "maximum" in cnfg and cnfg["mapping_type"] != "On/Off":
                usermax = cnfg["maximum"] / 100.;
                max_value = float(usermax * param_range)
                cnfg["maximum"] = max_value + self._parameter_to_map_to.min
        controller = getattr(self, cnfg["attached_to"])
        cnfg["value"] = controller.cur_val
        cnfg["pre_val"] = controller.pre_val
        if "decimal_places" in cnfg:
            cnfg["current_position"] = round(cnfg["current_position"], cnfg["decimal_places"])
        if cnfg["ctrl_type"] == "absolute":
            cnfg["steps"] = (cnfg["enc_second"] - cnfg["enc_first"])
        if cnfg["ctrl_type"] != "on/off":
            cnfg["distance"] = cnfg["maximum"] - cnfg["minimum"]
            cnfg["speed"] = cnfg["distance"] / cnfg["steps"]
            cnfg["step_values"] = self.step_values(cnfg)
            cnfg["velocity_seq"] = self._velocity_seq(cnfg)

        if int(cnfg["current_position"]) < int(cnfg["minimum"]) or int(cnfg["current_position"]) > int(cnfg["maximum"]):
            new_val = self.snap_to_max_min(cnfg)
        elif cnfg["ctrl_type"] == "absolute":
            new_val = self.absolute_decision(cnfg)
        elif cnfg["ctrl_type"] == "relative":
            new_val = self.relative_decision(cnfg)
        elif cnfg["ctrl_type"] == "on/off" or cnfg["ctrl_type"] == "increment" or cnfg["ctrl_type"] == "decrement":
            new_val = self.button_decision(cnfg)
        try:
            setattr(eval(cnfg["module"]), cnfg["element"], new_val)
        except:
            return
    def snap_to_max_min(self, cnfg):

        if(cnfg["enc_first"] < cnfg["enc_second"]):
            enc_lowest = cnfg["enc_first"];
            enc_highest = cnfg["enc_second"]
        else:
            enc_lowest = cnfg["enc_second"];
            enc_highest = cnfg["enc_first"]
        if cnfg["snap_to"] == True and (cnfg["value"] <= enc_lowest or cnfg["value"] >= enc_highest):
            if int(cnfg["current_position"]) < int(cnfg["minimum"]):
                new_val = cnfg["minimum"]
                self.log("snapped to min")
            elif int(cnfg["current_position"]) > int(cnfg["maximum"]):
                new_val = cnfg["maximum"]
                self.log("snapped to max")
        else:
            new_val = cnfg["current_position"]
            self.show_message("remotify: snapping is off for this control. Check min / max values")
        return new_val
    def step_values(self, cnfg):
        calc = []
        for i in range(0, cnfg["steps"] +1):
            val = (i * cnfg["speed"]) + cnfg["minimum"]
            if "decimal_places" in cnfg:
                val = round(val, cnfg["decimal_places"])
                if cnfg["decimal_places"] is 0:
                    val = int(val)
            calc.append(val)
        if "reverse_mode" in cnfg and cnfg["reverse_mode"] is True:
            calc = list(reversed(calc))
        return calc
    def relative_decision(self, cnfg):
        fire = 0
        new_val = cnfg["current_position"]
        if cnfg["value"] == cnfg["enc_second"]:
            max_min = "max"
            fire = 1
        elif cnfg["value"] == cnfg["enc_first"]:
            max_min = "min"
            fire = 1
        if fire == 0:
            return new_val
        if cnfg["current_position"] in cnfg["step_values"]:
            current_pos_index = cnfg["step_values"].index(cnfg["current_position"])

            feedback = current_pos_index / cnfg["steps"] * 127
            feedback = round(feedback, 0)
            method_to_call = getattr(self, cnfg["attached_to"])
            incr_index = current_pos_index + 1
            decr_index = current_pos_index - 1
            if max_min == "max" and incr_index < len(cnfg["step_values"]):
                incr = cnfg["step_values"][incr_index]
                while incr == cnfg["current_position"]:
                    incr_index = incr_index + 1
                    if incr_index < len(cnfg["step_values"]):
                        incr = cnfg["step_values"][incr_index]
                    else:
                        break
                new_val = incr
            elif max_min == "min" and decr_index >= 0:
                decr = cnfg["step_values"][decr_index]
                new_val = decr
            return new_val
        else:
            new_val = self.step_in_line(cnfg, max_min)
            return new_val
        return new_val
    def percent_as_value(self, param, percentage):
        param = 		eval(param)
        if hasattr(param, 'max') and hasattr(param, 'min'):
            param_range = param.max - param.min
            val = percentage * param_range / 100
            return val
        else:
            self.log("param does not have min and/or max attribute(s)")
    def button_decision(self, cnfg):
        new_val = cnfg["current_position"]
        fire = self.should_it_fire(cnfg)
        if fire == 0:
            return new_val;
        if cnfg["ctrl_type"] == "on/off":
            if(cnfg["switch_type"] == "toggle"):
                if cnfg["value"] == cnfg["enc_first"]:
                    new_val = cnfg["maximum"]
                    return new_val
                elif cnfg["value"] == cnfg["enc_second"]:
                    new_val = cnfg["minimum"]
                    return new_val
            elif(cnfg["switch_type"] == "momentary"):
                if(cnfg["current_position"] == cnfg["maximum"]):
                    new_val = cnfg["minimum"]
                else:
                    new_val = cnfg["maximum"]
                return new_val
            elif(cnfg["switch_type"] == "delay"):
                if(cnfg["current_position"] == cnfg["maximum"]):
                    new_val = cnfg["minimum"]
                elif (cnfg["current_position"] == cnfg["minimum"]):
                    new_val = cnfg["maximum"]
                return new_val
            else:
                self.log("neither momentary or toggle were set for on off button")
                return new_val
        if cnfg["current_position"] in cnfg["step_values"]:
            current_pos_index = cnfg["step_values"].index(cnfg["current_position"])
            incr_index = current_pos_index + 1
            decr_index = current_pos_index - 1
            if cnfg["ctrl_type"] ==  "increment" and incr_index < len(cnfg["step_values"]):
                incr = cnfg["step_values"][incr_index]
                new_val = incr
            elif cnfg["ctrl_type"] == "decrement" and decr_index >= 0:
                decr = cnfg["step_values"][decr_index]
                new_val = decr
            return new_val
        else:
            if cnfg["ctrl_type"] ==  "increment":
                max_min = "max"
            elif cnfg["ctrl_type"] == "decrement": max_min = "min"
            new_val = self.step_in_line(cnfg, max_min)
            return new_val
        return new_val
    def step_in_line(self, cnfg, max_min):
        previous = int()
        step_num = 0
        speed = 0
        for step_val in cnfg["step_values"]:
            step_num += 1
            if cnfg["current_position"] > previous and cnfg["current_position"] < step_val:
                if max_min == "min":
                    speed = cnfg["current_position"] - previous
                    new_val = previous
                elif max_min == "max":
                    speed = step_val - cnfg["current_position"]
                    new_val = step_val
                break
            previous = step_val
        return new_val
    def absolute_decision(self, cnfg):
        if(cnfg["enc_first"] > cnfg["enc_second"]):
            self.log("enc_first is higher than enc_second, needs to be lower")
        new_val = cnfg["current_position"]
        if cnfg["pre_val"] is None:
            return new_val
        ######### Get pre_val details from list values #########
        ######### ######### ######### ######## ######
        if cnfg["pre_val"] in cnfg["velocity_seq"]:
            cnfg["previous_step_num"] = cnfg["velocity_seq"].index(cnfg["pre_val"])
            cnfg["previous_step_value"] = cnfg["step_values"][cnfg["previous_step_num"]]
        else:
            cnfg["previous_step_value"] = None
        ######### get value details from list #########
        ######### ######### ######### ######### ######
        if cnfg["value"] in cnfg["velocity_seq"]:
            cnfg["step_num"] = cnfg["velocity_seq"].index(cnfg["value"])
            cnfg["step_value"] = cnfg["step_values"][cnfg["step_num"]]
        else:
            cnfg["step_num"] = None
            cnfg["step_value"] = None

        ######### MAX OR MIN ########
        ######### ######### #########
        if cnfg["reverse_mode"] is False:
            if cnfg["value"] > cnfg["pre_val"]: max_min = "max"
            elif cnfg["value"] < cnfg["pre_val"]: max_min = "min"
        elif cnfg["reverse_mode"] is True:
            if cnfg["value"] > cnfg["pre_val"]: max_min = "min"
            elif cnfg["value"] < cnfg["pre_val"]: max_min = "max"
        inside_outside = self.inside_outside_checks(cnfg)
        if inside_outside is not False:
            self.log("inside outside was not false")
            return inside_outside
        ######### straight assign or takeover #########
        ######### ######### ######### ######### #######
        if cnfg["previous_step_value"] == cnfg["current_position"]:
            new_val = cnfg["step_value"]
        elif cnfg["takeover_mode"] == "None":
            new_val = cnfg["step_value"]
        elif cnfg["takeover_mode"] == "Pickup":
            new_val = self.pickup(cnfg, max_min)
        elif cnfg["takeover_mode"] == "Value scaling": new_val = self.value_scaling(cnfg, max_min)
        else: self.log("nothing got decided")

        return new_val
    def inside_outside_checks(self, cnfg):
        new_val = cnfg["current_position"]
        if cnfg["reverse_mode"] is False:
            minimum = cnfg["minimum"]
            maximum = cnfg["maximum"]
        elif cnfg["reverse_mode"] is True:
            minimum = cnfg["maximum"]
            maximum = cnfg["minimum"]
        ######### was outside and is still outside ######
        ######### ######### ######### ######### #########
        if (cnfg["pre_val"] < cnfg["enc_first"] and cnfg["value"] < cnfg["enc_first"]):
            self.log("was below and still below")
            return new_val
        elif (cnfg["pre_val"] > cnfg["enc_second"] and cnfg["value"] > cnfg["enc_second"]):
            self.log("was above and still above")
            return new_val
        ## 1. Going Below
        if (cnfg["pre_val"] >= cnfg["enc_first"] and cnfg["value"] < cnfg["enc_first"]):
            self.log("going below enter")
            if cnfg["takeover_mode"] == "Pickup":
                if cnfg["reverse_mode"] is False and cnfg["current_position"] > cnfg["previous_step_value"]:
                    return new_val
                elif cnfg["reverse_mode"] is True and cnfg["current_position"] < cnfg["previous_step_value"]:
                    return new_val
            if cnfg["reverse_mode"] is False:
                new_val = minimum
                self.log("going below 1")
                return new_val
            elif cnfg["reverse_mode"] is True:
                new_val = minimum
                self.log("going below 2")
                return new_val
        ## 2. Going Above
        if (cnfg["pre_val"] <= cnfg["enc_second"] and cnfg["value"] > cnfg["enc_second"]):
            if cnfg["takeover_mode"] == "Pickup":
                self.log("THIS SHOULD FIRE 1")
                if cnfg["reverse_mode"] is False and cnfg["current_position"] < cnfg["previous_step_value"]:
                    self.log("THIS SHOULD FIRE 2")
                    return new_val
                elif cnfg["reverse_mode"] is True and cnfg["current_position"] > cnfg["previous_step_value"]:
                    return new_val
            if cnfg["reverse_mode"] is False:
                new_val = maximum
                self.log("going above 1")
                return new_val
            elif cnfg["reverse_mode"] is True:
                new_val = maximum
                self.log("going above 2")
                return new_val
        #########  >>0<< Coming inside ########
        ######### ######### ######### #########
        if (cnfg["pre_val"] < cnfg["enc_first"] and cnfg["value"] >= cnfg["enc_first"]):
            self.log("come in from below")

        elif (cnfg["pre_val"] > cnfg["enc_second"] and cnfg["value"] <= cnfg["enc_second"]):
            self.log("coming in from above")
        return False
    def _velocity_seq(self,cnfg):
        number_of_steps = cnfg['enc_second'] - cnfg['enc_first']
        arr = []
        i = 0
        sequence_num = cnfg['enc_first']
        while i <= number_of_steps:
            arr.append(sequence_num)
            i += 1
            sequence_num += 1
        return arr
    def pickup(self, cnfg, max_min):
        new_val = cnfg["current_position"]
        found = False
        if cnfg["previous_step_value"] is None:
            self.log("just entered")

            if cnfg["reverse_mode"] is False:
                if cnfg["pre_val"] < cnfg["enc_first"] and cnfg["step_value"] > cnfg["current_position"]:
                    new_val = cnfg["step_value"]
                    found = True
                    self.log("pickup 1 found")
                elif cnfg["pre_val"] > cnfg["enc_second"] and cnfg["step_value"] < cnfg["current_position"]:
                    new_val = cnfg["step_value"]
                    found = True
                    self.log("pickup 2 found")
            elif cnfg["reverse_mode"] is True:
                if cnfg["pre_val"] < cnfg["enc_first"] and cnfg["step_value"] < cnfg["current_position"]:
                    new_val = cnfg["step_value"]
                    found = True
                    self.log("pickup 3 found")
                elif cnfg["pre_val"] > cnfg["enc_second"] and cnfg["step_value"] > cnfg["current_position"]:
                    new_val = cnfg["step_value"]
                    found = True
                    self.log("pickup 4 found")

        else:
            self.log("we were already in here")

            if cnfg["previous_step_value"] < cnfg["current_position"] and cnfg["step_value"] > cnfg["current_position"]:
                new_val = cnfg["step_value"]
                found = True
                self.log("pickup 4 found")
            elif cnfg["previous_step_value"] > cnfg["current_position"] and cnfg["step_value"] < cnfg["current_position"] :
                new_val = cnfg["step_value"]
                found = True
                self.log("pickup 5 found")
            else:
                self.log("waiting for pickup")
        if found is False:
            msg = "remotify says: waiting for pickup " + str(cnfg["step_value"]) + " >> " + str(cnfg["current_position"])
            self.show_message(msg)
        return new_val
        step_num = cnfg["step_num"]
        step_value = cnfg["step_value"]
        remaining_steps = cnfg["steps"] - step_num
        new_val = cnfg["current_position"]
        distance_to_max = cnfg["maximum"] - cnfg["current_position"]
        distance_to_min = cnfg["current_position"] - cnfg["minimum"]
        speed_to_max = 0
        speed_to_min = 0
        if cnfg["current_position"] >= cnfg["minimum"] and cnfg["current_position"] <= cnfg["maximum"]:
            if max_min == "max" and distance_to_max > 0:
                if cnfg["reverse_mode"] is False and remaining_steps > 0: speed_to_max = distance_to_max / remaining_steps
                elif cnfg["reverse_mode"] is True and step_num > 0: speed_to_max = distance_to_max / step_num
                if speed_to_max is not 0: new_val = speed_to_max + cnfg["current_position"]
            elif max_min == "min" and distance_to_min > 0:
                if cnfg["reverse_mode"] is False and step_num > 0: speed_to_min = distance_to_min / step_num
                elif cnfg["reverse_mode"] is True and remaining_steps > 0: speed_to_min = distance_to_min / remaining_steps
                if speed_to_min is not 0: new_val = cnfg["current_position"] - speed_to_min
        return new_val
    def value_scaling(self, cnfg, max_min):
        step_num = cnfg["step_num"]
        step_value = cnfg["step_value"]
        remaining_steps = cnfg["steps"] - step_num
        new_val = cnfg["current_position"]
        distance_to_max = cnfg["maximum"] - cnfg["current_position"]
        distance_to_min = cnfg["current_position"] - cnfg["minimum"]
        speed_to_max = 0
        speed_to_min = 0
        if cnfg["current_position"] >= cnfg["minimum"] and cnfg["current_position"] <= cnfg["maximum"]:
            if max_min == "max" and distance_to_max > 0:
                if cnfg["reverse_mode"] is False and remaining_steps > 0: speed_to_max = distance_to_max / remaining_steps
                elif cnfg["reverse_mode"] is True and step_num > 0: speed_to_max = distance_to_max / step_num
                if speed_to_max is not 0: new_val = speed_to_max + cnfg["current_position"]
            elif max_min == "min" and distance_to_min > 0:
                if cnfg["reverse_mode"] is False and step_num > 0: speed_to_min = distance_to_min / step_num
                elif cnfg["reverse_mode"] is True and remaining_steps > 0: speed_to_min = distance_to_min / remaining_steps
                if speed_to_min is not 0: new_val = cnfg["current_position"] - speed_to_min
        return new_val
    def track_num_2(self, track_num):
        if ((hasattr(self, '_session')) and (self._session is not None)):
            track_num = track_num + self._session._track_offset

        else:
            track_num = track_num
        return track_num
    def track_num(self, track_num):
        if ((hasattr(self, '_session')) and (self._session is not None)):
            track_num = track_num + self._session._track_offset
        else:
            track_num = track_num
        return track_num
    def scene_num(self, scene_num):
        if ((hasattr(self, '_session')) and (self._session is not None)):
            scene_num = scene_num + self._session._scene_offset
        else:
            scene_num = scene_num
        return scene_num
    def log_cnfg_settings(self, cnfg):
        for i in cnfg:
            text = i + ": " + str(cnfg[i])
            self.log(text)
    def dump(self, obj):
        for attr in dir(obj):
            self.log("csslog: obj.%s = %r" % (attr, getattr(obj, attr)))
    def log(self, msg):
        if self.debug_on is True:
            self.log_message("csslog:" + str(msg))
    def pret(self, ugly):
        for key,value in sorted(ugly.items()):
            self.log_message(key)
            self.log_message(value)
            self.log_message("")
    ################## Extra Functions: Python 3 #################
    def get_list(self, list_name):
        try:
            if list_name in self.lists:
                return self.lists[list_name]["value"]
            else:
                self.log_message('csslog: The custom list "' + str(list_name) + '" does not exist')
                return False
        except Exception as e:
            self.log_message('csslog: There was an error getting a custom list with "get_list", ' + str(e))
            return False
    def get_list_length(self, list_name):
        theList = self.get_list(list_name)
        if theList is False:
            return False
        return len(theList)
    def get_list_item(self, list_name, item_num):
        try:
            theList = self.get_list(list_name)
            if theList is False:
                return False

            list_len = self.get_list_length(list_name)
            if list_len is False:
                return
            if list_len >= item_num:
                return theList[item_num - 1]
            else:
                self.log_message('csslog: Custom list "' + str(list_name) + '" does not have ' + str(item_num) + ' items')
                return False
        except Exception as e:
            self.log_message('csslog: There was an error in "get_list_item"', str(e))
            return False
    def add_to_list(self, list_name, value_to_add, position):
        try:
            theList = self.get_list(list_name)
            if theList is False:
                return False
            list_len = self.get_list_length(list_name)
            if position is None or position > list_len:
                position = list_len
            theList.insert(position, value_to_add)
        except Exception as e:
            self.log_message('csslog: There was an error in "add_to_list()", ' + str(e))
            return False;
    def remove_from_list(self, list_name, position):
        try:
            theList = self.get_list(list_name)
            if theList is False:
                return False
            list_len = self.get_list_length(list_name)
            if list_len == 0:
                self.log_message("csslog: Nothing to delete from list '" + str(list_name) + "' as it's already empty")
                return
            if position > list_len:
                self.log_message("csslog: Custom list '" + str(list_name) + "' does not contain " + str(position) + " items")
                return False
            if position is None:
                position = list_len
            theList.pop(position)
        except Exception as e:
            self.log_message('csslog: There was an error in "remove_from_list", ' + str(e))
            return False;
    def clear_list(self, list_name):
        try:
            theList = self.get_list(list_name)
            if theList is False:
                return False
            del theList[:]
        except Exception as e:
            self.log_message('csslog: There was an error in "clear_list", ' + str(e))
            return False;
    def get_num_of_tracks(self, track_slug):
        try:
            s = "self.song()." + track_slug
            s = eval(s)
            return len(s)
        except:
            self.log_message('There was an error in get_num_of_tracks()')
            return -1

    def get_num_of_scenes(self):
        try:
            s = "self.song().scenes"
            s = eval(s)
            return len(s)
        except:
            self.log_message('There was an error in get_num_of_scenes()')
            return -1

    def get_num_of_devices(self, track_slug):
        try:
            s = "self.song()." + track_slug + ".devices"
            s = eval(s)
            return len(s)
        except:
            self.log_message('There was an error in get_num_of_devices()')
            return -1

    def get_selected_track_num(self):
        track = self.song().view.selected_track
        track = self.tuple_index(self.song().tracks, track)
        return track

    def get_selected_scene_num(self):
        scene = self.song().view.selected_scene
        scene = self.tuple_index(self.song().scenes, scene)
        return scene

    def get_selected_device_num(self, track_slug):
        try:
            device_list = "self.song()." + track_slug + ".devices"
            selected_device = "self.song()." + track_slug + ".view.selected_device"
            s = self.tuple_index(eval(device_list), eval(selected_device))
            if(s == False and s != 0):
                s = -1
            return s
        except:
            self.log_message('csslog: There was an error in get_num_of_devices()')
            return -1
    def get_active_mode_id(self):
        global active_mode
        return active_mode
    def get_sessbox_track_offset(self):
        if hasattr(self, '_session') and self._session is not None:
            return self._session._track_offset
        else:
            return -1
    def get_sessbox_scene_offset(self):
        if hasattr(self, '_session') and self._session is not None:
            return self._session._scene_offset
        else:
            return -1
    def get_sessbox_last_track_number(self):
        if hasattr(self, '_session') and self._session is not None:
            last_track = self._session._track_offset + self._session.width()
            return last_track
        else:
            return -1
    def get_sessbox_last_scene_number(self):
        if hasattr(self, '_session') and self._session is not None:
            last_scene = self._session._scene_offset + self._session.height()
            return last_scene
        else:
            return -1
    def get_sessbox_width(self):
        if hasattr(self, '_session') and self._session is not None:
            return self._session.width()
        else:
            return -1
    def get_sessbox_height(self):
        if hasattr(self, '_session') and self._session is not None:
            return self._session.height()
        else:
            return -1

    def get_sessbox_is_active(self):
        if hasattr(self, '_session') and self._session is not None:
            return True
        else:
            return False
    def set_highlighted_track(self, n):
        self.song().view.selected_track = self.song().tracks[n]

    def set_highlighted_scene(self, n):
        self.song().view.selected_scene = self.song().scenes[n]
    def set_sessionbox_offsets(self, track_offset, scene_offset):
        if hasattr(self, '_session') and self._session is not None:
            self._session.set_offsets(track_offset, scene_offset)
            self._set_session_highlight( self._session.track_offset(), self._session.scene_offset(), self._session.width(), self._session.height(), True)
    def set_sessionbox_combo_mode(self, combo):
        if hasattr(self, '_session') and self._session is not None:
            if combo == True:
                self._session._link
            elif combo == False:
                self._session._unlink
    def _quantizeDict(self):
        grid_setting = str(self.song().view.highlighted_clip_slot.clip.view.grid_quantization)
        is_it_triplet = self.song().view.highlighted_clip_slot.clip.view.grid_is_triplet
        if (is_it_triplet is True):
            grid_setting += "_triplet"
        RecordingQuantization = Live.Song.RecordingQuantization
        quantDict = {}
        quantDict["g_thirtysecond"] = RecordingQuantization.rec_q_thirtysecond
        quantDict["g_sixteenth"] = RecordingQuantization.rec_q_sixtenth
        quantDict["g_eighth"] = RecordingQuantization.rec_q_eight
        quantDict["g_quarter"] = RecordingQuantization.rec_q_quarter
        quantDict["g_eighth_triplet"] = RecordingQuantization.rec_q_eight_triplet
        quantDict["g_sixteenth_triplet"] = RecordingQuantization.rec_q_sixtenth_triplet
        return quantDict[grid_setting];
    def _arm_follow_track_selection(self):
        for track in self.song().tracks:
            if track.can_be_armed:
                track.arm = False
        if self.song().view.selected_track.can_be_armed:
            self.song().view.selected_track.arm = True
    def turn_inputs_off(self):
        send_feedback = False
        if hasattr(self, "global_feedback"):
            if self.global_feedback == "custom":
                if self.global_feedback_active == True:
                    send_feedback = True
            elif hasattr(self, "controller_LED_on") and hasattr(self, "controller_LED_off"):
                send_feedback = True
        if send_feedback == True:
            for input_name in self.input_map:
                input_ctrl = getattr(self, input_name)
                input_ctrl.send_value(self.led_off)
    def feedback_brain(self, obj):
        cnfg = obj.copy()
        try:
            method_to_call = getattr(self, cnfg["feedback_brain"])
            method_to_call(cnfg)
        except:
            return
    def feedback_bool(self, feedback_to):
        control =   eval("self." + str(feedback_to["attached_to"]))
        param =     eval(feedback_to["module"] + "." + feedback_to["ui_listener"])
        ctrl_on =   self.feedback_which_ctrl_on_off(feedback_to, "on")
        ctrl_off =  self.feedback_which_ctrl_on_off(feedback_to, "off")
        if(feedback_to["mapping_type"] == "Mute"):
            if param == False:
                send_val = ctrl_on
            elif param == True:
                send_val = ctrl_off
        else:
            if param == True:
                send_val = ctrl_on
            elif param == False:
                send_val = ctrl_off
        self.feedback_handler(feedback_to, send_val)
    def feedback_on_off(self, feedback_to):
        param =     eval(feedback_to["module"])
        ctrl_on =   self.feedback_which_ctrl_on_off(feedback_to, "on")
        ctrl_off =  self.feedback_which_ctrl_on_off(feedback_to, "off")
        param_value = round(param.value,2)
        mapping_type = str(feedback_to["mapping_type"])
        if "maximum" in feedback_to and "minimum" in feedback_to:
            max_val = feedback_to["maximum"]
            min_val = feedback_to["minimum"]
        elif hasattr(param, "max") and hasattr(param, "min"):
            max_val = param.max
            max_val = round(max_val,2)
            min_val = param.min
            min_val = round(min_val,2)
        else:
            self.log_message(str(param) + " does not have a max/min param")
            return
        send_val = None
        if param_value == max_val:
            send_val = ctrl_on
        elif param_value == min_val:
            send_val = ctrl_off
        if send_val is not None:
            self.feedback_handler(feedback_to, send_val)
        else:
            return
    def feedback_increment(self, feedback_to):
        control =   eval("self." + str(feedback_to["attached_to"]))
        param =     eval(feedback_to["module"])
        mapping_type = str(feedback_to["mapping_type"])
        ctrl_on =   self.feedback_which_ctrl_on_off(feedback_to, "on")
        ctrl_off =  self.feedback_which_ctrl_on_off(feedback_to, "off")
        snapping = feedback_to["snap_to"]
        mapping_type = str(feedback_to["mapping_type"])
        if "maximum" in feedback_to and "minimum" in feedback_to:
            max_val = feedback_to["maximum"]
            min_val = feedback_to["minimum"]
            if mapping_type != "On/Off":
                max_val = self.percent_as_value(feedback_to["module"], feedback_to["maximum"])
                min_val = self.percent_as_value(feedback_to["module"], feedback_to["minimum"])
        elif hasattr(param, "max") and hasattr(param, "min"):
            max_val = param.max
            min_val = param.min
        else:
            self.log_message(str(param) + " does not have a max/min param")
            return
        if snapping == False and param.value < min_val:
            send_val = ctrl_off
        elif param.value < max_val:
            send_val = ctrl_on
        else:
            send_val = ctrl_off
        self.feedback_handler(feedback_to, send_val)
    def feedback_decrement(self, feedback_to):
        control =   eval("self." + str(feedback_to["attached_to"]))
        param =     eval(feedback_to["module"])
        mapping_type = str(feedback_to["mapping_type"])
        ctrl_on =   self.feedback_which_ctrl_on_off(feedback_to, "on")
        ctrl_off =  self.feedback_which_ctrl_on_off(feedback_to, "off")
        snapping = feedback_to["snap_to"]
        if "maximum" in feedback_to and "minimum" in feedback_to:
            max_val = feedback_to["maximum"]
            min_val = feedback_to["minimum"]
            if mapping_type != "On/Off":
                max_val = self.percent_as_value(feedback_to["module"], feedback_to["maximum"])
                min_val = self.percent_as_value(feedback_to["module"], feedback_to["minimum"])
        elif hasattr(param, "max") and hasattr(param, "min"):
            max_val = param.max
            min_val = param.min
        else:
            self.log_message(str(param) + " does not have a max/min param")
            return
        if snapping == False and param.value > max_val:
            send_val = ctrl_off
        elif param.value > min_val:
            send_val = ctrl_on
        else:
            send_val = ctrl_off
        self.feedback_handler(feedback_to, send_val)
    def feedback_which_ctrl_on_off(self, feedback_to, on_off):
        if feedback_to["LED_feedback"] == "default":
            ctrl_on = self.led_on
            ctrl_off = self.led_off
        elif feedback_to["LED_feedback"] == "custom":
            if feedback_to["ctrl_type"] == "on/off" or feedback_to["ctrl_type"] == "increment" or feedback_to["ctrl_type"] == "decrement":
                ctrl_on = feedback_to["LED_on"]
                ctrl_off = feedback_to["LED_off"]
            elif feedback_to["ctrl_type"] == "absolute" or feedback_to["ctrl_type"] == "relative":
                ctrl_on = feedback_to["enc_first"]
                ctrl_off = feedback_to["enc_second"]
        if on_off == "on":
            value = ctrl_on
        elif on_off == "off":
            value = ctrl_off
        return value;
    def feedback_range(self, feedback_to):
        if feedback_to['ctrl_type'] == "on/off":
            self.feedback_on_off(feedback_to)
        elif feedback_to['ctrl_type'] == "increment":
            self.feedback_increment(feedback_to)
        elif feedback_to['ctrl_type'] == "decrement":
            self.feedback_decrement(feedback_to)
        control =   eval("self." + str(feedback_to["attached_to"]))
        param =     eval(feedback_to["module"])
        ctrl_min =  feedback_to["minimum"]
        ctrl_max =  feedback_to["maximum"]
        ctrl_type = feedback_to["ctrl_type"]
        default_ctrl_first = 0
        default_ctrl_last = 127
        if ctrl_type == "relative":
            crl_reverse = False
            ctrl_first = 0
            ctrl_last = 127
        else:
            crl_reverse = feedback_to["reverse_mode"]
            ctrl_first = feedback_to["enc_first"]
            ctrl_last = feedback_to["enc_second"]
        param_range = param.max - param.min
        orig_param_range = param.max - param.min
        param_range = ctrl_max * orig_param_range / 100
        ctrl_min_as_val = ctrl_min * orig_param_range / 100
        param_range = param_range - ctrl_min_as_val
        param_value = param.value - ctrl_min_as_val

        if orig_param_range == 2.0 and param.min == -1.0:
            param_value = param_value + 1
        percentage_control_is_at = param_value / param_range * 100
        ctrl_range = ctrl_last - ctrl_first
        percentage_of_ctrl_range = ctrl_range * percentage_control_is_at / 100 + ctrl_first
        percentage_of_ctrl_range = round(percentage_of_ctrl_range,0)
        if crl_reverse == True:
            percentage_of_ctrl_range = ctrl_range - percentage_of_ctrl_range
        self.feedback_handler(feedback_to, percentage_of_ctrl_range)
    def feedback_a_b_crossfade_assign(self, feedback_to):
        assigned_val = eval(str(feedback_to['parent_track']) + ".mixer_device.crossfade_assign")
        if(assigned_val == 0):
            send_val = feedback_to["LED_on"]
        elif(assigned_val == 1):
            send_val = feedback_to["LED_off"]
        elif(assigned_val == 2):
            send_val = feedback_to["LED_assigned_to_b"]
        else:
            send_val = 0
        self.feedback_handler(feedback_to, send_val)
    def feedback_handler(self, config, send_val):
        send_feedback = False
        if "LED_feedback" in config:
            if config["LED_feedback"] == "custom":
                if config["LED_feedback_active"] == "1" or config["LED_feedback_active"] == "true":
                    send_feedback = True
            elif hasattr(self, "global_feedback"):
                if self.global_feedback == "custom":
                    if self.global_feedback_active == True:
                        send_feedback = True
                elif hasattr(self, "controller_LED_on") and hasattr(self, "controller_LED_off"):
                    send_feedback = True
            if send_feedback == True:
                if config["LED_feedback"] == "custom":
                    for item in config["LED_send_feedback_to_selected"]:
                        feedback_control =  eval("self." + str(item))
                        feedback_control.send_value(send_val)
                else:
                    control =   eval("self." + str(config["attached_to"]))
                    control.send_value(send_val)
            else:
                self.log("feedback_handler says 'not sending led feedback'")
    def sess_highlight_banking_calculate(self, feedback_to, num_of_tracks_scenes, offset_is_at):
        ctrl_first = feedback_to["enc_first"]
        ctrl_last = feedback_to["enc_second"]
        ctrl_range = ctrl_last - ctrl_first
        if feedback_to['ctrl_type'] == "absolute" or feedback_to['ctrl_type'] == "relative":
            percentage_control_is_at = offset_is_at / num_of_tracks_scenes * 100
            velocity_val = ctrl_range * percentage_control_is_at / 100 + ctrl_first
            velocity_val = int(velocity_val)
        elif feedback_to['ctrl_type'] == "on/off" or feedback_to['ctrl_type'] == "increment":
            if offset_is_at == num_of_tracks_scenes:
                velocity_val = feedback_to["LED_on"]
            else:
                velocity_val = feedback_to["LED_off"]
        elif feedback_to['ctrl_type'] == "decrement":
            if offset_is_at == 0:
                velocity_val = feedback_to["LED_off"]
            else:
                velocity_val = feedback_to["LED_on"]
        if feedback_to['ctrl_type'] == "absolute" and feedback_to["reverse_mode"] == True:
            velocity_val = ctrl_range - velocity_val
        self.feedback_handler(feedback_to, velocity_val)
    def feedback_scroll_mode_selector(self, feedback_to):
        global active_mode
        num_of_tracks_scenes = len(self.modes) - 1
        count = 0
        for mode_num in list(self.modes.values()):
            if mode_num == active_mode:
                offset_is_at = count
                break
            count += 1
        self.sess_highlight_banking_calculate(feedback_to, num_of_tracks_scenes, offset_is_at)
    def feedback_scroll_mode_selector_select(self, feedback_to):
        global active_mode
        mode_to_select = int(feedback_to["func_arg"])
        if int(active_mode) == mode_to_select:
            self.feedback_handler(feedback_to, feedback_to["LED_on"])
        else:
            self.feedback_handler(feedback_to, feedback_to["LED_off"])
    def feedback_param_banking_select(self, feedback_to):
        if type(feedback_to["banking_number"]) == str:
            banking_number = self.get_modifier_value(feedback_to["banking_number"])
        else:
            banking_number = feedback_to["banking_number"] - 1
        parent_device_id = feedback_to["parent_device_id"]
        offset_is_at = getattr(self, "device_id_" + str(parent_device_id) + "_active_bank")
        if banking_number == offset_is_at:
            self.feedback_handler(feedback_to, feedback_to["LED_on"])
        else:
            self.feedback_handler(feedback_to, feedback_to["LED_off"])
    def feedback_param_banking(self, feedback_to):
        self.log_message("scroll banking fired")
        parent_device_id = feedback_to["parent_device_id"]
        bank_array = getattr(self, "device_id_" + str(parent_device_id) + "_banks")
        num_of_tracks_scenes = len(bank_array) - 1
        offset_is_at = getattr(self, "device_id_" + str(parent_device_id) + "_active_bank")
        self.sess_highlight_banking_calculate(feedback_to, num_of_tracks_scenes, offset_is_at)
    def feedback_highlight_nav_select(self, feedback_to):
        tracks_or_scenes = feedback_to["tracks_scenes"]
        tracks_scene_num = int(feedback_to["highlight_number"])
        if tracks_or_scenes == "tracks":
            offset_is_at = int(self.selected_track_idx()) - 1
        elif tracks_or_scenes == "scenes":
            offset_is_at = int(self.selected_scene_idx()) - 1
        if tracks_scene_num == offset_is_at:
            self.feedback_handler(feedback_to, feedback_to["LED_on"])
        else:
            self.feedback_handler(feedback_to, feedback_to["LED_off"])
    def feedback_highlight_nav(self, feedback_to):
        tracks_or_scenes = feedback_to["tracks_scenes"]
        if tracks_or_scenes == "tracks":
            offset_is_at = int(self.selected_track_idx()) - 1
            num_of_tracks_scenes = int(len(self.song().tracks)) - 1
        elif tracks_or_scenes == "scenes":
            offset_is_at = int(self.selected_scene_idx()) - 1
            num_of_tracks_scenes = int(len(self.song().scenes)) - 1
        self.sess_highlight_banking_calculate(feedback_to, num_of_tracks_scenes, offset_is_at)
    def feedback_sessbox_nav_select(self, feedback_to):
        try:
            self._session
        except:
            self.show_message("There's no Session Box to select for feedback")
            return
        tracks_scene_num = int(feedback_to["highlight_number"])
        tracks_or_scenes = feedback_to["tracks_scenes"]
        if tracks_or_scenes == "tracks":
            offset_is_at = int(self._session.track_offset())
        elif tracks_or_scenes == "scenes":
            offset_is_at = int(self._session.scene_offset())
        if tracks_scene_num == offset_is_at:
            self.feedback_handler(feedback_to, feedback_to["LED_on"])
        else:
            self.feedback_handler(feedback_to, feedback_to["LED_off"])
    def feedback_sessbox_nav(self, feedback_to):
        try:
            self._session
        except:
            self.show_message("There's no Session Box to scroll for feedback sir.")
            return
        tracks_or_scenes = feedback_to["tracks_scenes"]
        if tracks_or_scenes == "tracks":
            offset_is_at = int(self._session.track_offset())
            num_of_tracks_scenes = int(len(self.song().tracks)) - 1
        elif tracks_or_scenes == "scenes":
            offset_is_at = int(self._session.scene_offset())
            num_of_tracks_scenes = int(len(self.song().scenes)) - 1
        self.sess_highlight_banking_calculate(feedback_to, num_of_tracks_scenes, offset_is_at)
    def feedback_tempo(self, feedback_to):
        control =   eval("self." + str(feedback_to["attached_to"]))
        param =     eval(feedback_to["module"])
        ctrl_min =  feedback_to["minimum"]
        ctrl_max =  feedback_to["maximum"]
        ctrl_type = feedback_to["ctrl_type"]
        ctrl_first = feedback_to["enc_first"]
        ctrl_last = feedback_to["enc_second"]
        default_ctrl_first = 0
        default_ctrl_last = 127
        crl_reverse = feedback_to["reverse_mode"]
        param_range = ctrl_max - ctrl_min
        param =     eval(feedback_to["module"] + "." + feedback_to["ui_listener"])
        zero = ctrl_min
        if param < ctrl_min or param > ctrl_max:
            self.log("tempo is outside ctrl_min / ctrl_max")
        else:
            zerod_param = param - zero
            percentage_control_is_at = zerod_param / param_range * 100
        ctrl_range = ctrl_last - ctrl_first
        percentage_of_ctrl_range = ctrl_range * percentage_control_is_at / 100 + ctrl_first
        if crl_reverse == True:
            percentage_of_ctrl_range = ctrl_range - percentage_of_ctrl_range
        self.feedback_handler(feedback_to, percentage_of_ctrl_range)
    def mode_device_bank_leds(self, mode_id):
        config_map = "mode_" + str(mode_id) + "_configs_map"
        config_map = getattr(self, config_map)
        for config_name in config_map:
            config = getattr(self, config_name)
            if config["mapping_type"] == "Parameter Bank":
                parent_id = config["parent_json_id"]
                bank_names_array_name = "device_id_" + str(parent_id) + "_banks"
                active_bank_name = "device_id_" + str(parent_id) + "_active_bank"
                bank_names_array = getattr(self, bank_names_array_name)
                active_bank = getattr(self, active_bank_name)
                for index, bank_name in enumerate(bank_names_array):
                    if bank_name == config_name:
                        if index == active_bank:
                            led_on = config["LED_on"]
                            self.feedback_handler(config, led_on)
                        else:
                            led_off = config["LED_off"]
                            self.feedback_handler(config, led_off)
    def bank_led_feedback(self, parent_device_id):
        global active_mode
        device = "device_id_" + str(parent_device_id);
        device_bank_array = getattr(self, device + "_banks")
        active_bank_idx = getattr(self, device + "_active_bank")
        device_bank_params = getattr(self, device + "_bank_parameters_" + str(active_bank_idx))
        for index, val in enumerate(device_bank_array):
            bank_cnfg = getattr(self, val)
            bank_cnfg["LED_feedback"] = "custom";
            if index == active_bank_idx:
                if "LED_on" in bank_cnfg:
                    led_on = bank_cnfg["LED_on"]
                    self.feedback_handler(bank_cnfg, led_on)
            else:
                if "LED_off" in bank_cnfg:
                    led_off = bank_cnfg["LED_off"]
                    self.feedback_handler(bank_cnfg, led_off)

        remove_mode = getattr(self, "_remove_mode" + active_mode + "_ui_listeners")
        remove_mode()
        activate_mode = getattr(self, "_mode" + active_mode + "_ui_listeners")
        activate_mode()
        for param in device_bank_params:
            fire_param_feedback = getattr(self, param + "_led_listener")
            fire_param_feedback()
    def device_feedback(self, mode_id=None):
        if (mode_id == None):
            global active_mode
            mode_id = active_mode
        config_map = "mode_" + str(mode_id) + "_configs_map"
        config_map = getattr(self, config_map)
        for config_name in config_map:
            config = getattr(self, config_name)
            if "mapping_type" in config and config["mapping_type"] == "Device":
                led_on = config["LED_on"]
                led_off = config["LED_off"]
                try:
                    device = eval(config["module"])
                except:
                    self.feedback_handler(config, led_off)
                    return
                find = config["module"].find("selected_track")
                if find >= 0:
                    selected_device = self.song().view.selected_track.view.selected_device
                    if device == selected_device:
                        self.feedback_handler(config, led_on)
                    else:
                        self.feedback_handler(config, led_off)
                else:
                    for parent_name in config_map:
                        parent_config = getattr(self, parent_name)
                        if parent_config["json_id"] == config["parent_json_id"]:
                            parent_track = parent_config["module"]
                            break
                    tracks_selected_device = eval(parent_track + ".view.selected_device")
                    if device == tracks_selected_device:
                        self.feedback_handler(config, led_on)
                    else:
                        self.feedback_handler(config, led_off)
    def _on_selected_track_changed(self):
        global active_mode, prev_active_mode, modes
        self.log("selected track changed")
        remove_modex_led_listeners = "_remove_mode" + active_mode + "_led_listeners"
        add_modex_led_listeners = "_mode" + active_mode + "_led_listeners"
        if(hasattr(self, remove_modex_led_listeners)):
            mode_to_call = getattr(self, remove_modex_led_listeners)
            mode_to_call()
        if(hasattr(self, add_modex_led_listeners)):
            mode_to_call = getattr(self, add_modex_led_listeners)
            mode_to_call()
            self.track_feedback()
            self.device_feedback()
        self.refresh_state()
    def track_feedback(self, mode_id=None):
        if (mode_id == None):
            global active_mode
            mode_id = active_mode
        config_map = "mode_" + str(mode_id) + "_configs_map"
        config_map = getattr(self, config_map)
        selected_track = self.song().view.selected_track
        for config_name in config_map:
            config = getattr(self, config_name)
            if "mapping_type" in config and config["mapping_type"] == "Track":
                led_on = config["LED_on"]
                led_off = config["LED_off"]
                try:
                    track = eval(config["module"])
                except:
                    self.feedback_handler(config, led_off)
                    return
                if track == selected_track:
                    self.feedback_handler(config, led_on)
                else:
                    self.feedback_handler(config, led_off)
    def create_clip_slot_map(self):
        num_of_tracks = int(len(self.song().tracks))
        num_of_scenes = int(len(self.song().scenes))
        for track in range(0,num_of_tracks):
            for scene in range(0,num_of_scenes):
                if(not self.song().tracks[track].clip_slots[scene].has_clip_has_listener(self._on_clip_added_removed)):
                    try:
                        self.song().tracks[track].clip_slots[scene].add_has_clip_listener(self._on_clip_added_removed)
                    except:
                        pass
    def _on_clip_added_removed(self):
        global active_mode
        self.log("a clip has been added or removed")
        updated_by = "_on_clip_added_removed"
        self._remove_custom_lom_listeners_handler(active_mode, updated_by)
        self._add_custom_lom_listeners_handler(active_mode, updated_by)
    def _on_tracks_changed(self):
        global active_mode
        self.log("tracks changed")
        updated_by = "_on_tracks_changed"
        self._remove_custom_lom_listeners_handler(active_mode, updated_by)
        self._add_custom_lom_listeners_handler(active_mode, updated_by)
        self.all_track_device_listeners()
        self.create_clip_slot_map()
    def _on_scenes_changed(self):
        global active_mode
        self.log("scenes changed")
        updated_by = "_on_scenes_changed"
        self._remove_custom_lom_listeners_handler(active_mode, updated_by)
        self._add_custom_lom_listeners_handler(active_mode, updated_by)
        self.create_clip_slot_map()
    def _on_devices_changed(self):
        global active_mode, prev_active_mode, modes
        self.log("devices changed")
        updated_by = "_on_devices_changed"
        self._remove_custom_lom_listeners_handler(active_mode, updated_by)
        self._add_custom_lom_listeners_handler(active_mode, updated_by)
        try:
            mode_to_call = getattr(self, "_remove_mode" + active_mode + "_led_listeners")
            mode_to_call()
            mode_to_call = getattr(self, "_mode" + active_mode + "_led_listeners")
            mode_to_call()
        except:
            pass
    def _on_selected_device_changed(self):
        global active_mode, prev_active_mode, modes
        self.log("selected device changed")
        try:
            mode_to_call = getattr(self, "_remove_mode" + active_mode + "_led_listeners")
            mode_to_call()
            mode_to_call = getattr(self, "_mode" + active_mode + "_led_listeners")
            mode_to_call()
            self.device_feedback()
            self.refresh_state()
        except:
            pass
    def _on_selected_parameter_changed(self):
        global active_mode
        self.log("selected parameter changed")
        if(hasattr(self.song().view.selected_parameter, "canonical_parent") and hasattr(self.song().view.selected_parameter.canonical_parent, "type")):
            updated_by = "_on_selected_parameter_changed"
            self._remove_custom_lom_listeners_handler(active_mode, updated_by)
            self._add_custom_lom_listeners_handler(active_mode, updated_by)
    def _on_selected_scene_changed(self):
        global active_mode, prev_active_mode, modes
        self.log("selected scene changed")
        remove_modex_led_listeners = "_remove_mode" + active_mode + "_led_listeners"
        add_modex_led_listeners = "_mode" + active_mode + "_led_listeners"
        if(hasattr(self, remove_modex_led_listeners)):
            mode_to_call = getattr(self, remove_modex_led_listeners)
            mode_to_call()
        if(hasattr(self, add_modex_led_listeners)):
            mode_to_call = getattr(self, add_modex_led_listeners)
            mode_to_call()
        self.refresh_state()
    def _all_tracks_listener(self):
        global active_mode, prev_active_mode, modes
        self.log("mode 1 tracks listener")
        mode_to_call = getattr(self, "_remove_mode" + active_mode + "_led_listeners")
        mode_to_call()
        mode_to_call = getattr(self, "_mode" + active_mode + "_led_listeners")
        mode_to_call()
    def all_track_device_listeners(self):
        numtracks = len(self.song().tracks)
        for index in range(numtracks):
            try:
                self.song().tracks[index].view.add_selected_device_listener(self._on_selected_device_changed)
                self.song().tracks[index].add_devices_listener(self._on_devices_changed)
            except:
                pass
        num_returns = len(self.song().return_tracks)
        for index in range(num_returns):
            try:
                self.song().return_tracks[index].view.add_selected_device_listener(self._on_selected_device_changed)
                self.song().return_tracks[index].add_devices_listener(self._on_devices_changed)
            except:
                pass
        try:
            self.song().master_track.view.add_selected_device_listener(self._on_selected_device_changed)
            self.song().master_track.add_devices_listener(self._on_devices_changed)
        except:
            pass
    def _remove_all_track_device_listeners(self):
        numtracks = len(self.song().tracks)
        for index in range(numtracks):
            try:
                self.song().tracks[index].view.remove_selected_device_listener(self._on_selected_device_changed)
                self.song().tracks[index].remove_devices_listener(self._on_devices_changed)
            except:
                pass
        num_returns = len(self.song().return_tracks)
        for index in range(num_returns):
            try:
                self.song().return_tracks[index].view.remove_selected_device_listener(self._on_selected_device_changed)
                self.song().return_tracks[index].remove_devices_listener(self._on_devices_changed)
            except:
                pass
        try:
            self.song().master_track.view.remove_selected_device_listener(self._on_selected_device_changed)
            self.song().master_track.remove_devices_listener(self._on_devices_changed)
        except:
            pass
    ################################################
    ############# Extra Functions ##################
    ################################################
    def scroll_through_devices(self, cnfg):
        NavDirection = Live.Application.Application.View.NavDirection
        if cnfg["ctrl_type"] == "absolute":
            if cnfg["value"] > cnfg["pre_val"]:
                if cnfg["reverse_mode"] is False:
                    goto = "right"
                elif cnfg["reverse_mode"] is True:
                    goto = "left"
                times = 1;
            elif cnfg["value"] < cnfg["pre_val"]:
                if cnfg["reverse_mode"] is False:
                    goto = "left"
                elif cnfg["reverse_mode"] is True:
                    goto = "right"
                times = 1;
        elif cnfg["ctrl_type"] == "relative":
            if cnfg["enc_first"] == cnfg["value"]:
                goto = "left"
                times = cnfg["steps"];
            elif cnfg["enc_second"] == cnfg["value"]:
                goto = "right"
                times = cnfg["steps"];
        elif cnfg["ctrl_type"] == "on/off":
            if cnfg["enc_first"] == cnfg["value"]:
                goto = "right"
            elif cnfg["enc_second"] == cnfg["value"]:
                goto = "right"
        elif cnfg["ctrl_type"] == "increment":
            if cnfg["enc_first"] == cnfg["value"]:
                goto = "right"
                times = cnfg["steps"];
        elif cnfg["ctrl_type"] == "decrement":
            if cnfg["enc_first"] == cnfg["value"]:
                goto = "left"
                times = cnfg["steps"];
        if goto == "right":
            for x in range(0, times):
                self._scroll_device_chain(NavDirection.right)
        elif goto == "left":
            for x in range(0, times):
                self._scroll_device_chain(NavDirection.left)
    def _scroll_device_chain(self, direction):
        view = self.application().view
        if not view.is_view_visible('Detail') or not view.is_view_visible('Detail/DeviceChain'):
            view.show_view('Detail')
            view.show_view('Detail/DeviceChain')
        else:
            view.scroll_view(direction, 'Detail/DeviceChain', False)
    def selected_device_idx(self):
        self._device = self.song().view.selected_track.view.selected_device
        return self.tuple_index(self.song().view.selected_track.devices, self._device)
    def selected_track_idx(self):
        self._track = self.song().view.selected_track
        self._track_num = self.tuple_index(self.song().tracks, self._track)
        self._track_num = self._track_num + 1
        return self._track_num
    def selected_scene_idx(self):
        self._scene = self.song().view.selected_scene
        self._scene_num = self.tuple_index(self.song().scenes, self._scene)
        self._scene_num = self._scene_num + 1
        return self._scene_num
    def tuple_index(self, tuple, obj):
        for i in range(0, len(tuple)):
            if (tuple[i] == obj):
                return i
        return(False)
    def select_a_device(self, cnfg):
        parent_track = cnfg["parent_track"]
        device_chain = cnfg["device_chain"]
        chain_selector = "self.song().view.selected_track" + device_chain
        try:
            self.song().view.selected_track = eval(parent_track)
            try:
                self.song().view.select_device(eval(chain_selector))
            except IndexError:
                self.show_message("Device you are trying to select does not exist on track.")
        except IndexError:
            self.show_message("Track does not exist for the device you are selecting.")
    def a_b_crossfade_assign(self, cnfg):
        assignment_type = cnfg['assignment_type'];
        if(assignment_type == "Scroll"):
            goto = self.scroll_a_b_assign(cnfg);
            if goto > 2:
                goto = 2
        elif cnfg["enc_first"] == cnfg["value"]:
            if assignment_type == "Select A":
                goto = 0
            elif assignment_type == "Select None":
                goto = 1
            elif assignment_type == "Select B":
                goto = 2
            else:
                goto = 0
        setattr(eval(str(cnfg['parent_track']) + ".mixer_device"), "crossfade_assign", goto)
    def scroll_a_b_assign(self, cnfg):
        should_it_fire = self.should_it_fire(cnfg)
        if(should_it_fire != 1):
            return
        current_assigned_value = eval(str(cnfg['parent_track']) + ".mixer_device.crossfade_assign")
        length = 3
        if cnfg["ctrl_type"] == "absolute":
            divider = (cnfg["enc_second"] - cnfg["enc_first"]) / length
            goto = int(cnfg["value"] / divider)
            if cnfg["reverse_mode"] is True:
                if(goto >= 2):
                    goto = 0
                elif(goto == 0):
                    goto = 2
            goto = int(goto)
        elif cnfg["ctrl_type"] == "relative":
            self.log_message("csslog: relative");
            if cnfg["enc_first"] == cnfg["value"] and current_assigned_value > 0:
                goto = current_assigned_value - 1
            elif cnfg["enc_second"] == cnfg["value"] and current_assigned_value < 2:
                goto = current_assigned_value + 1
        elif cnfg["ctrl_type"] == "on/off":
            if current_assigned_value < 2:
                goto = current_assigned_value + 1
            elif current_assigned_value >= 2:
                goto = 0
        elif cnfg["ctrl_type"] == "increment":
            if current_assigned_value < 2:
                goto = current_assigned_value + 1
            else:
                goto = current_assigned_value
        elif cnfg["ctrl_type"] == "decrement":
            if current_assigned_value > 0:
                goto = current_assigned_value - 1
            else:
                goto = current_assigned_value
        return int(goto)
    def scroll_highlight(self, cnfg):
        if cnfg["tracks_scenes"] == "tracks":
            length = len(self.song().tracks) + len(self.song().return_tracks)

            selected = self.selected_track_idx() - 1
        elif cnfg["tracks_scenes"] == "scenes":
            length = len(self.song().scenes)
            selected = self.selected_scene_idx() - 1
        else:
            self.log("scroll_highlight error, tracks_scenes was not set")
        if cnfg["ctrl_type"] == "absolute":
            divider = (cnfg["enc_second"] - cnfg["enc_first"]) / length
            if cnfg["reverse_mode"] is False:
                goto = cnfg["value"] / divider
            elif cnfg["reverse_mode"] is True:
                goto = (divider * length) / cnfg["value"]
            goto = int(goto)
        elif cnfg["ctrl_type"] == "relative":
            if cnfg["enc_first"] == cnfg["value"]:
                goto = selected - cnfg["steps"]
            elif cnfg["enc_second"] == cnfg["value"]:
                goto = selected + cnfg["steps"]
        elif cnfg["ctrl_type"] == "on/off":
            if cnfg["enc_first"] == cnfg["value"]:
                goto = length
            elif cnfg["enc_second"] == cnfg["value"]:
                goto = 0
        elif cnfg["ctrl_type"] == "increment":
            goto = selected + cnfg["steps"]
        elif cnfg["ctrl_type"] == "decrement":
            goto = selected - cnfg["steps"]
        if goto <= length and goto >= 0 and goto != selected:
            cnfg["highlight_number"] = goto
            self.select_highlight(cnfg)
    def select_sess_offset(self, cnfg):
        try:
            self._session
        except:
            self.show_message("There's no Session Box to select, buddy.")
            return
        tracks_scenes = cnfg["tracks_scenes"]
        track_offset = self._session.track_offset()
        scene_offset = self._session.scene_offset()
        if type(cnfg["highlight_number"]) == str:
            change_to = self.get_modifier_value(cnfg["highlight_number"])
        else:
            change_to = cnfg["highlight_number"]
        if tracks_scenes == "tracks":
            track_offset = change_to
        elif tracks_scenes == "scenes":
            scene_offset = change_to
        try:
            self._session.set_offsets(track_offset, scene_offset)
            self._session._reassign_scenes()
            self._set_session_highlight( self._session.track_offset(), self._session.scene_offset(), self._session.width(), self._session.height(), True)
            self.refresh_state()
            self.call_script_reaction(active_mode, None, 'session_box_position')
        except:
            self.show_message("unable to move session box there.")
    def scroll_sess_offset(self, cnfg):
        try:
            self._session
        except:
            self.show_message("There's no Session Box to scroll, buddy.")
            return
        tracks_scenes = cnfg["tracks_scenes"]
        track_offset = self._session.track_offset()
        scene_offset = self._session.scene_offset()
        if cnfg["tracks_scenes"] == "tracks":
            length = len(self.song().tracks)
            selected = track_offset
        elif cnfg["tracks_scenes"] == "scenes":
            length = len(self.song().scenes)
            selected = scene_offset
        else:
            self.log("scroll_sess_offset error, tracks_scenes was not set")
        if cnfg["ctrl_type"] == "absolute":
            divider = (cnfg["enc_second"] - cnfg["enc_first"]) / length
            goto = cnfg["value"] / divider
            if cnfg["reverse_mode"] is True:
                goto = length - goto
            goto = int(goto)
        elif cnfg["ctrl_type"] == "relative":
            if cnfg["enc_first"] == cnfg["value"]:
                goto = selected - cnfg["steps"]
            elif cnfg["enc_second"] == cnfg["value"]:
                goto = selected + cnfg["steps"]
        elif cnfg["ctrl_type"] == "on/off":
            if cnfg["enc_first"] == cnfg["value"] or cnfg["enc_second"] == cnfg["value"]:
                if selected != 0 and selected != length - 1:
                    goto = length - 1
                elif selected == 0:
                    goto = length - 1
                else:
                    goto = 0
        elif cnfg["ctrl_type"] == "increment":
            goto = selected + cnfg["steps"]
        elif cnfg["ctrl_type"] == "decrement":
            goto = selected - cnfg["steps"]
        if(goto < 0):
            goto = 0
        if cnfg["tracks_scenes"] == "tracks":
            track_offset = goto
        elif cnfg["tracks_scenes"] == "scenes":
            scene_offset = goto
        try:
            self._session.set_offsets(track_offset, scene_offset)
            self._session._reassign_scenes()
            self._set_session_highlight( self._session.track_offset(), self._session.scene_offset(), self._session.width(), self._session.height(), True)
            self.refresh_state()
            self.call_script_reaction(active_mode, None, 'session_box_position')
        except:
            self.show_message("unable to move session box there.")
    def get_tracks_array(self):
        tracks_array = []
        count = 0
        for index in range(len(self.song().tracks)):
            tracks_array.append(self.song().tracks[count])
            count = count+1
        count = 0
        for index in range(len(self.song().return_tracks)):
            tracks_array.append(self.song().return_tracks[count])
            count = count+1
        tracks_array.append(self.song().master_track)
        return tracks_array
    def select_highlight(self, cnfg):
        tracks_scenes = cnfg["tracks_scenes"]
        if type(cnfg["highlight_number"]) == str:
            change_to = self.get_modifier_value(cnfg["highlight_number"])
        else:
            change_to = cnfg["highlight_number"]

        if tracks_scenes == "tracks":
            num_of_tracks_scenes = len(self.song().tracks) + len(self.song().return_tracks) + 1
        elif tracks_scenes == "scenes":
            num_of_tracks_scenes = len(self.song().scenes)
        if num_of_tracks_scenes >= change_to + 1:
            if tracks_scenes == "tracks":
                all_tracks_arr = self.get_tracks_array()
                self.song().view.selected_track = all_tracks_arr[change_to]
            elif tracks_scenes == "scenes":
                self.song().view.selected_scene = self.song().scenes[change_to]
        else:
            self.show_message("Your Session doesn't have " + str(change_to + 1) + " " + tracks_scenes)
    def scroll_active_device_bank(self, cnfg):
        device_id = cnfg["parent_device_id"]
        device = "device_id_" + str(device_id);
        active_bank = getattr(self, device + "_active_bank")
        banks = getattr(self, device + "_banks")
        length = len(banks) - 1
        if cnfg["ctrl_type"] == "absolute":
            divider = (cnfg["enc_second"] - cnfg["enc_first"]) / length
            if cnfg["reverse_mode"] is False:
                goto = cnfg["value"] / divider
            elif cnfg["reverse_mode"] is True:
                goto = (divider * length) / cnfg["value"]
            goto = int(goto)
        elif cnfg["ctrl_type"] == "relative":
            if cnfg["enc_first"] == cnfg["value"]:
                goto = active_bank - 1
            elif cnfg["enc_second"] == cnfg["value"]:
                goto = active_bank + 1
        elif cnfg["ctrl_type"] == "on/off":
            if cnfg["switch_type"] == "toggle":
                if cnfg["enc_first"] == cnfg["value"]:
                    goto = length
                elif cnfg["enc_second"] == cnfg["value"]:
                    goto = 0
            elif active_bank == length:
                goto = 0
            else:
                goto = length
        elif cnfg["ctrl_type"] == "increment":
            goto = active_bank + 1
        elif cnfg["ctrl_type"] == "decrement":
            goto = active_bank - 1
        if goto <= length and goto >= 0 and goto != active_bank:
            cnfg["banking_number"] = goto + 1
            self.change_active_device_bank(cnfg)
    def change_active_device_bank(self, cnfg):
        global active_mode
        device_id = cnfg["parent_device_id"]
        if type(cnfg["banking_number"]) == str:
            change_to_bank = self.get_modifier_value(cnfg["banking_number"])
        else:
            change_to_bank = cnfg["banking_number"] - 1
        device = "device_id_" + str(device_id);
        bank_names = getattr(self, device + "_bank_names")
        length = len(bank_names) - 1;
        if change_to_bank <= length:
            setattr(self, device + "_active_bank", change_to_bank)
            self.bank_led_feedback(cnfg["parent_json_id"]);
            self.show_message("changed active bank to: " + bank_names[change_to_bank])
        elif change_to_bank > length:
            self.show_message("device does not have " + str(change_to_bank + 1) + " parameter banks set")
        fire_all_mode_feedback = getattr(self, "_mode" + active_mode + "_fire_all_feedback")
        fire_all_mode_feedback()
    def session_box(self, num_tracks, num_scenes, track_offset, scene_offset, clips, stop_all, stop_tracks, scene_launch, feedbackArr, combination_mode):
        self._session = SessionComponent(num_tracks, num_scenes)
        self._session.set_offsets(track_offset, scene_offset)
        self._session.add_offset_listener(self._on_session_offset_changes, identify_sender= False)
        self._session._reassign_scenes()
        self._set_session_highlight( self._session.track_offset(), self._session.scene_offset(), self._session.width(), self._session.height(), True)
        if clips:
            self._grid = ButtonMatrixElement(rows=[clips[(index*num_tracks):(index*num_tracks)+num_tracks] for index in range(num_scenes)])
            self._session.set_clip_launch_buttons(self._grid)
        if stop_all:
            self._session.set_stop_all_clips_button(stop_all)
        if stop_tracks:
            self._session.set_stop_track_clip_buttons(tuple(stop_tracks))
        if scene_launch:
            scene_launch_buttons = ButtonMatrixElement(rows=[scene_launch])
            self._session.set_scene_launch_buttons(scene_launch_buttons)
            self._session.set_stop_clip_triggered_value(feedbackArr["StopClipTriggered"])
            self._session.set_stop_clip_value(feedbackArr["StopClip"])
        for scene_index in range(num_scenes):
            scene = self._session.scene(scene_index)
            scene.set_scene_value(feedbackArr["Scene"])
            scene.set_no_scene_value(feedbackArr["NoScene"])
            scene.set_triggered_value(feedbackArr["SceneTriggered"])
            for track_index in range(num_tracks):
                clip_slot = scene.clip_slot(track_index)
                clip_slot.set_triggered_to_play_value(feedbackArr["ClipTriggeredPlay"])
                clip_slot.set_triggered_to_record_value(feedbackArr["ClipTriggeredRecord"])
                clip_slot.set_record_button_value(feedbackArr["RecordButton"])
                clip_slot.set_stopped_value(feedbackArr["ClipStopped"])
                clip_slot.set_started_value(feedbackArr["ClipStarted"])
                clip_slot.set_recording_value(feedbackArr["ClipRecording"])
            for index in range(len(stop_tracks)):
                stop_track_button = stop_tracks[index]
                if feedbackArr["StopTrackPlaying"] and feedbackArr["StopTrackStopped"]:
                    stop_track_button.set_on_off_values(feedbackArr["StopTrackPlaying"], feedbackArr["StopTrackStopped"])
            if stop_all:
                if feedbackArr["StopAllOn"] and feedbackArr["StopAllOff"]:
                    stop_all.set_on_off_values(feedbackArr["StopAllOn"], feedbackArr["StopAllOff"])
        if combination_mode == "on":
            self._session._link()
        self.refresh_state()
    def _on_session_offset_changes(self):
        global active_mode
        updated_by = "_on_session_offset_changes"
        self._remove_custom_lom_listeners_handler(active_mode, updated_by)
        self._add_custom_lom_listeners_handler(active_mode, updated_by)
        self.log("sessionbox offset changed")
        try:
            remove_mode = getattr(self, "_remove_mode" + active_mode + "_led_listeners")
            remove_mode()
            activate_mode = getattr(self, "_mode" + active_mode + "_led_listeners")
            activate_mode()
        except:
            self.log("_on_session_offset_changes: could not remove / add led_listeners")
            return;
    def remove_session_box(self, combination_mode):
        if hasattr(self, "_session"):
            self.current_track_offset = self._session._track_offset
            self.current_scene_offset = self._session._scene_offset
            self._session.set_clip_launch_buttons(None)
            self._set_session_highlight(-1, -1, -1, -1, False)
            self._session.set_stop_all_clips_button(None)
            self._session.set_stop_track_clip_buttons(None)
            self._session.set_scene_launch_buttons(None)
            if combination_mode == "on":
                self._session._unlink()
            self._session = None
    def scroll_modes(self, cnfg):
        controller = getattr(self, cnfg["attached_to"])
        cnfg["value"] = controller.cur_val
        if cnfg["ctrl_type"] == "absolute":
            divider = (cnfg["enc_second"] - cnfg["enc_first"]) / (len(self.modes) - 1)
            if cnfg["reverse_mode"] is False:
                goto = cnfg["value"] / divider
            elif cnfg["reverse_mode"] is True:
                length = len(self.modes) - 1
                goto = (divider * length) / cnfg["value"]
            goto = int(goto)
        elif cnfg["ctrl_type"] == "relative":
            if cnfg["enc_first"] == cnfg["value"]:
                goto = self.key_num - 1
            elif cnfg["enc_second"] == cnfg["value"]:
                goto = self.key_num + 1
        elif cnfg["ctrl_type"] == "on/off":
            if cnfg["enc_first"] == cnfg["value"]:
                goto = len(self.modes) - 1
            elif cnfg["enc_second"] == cnfg["value"]:
                goto = 0
        elif cnfg["ctrl_type"] == "increment":
            if cnfg["enc_first"] == cnfg["value"]:
                goto = self.key_num + 1
        elif cnfg["ctrl_type"] == "decrement":
            if cnfg["enc_first"] == cnfg["value"]:
                goto = self.key_num - 1
        if goto <= len(self.modes) and goto >= 0 and active_mode != self.modes[goto]:
            self.set_active_mode(self.modes[goto])
    def listening_to_tracks(self):
        global active_mode
        self.remove_listening_to_tracks()
        for index in range(len(self.song().tracks)):
            _track = self.song().tracks[index]
            if _track.can_be_armed and hasattr(self, "_mode" + active_mode + "_arm_listener"):
                _track.add_arm_listener(getattr(self, "_mode" + active_mode + "_arm_listener"))
            if hasattr(self, "_mode" + active_mode + "_mute_listener"):
                _track.add_mute_listener(getattr(self, "_mode" + active_mode + "_mute_listener"))
            if hasattr(self, "_mode" + active_mode + "_solo_listener"):
                _track.add_solo_listener(getattr(self, "_mode" + active_mode + "_solo_listener"))
            if hasattr(self, "_mode" + active_mode + "_volume_listener"):
                _track.mixer_device.volume.add_value_listener(getattr(self, "_mode" + active_mode + "_volume_listener"))
            if hasattr(self, "_mode" + active_mode + "_panning_listener"):
                _track.mixer_device.panning.add_value_listener(getattr(self, "_mode" + active_mode + "_panning_listener"))
            if hasattr(self, "_mode" + active_mode + "_send_listener"):
                for send_index in range(len(_track.mixer_device.sends)):
                    _track.mixer_device.sends[send_index].add_value_listener(getattr(self, "_mode" + active_mode + "_send_listener"))
        for index in range(len(self.song().return_tracks)):
            _return_track = self.song().return_tracks[index]
            if hasattr(self, "_mode" + active_mode + "_mute_listener"):
                _return_track.add_mute_listener(getattr(self, "_mode" + active_mode + "_mute_listener"))
            if hasattr(self, "_mode" + active_mode + "_solo_listener"):
                _return_track.add_solo_listener(getattr(self, "_mode" + active_mode + "_solo_listener"))
            if hasattr(self, "_mode" + active_mode + "_volume_listener"):
                _return_track.mixer_device.volume.add_value_listener(getattr(self, "_mode" + active_mode + "_volume_listener"))
            if hasattr(self, "_mode" + active_mode + "_panning_listener"):
                _return_track.mixer_device.panning.add_value_listener(getattr(self, "_mode" + active_mode + "_panning_listener"))
            if hasattr(self, "_mode" + active_mode + "_send_listener"):
                for send_index in range(len(_return_track.mixer_device.sends)):
                    _return_track.mixer_device.sends[send_index].add_value_listener(getattr(self, "_mode" + active_mode + "_send_listener"))
        _master = self.song().master_track
        if hasattr(self, "_mode" + active_mode + "_volume_listener"):
            _master.mixer_device.volume.add_value_listener(getattr(self, "_mode" + active_mode + "_volume_listener"))
        if hasattr(self, "_mode" + active_mode + "_panning_listener"):
            _master.mixer_device.panning.add_value_listener(getattr(self, "_mode" + active_mode + "_panning_listener"))
    def remove_listening_to_tracks(self):
        global active_mode
        for index in range(len(self.song().tracks)):
            _track = self.song().tracks[index]
            if hasattr(self, "_mode" + active_mode + "_arm_listener"):
                if _track.arm_has_listener(getattr(self, "_mode" + active_mode + "_arm_listener")):
                    _track.remove_arm_listener(getattr(self, "_mode" + active_mode + "_arm_listener"))
            if hasattr(self, "_mode" + active_mode + "_mute_listener"):
                if _track.mute_has_listener(getattr(self, "_mode" + active_mode + "_mute_listener")):
                    _track.remove_mute_listener(getattr(self, "_mode" + active_mode + "_mute_listener"))
            if hasattr(self, "_mode" + active_mode + "_solo_listener"):
                if _track.solo_has_listener(getattr(self, "_mode" + active_mode + "_solo_listener")):
                    _track.remove_solo_listener(getattr(self, "_mode" + active_mode + "_solo_listener"))
            if hasattr(self, "_mode" + active_mode + "_volume_listener"):
                if _track.mixer_device.volume.value_has_listener(getattr(self, "_mode" + active_mode + "_volume_listener")):
                    _track.mixer_device.volume.remove_value_listener(getattr(self, "_mode" + active_mode + "_volume_listener"))
            if hasattr(self, "_mode" + active_mode + "_panning_listener"):
                if _track.mixer_device.panning.value_has_listener(getattr(self, "_mode" + active_mode + "_panning_listener")):
                    _track.mixer_device.panning.remove_value_listener(getattr(self, "_mode" + active_mode + "_panning_listener"))
            if hasattr(self, "_mode" + active_mode + "_send_listener"):
                for send_index in range(len(_track.mixer_device.sends)):
                    if _track.mixer_device.sends[send_index].value_has_listener(getattr(self, "_mode" + active_mode + "_send_listener")):
                        _track.mixer_device.sends[send_index].remove_value_listener(getattr(self, "_mode" + active_mode + "_send_listener"))
        for index in range(len(self.song().return_tracks)):
            _return_track = self.song().return_tracks[index]
            if hasattr(self, "_mode" + active_mode + "_mute_listener"):
                if _return_track.mute_has_listener(getattr(self, "_mode" + active_mode + "_mute_listener")):
                    _return_track.remove_mute_listener(getattr(self, "_mode" + active_mode + "_mute_listener"))
            if hasattr(self, "_mode" + active_mode + "_solo_listener"):
                if _return_track.solo_has_listener(getattr(self, "_mode" + active_mode + "_solo_listener")):
                    _return_track.remove_solo_listener(getattr(self, "_mode" + active_mode + "_solo_listener"))
            if hasattr(self, "_mode" + active_mode + "_volume_listener"):
                if _return_track.mixer_device.volume.value_has_listener(getattr(self, "_mode" + active_mode + "_volume_listener")):
                    _return_track.mixer_device.volume.remove_value_listener(getattr(self, "_mode" + active_mode + "_volume_listener"))
            if hasattr(self, "_mode" + active_mode + "_panning_listener"):
                if _return_track.mixer_device.panning.value_has_listener(getattr(self, "_mode" + active_mode + "_panning_listener")):
                    _return_track.mixer_device.panning.remove_value_listener(getattr(self, "_mode" + active_mode + "_panning_listener"))
            if hasattr(self, "_mode" + active_mode + "_send_listener"):
                for send_index in range(len(_return_track.mixer_device.sends)):
                    if _return_track.mixer_device.sends[send_index].value_has_listener(getattr(self, "_mode" + active_mode + "_send_listener")):
                        _return_track.mixer_device.sends[send_index].remove_value_listener(getattr(self, "_mode" + active_mode + "_send_listener"))
        _master = self.song().master_track
        if hasattr(self, "_mode" + active_mode + "_volume_listener"):
            if _master.mixer_device.volume.value_has_listener(getattr(self, "_mode" + active_mode + "_volume_listener")):
                _master.mixer_device.volume.remove_value_listener(getattr(self, "_mode" + active_mode + "_volume_listener"))
        if hasattr(self, "_mode" + active_mode + "_panning_listener"):
            if _master.mixer_device.panning.value_has_listener(getattr(self, "_mode" + active_mode + "_panning_listener")):
                _master.mixer_device.panning.remove_value_listener(getattr(self, "_mode" + active_mode + "_panning_listener"))
    def set_active_mode(self, activate_new_mode):
        global active_mode, prev_active_mode, modes
        for number, mode_id in list(self.modes.items()):
            if mode_id == activate_new_mode:
                self.key_num = mode_id
        if(activate_new_mode == "Previous Mode"):
            if 'prev_active_mode' not in globals():
                self.show_message("No previous mode is set yet.")
            else:
                remove_mode = getattr(self, "_remove_mode" + active_mode)
                remove_mode()
                activate_new_mode = prev_active_mode
                prev_active_mode = active_mode
                self.call_script_reaction(prev_active_mode, None, 'mode_is_deactivated')
                active_mode = activate_new_mode
                mode_to_call = getattr(self, "_mode" + activate_new_mode)
                mode_to_call()
                self.call_script_reaction(activate_new_mode, None, 'mode_is_activated')
        else:
            if 'active_mode' in globals():
                remove_mode = getattr(self, "_remove_mode" + active_mode)
                remove_mode()
                prev_active_mode = active_mode
                self.call_script_reaction(prev_active_mode, None, 'mode_is_deactivated')
            active_mode = activate_new_mode
            mode_to_call = getattr(self, "_mode" + activate_new_mode)
            mode_to_call()
            self.call_script_reaction(activate_new_mode, None, 'mode_is_activated')
    def target_by_name(self, target_list, name):
        matches = [t for t in target_list if t.display_name == name]
        if matches:
            return matches[0]
        return
    def _add_custom_lom_listeners_handler(self, mode_number, updated_by=False):
        self.log("custom lom listeners refreshed")
        name_string = "_mode" + str(mode_number) + "_custom_lom_listeners"
        if hasattr(self, name_string):
            try:
                mode_to_call = getattr(self, name_string)
                mode_to_call(updated_by)
            except:
                self.log_message("csslog: unable to run " + name_string)
                pass
    def _remove_custom_lom_listeners_handler(self, mode_number, updated_by=False):
        name_string = "_remove_mode" + str(mode_number) + "_custom_lom_listeners"
        if hasattr(self, name_string):
            try:
                mode_to_call = getattr(self, name_string)
                mode_to_call(updated_by)
            except:
                self.log_message("csslog: unable to run " + name_string)
                pass
    def get_modifier_value(self, mod_name):
        return self.modifiers[mod_name]["value"]
    def set_modifier_value(self, mod_name, contents):
        global active_mode
        self.modifiers[mod_name]["value"] = contents
        self.call_script_reaction(active_mode, mod_name, "modifier_was_updated")
    def call_script_reaction(self, mode_id, param2, reaction_name):
        one = "";
        two = "";
        three = "";
        if(mode_id!=None):
            one = "_mode_" + str(mode_id)
        if(param2!=None):
            two = "_" + str(param2)
        if(reaction_name!=None):
            three = "_" + str(reaction_name)
        reaction_method = one + two + three
        if hasattr(self, reaction_method):
            getattr(self, reaction_method)()
    def disconnect(self):
        self.call_script_reaction(None, None, 'script_is_disconnected')
        super(css_ck_lc16___generated, self).disconnect()