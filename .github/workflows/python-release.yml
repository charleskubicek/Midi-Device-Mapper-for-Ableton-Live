name: Python Application - Build and Release (ZIP)

on:
  push:
    branches: [ "master" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.7.1"
      - name: View poetry --help
        run: poetry --help
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install
      - name: Run the automated tests
        run: cd tests && PYTHONPATH=. poetry run pytest -v

      # --- Get Project Name and Version ---
      - name: Get Project Metadata
        id: project_metadata
        run: |
          echo "::set-output name=name::$(poetry version -s | cut -d' ' -f1)"
          echo "::set-output name=version::$(poetry version -s | cut -d' ' -f2)"

      # --- ZIP File Creation ---
      - name: Create ZIP Archive (Source Code)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        id: create_zip
        run: |
          mkdir -p release_artifacts
          zip -r release_artifacts/${{ steps.project_metadata.outputs.name }}-${{ steps.project_metadata.outputs.version }}.zip . -x ".git/*" ".venv/*" "tests/*" "dist/*" "*.pyc" "__pycache__/*"
          ls -l release_artifacts

      - name: Create Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body: |
            ## Changelog
            - Add detailed changes here.

      - name: Upload Release Asset (ZIP)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_artifacts/${{ steps.project_metadata.outputs.name }}-${{ steps.project_metadata.outputs.version }}.zip
          asset_name: ${{ steps.project_metadata.outputs.name }}-${{ steps.project_metadata.outputs.version }}.zip
          asset_content_type: application/zip

      # --- Wheel and sdist Creation and Upload ---
      - name: Build Project (for wheel and sdist)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        id: build_artifacts
        run: |
          poetry build
          ls -l dist

      - name: Upload Release Asset (Wheel)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/${{ steps.project_metadata.outputs.name }}-${{ steps.project_metadata.outputs.version }}-py3-none-any.whl  # Dynamic and correct!
          asset_name: ${{ steps.project_metadata.outputs.name }}-${{ steps.project_metadata.outputs.version }}-py3-none-any.whl  # Dynamic and correct!
          asset_content_type: application/zip

      - name: Upload Release Asset (Source Distribution)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/${{ steps.project_metadata.outputs.name }}-${{ steps.project_metadata.outputs.version }}.tar.gz  # Dynamic and correct!
          asset_name: ${{ steps.project_metadata.outputs.name }}-${{ steps.project_metadata.outputs.version }}.tar.gz  # Dynamic and correct!
          asset_content_type: application/gzip